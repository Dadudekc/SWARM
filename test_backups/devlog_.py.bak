"""
Agent Log Manager

Manages development logs for agents and system components.
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime
from social.utils.log_manager import LogManager
from social.utils.log_config import LogConfig
import json

logger = logging.getLogger('devlog')

class AgentLogManager:
    """Manages development logs for agents and system components."""
    
    def __init__(self):
        """Initialize AgentLogManager."""
        self.logs: Dict[str, Any] = {}
        
        # Initialize LogManager with devlog-specific config
        log_config = LogConfig(
            log_dir="logs/devlog",
            batch_size=5,  # Smaller batch size for devlogs
            batch_timeout=0.5,  # Faster flush for devlogs
            max_retries=2,
            retry_delay=0.1
        )
        self.log_manager = LogManager(config=log_config)
        
    def log_event(self, agent_id: str, event: str, data: Optional[Dict] = None):
        """Log an event for an agent.
        
        Args:
            agent_id: ID of the agent
            event: Event type
            data: Optional event data
        """
        logger.debug(f"Logging event for {agent_id}: {event}")
        
        # Store in memory
        if agent_id not in self.logs:
            self.logs[agent_id] = []
        self.logs[agent_id].append({"event": event, "data": data})
        
        # Log to LogManager
        self.log_manager.info(
            platform="devlog",
            status=event,
            message=f"Devlog event for {agent_id}",
            metadata={
                "agent_id": agent_id,
                "event": event,
                "data": data
            }
        )
        
    def get_logs(self, agent_id: str) -> list:
        """Get logs for an agent.
        
        Args:
            agent_id: ID of the agent
            
        Returns:
            List of log entries
        """
        # Get from LogManager
        log_manager_logs = self.log_manager.read_logs(
            platform="devlog",
            metadata={"agent_id": agent_id}
        )
        
        # Combine with memory logs
        memory_logs = self.logs.get(agent_id, [])
        return memory_logs + log_manager_logs
        
    def clear_logs(self, agent_id: str):
        """Clear logs for an agent.
        
        Args:
            agent_id: ID of the agent
        """
        # Clear memory logs
        if agent_id in self.logs:
            self.logs[agent_id] = []
            
        # Log the clearing
        self.log_manager.info(
            platform="devlog",
            status="cleared",
            message=f"Cleared logs for {agent_id}",
            metadata={"agent_id": agent_id}
        )
        
    def export_logs(self, agent_id: str, format: str = "markdown") -> str:
        """Export logs for an agent in specified format.
        
        Args:
            agent_id: ID of the agent
            format: Export format (markdown/json)
            
        Returns:
            Exported logs as string
        """
        logs = self.get_logs(agent_id)
        
        if format == "markdown":
            output = f"# Devlog for {agent_id}\n\n"
            for log in logs:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                event = log.get("event", "unknown")
                data = log.get("data", {})
                
                output += f"## {timestamp} - {event}\n"
                if data:
                    output += "```json\n"
                    output += json.dumps(data, indent=2)
                    output += "\n```\n"
                output += "\n"
                
        elif format == "json":
            output = json.dumps(logs, indent=2)
            
        else:
            raise ValueError(f"Unsupported format: {format}")
            
        return output 