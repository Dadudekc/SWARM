"""Tests for the LogRotator component."""

import pytest
from pathlib import Path
import json
from datetime import datetime, timedelta
import time
import os

from social.utils.log_rotator import LogRotator, RotationConfig

@pytest.fixture
def test_log_dir(tmp_path):
    """Create a temporary log directory for testing."""
    log_dir = tmp_path / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    return log_dir

@pytest.fixture
def rotation_config():
    """Create a test rotation configuration."""
    return RotationConfig(
        max_size=1024,  # 1KB
        max_age=7,  # 7 days
        compress_after=1  # 1 day
    )

@pytest.fixture
def log_rotator(test_log_dir, rotation_config):
    """Create a LogRotator instance for testing."""
    return LogRotator(log_dir=test_log_dir, config=rotation_config)

def test_log_rotator_initialization(log_rotator, test_log_dir, rotation_config):
    """Test LogRotator initialization."""
    assert log_rotator.log_dir == test_log_dir
    assert log_rotator.config == rotation_config

def test_rotate_large_file(log_rotator, test_log_dir):
    """Test rotating a file that exceeds max size."""
    # Create a large log file
    log_file = test_log_dir / "test_operations.json"
    with open(log_file, "w") as f:
        for i in range(1000):  # Write enough to exceed 1KB
            f.write(json.dumps({"message": "x" * 100}) + "\n")
    
    # Trigger rotation
    log_rotator.rotate_if_needed(log_file)
    
    # Check for rotated file
    rotated_files = list(test_log_dir.glob("test_operations_*.json"))
    assert len(rotated_files) == 1
    assert not log_file.exists()  # Original file should be gone

def test_compress_old_file(log_rotator, test_log_dir):
    """Test compressing old log files."""
    # Create an old log file
    log_file = test_log_dir / "test_operations_20230101.json"
    log_file.write_text("Test content")
    
    # Set file modification time to be old enough for compression
    old_time = datetime.now() - timedelta(days=2)
    log_file.touch(exist_ok=True)
    os.utime(log_file, (old_time.timestamp(), old_time.timestamp()))
    
    # Trigger compression
    log_rotator.compress_if_needed(log_file)
    
    # Check for compressed file
    compressed_file = log_file.with_suffix(log_file.suffix + ".gz")
    assert compressed_file.exists()
    assert not log_file.exists()

def test_cleanup_old_files(log_rotator, test_log_dir):
    """Test cleaning up old log files."""
    # Create old log files
    old_files = []
    for i in range(3):
        file = test_log_dir / f"old_{i}.json"
        file.write_text("Old content")
        old_time = datetime.now() - timedelta(days=8)
        file.touch(exist_ok=True)
        os.utime(file, (old_time.timestamp(), old_time.timestamp()))
        old_files.append(file)
    
    # Run cleanup
    log_rotator.cleanup()
    
    # Check that old files were removed
    for file in old_files:
        assert not file.exists()

def test_do_not_rotate_small_file(log_rotator, test_log_dir):
    """Test that small files are not rotated."""
    # Create a small log file
    log_file = test_log_dir / "test_operations.json"
    log_file.write_text("Small content")
    
    # Try to rotate
    log_rotator.rotate_if_needed(log_file)
    
    # Check that file wasn't rotated
    assert log_file.exists()
    rotated_files = list(test_log_dir.glob("test_operations_*.json"))
    assert len(rotated_files) == 0

def test_do_not_compress_new_file(log_rotator, test_log_dir):
    """Test that new files are not compressed."""
    # Create a new log file
    log_file = test_log_dir / "test_operations_20230101.json"
    log_file.write_text("New content")
    
    # Try to compress
    log_rotator.compress_if_needed(log_file)
    
    # Check that file wasn't compressed
    assert log_file.exists()
    compressed_file = log_file.with_suffix(log_file.suffix + ".gz")
    assert not compressed_file.exists() 