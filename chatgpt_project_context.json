{
    "project_root": "D:\\SWARM\\Dream.OS",
    "num_files_analyzed": 47,
    "analysis_details": {
        "agent_tools\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agent_tools\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\deprecated\\auth_managers\\core_auth_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_attempt_login",
                "login",
                "logout",
                "verify_session",
                "refresh_token",
                "cleanup_expired_sessions",
                "login_operation"
            ],
            "classes": {
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_attempt_login",
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token",
                        "cleanup_expired_sessions"
                    ],
                    "docstring": "Authentication manager implementing the platform-agnostic interface.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\deprecated\\auth_managers\\core_session_manager.py": {
            "language": ".py",
            "functions": [
                "extend",
                "is_valid",
                "time_remaining",
                "__init__",
                "start_cleanup",
                "stop_cleanup",
                "create_session",
                "get_session",
                "invalidate_session",
                "cleanup_expired",
                "_generate_session_id",
                "cleanup_loop"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "extend",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents an active user session.",
                    "base_classes": []
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "start_cleanup",
                        "stop_cleanup",
                        "create_session",
                        "get_session",
                        "invalidate_session",
                        "cleanup_expired",
                        "_generate_session_id"
                    ],
                    "docstring": "Manages user sessions with automatic cleanup.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "archive\\deprecated\\auth_managers\\legacy_auth_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_attempt_login",
                "login",
                "logout",
                "verify_session",
                "refresh_token",
                "cleanup_expired_sessions",
                "login_operation"
            ],
            "classes": {
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_attempt_login",
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token",
                        "cleanup_expired_sessions"
                    ],
                    "docstring": "Authentication manager implementing the platform-agnostic interface.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\auth_backup_20250605_161813\\auth\\interface.py": {
            "language": ".py",
            "functions": [
                "login",
                "logout",
                "verify_session",
                "refresh_token"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AbstractAuthInterface": {
                    "methods": [
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token"
                    ],
                    "docstring": "Abstract base class defining the authentication interface.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\auth_backup_20250605_161813\\auth\\manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_attempt_login",
                "login",
                "logout",
                "verify_session",
                "refresh_token",
                "cleanup_expired_sessions",
                "login_operation"
            ],
            "classes": {
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_attempt_login",
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token",
                        "cleanup_expired_sessions"
                    ],
                    "docstring": "Authentication manager implementing the platform-agnostic interface.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\auth_backup_20250605_161813\\auth\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "__init__",
                "calculate_delay",
                "execute",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RetryError": {
                    "methods": [],
                    "docstring": "Base class for retry-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "RetryMechanism": {
                    "methods": [
                        "__init__",
                        "calculate_delay",
                        "execute"
                    ],
                    "docstring": "Implements retry logic with exponential backoff.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "backups\\auth_backup_20250605_161813\\auth\\session.py": {
            "language": ".py",
            "functions": [
                "extend",
                "is_valid",
                "time_remaining",
                "__init__",
                "start_cleanup",
                "stop_cleanup",
                "create_session",
                "get_session",
                "invalidate_session",
                "cleanup_expired",
                "_generate_session_id",
                "cleanup_loop"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "extend",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents an active user session.",
                    "base_classes": []
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "start_cleanup",
                        "stop_cleanup",
                        "create_session",
                        "get_session",
                        "invalidate_session",
                        "cleanup_expired",
                        "_generate_session_id"
                    ],
                    "docstring": "Manages user sessions with automatic cleanup.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "backups\\auth_backup_20250605_161813\\auth\\token.py": {
            "language": ".py",
            "functions": [
                "is_valid",
                "time_remaining",
                "__init__",
                "generate_token",
                "validate_token",
                "get_token_info",
                "refresh_token",
                "invalidate_token",
                "cleanup_expired",
                "_sign_token"
            ],
            "classes": {
                "TokenInfo": {
                    "methods": [
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents token metadata.",
                    "base_classes": []
                },
                "TokenHandler": {
                    "methods": [
                        "__init__",
                        "generate_token",
                        "validate_token",
                        "get_token_info",
                        "refresh_token",
                        "invalidate_token",
                        "cleanup_expired",
                        "_sign_token"
                    ],
                    "docstring": "Handles token generation, validation, and refresh.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "backups\\auth_backup_20250605_161813\\auth\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\auth_backup_20250605_162224\\auth\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "is_valid",
                "time_remaining"
            ],
            "classes": {
                "ExpirableMixin": {
                    "methods": [
                        "__post_init__",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Mixin providing expiration-related functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\auth_backup_20250605_162224\\auth\\interface.py": {
            "language": ".py",
            "functions": [
                "login",
                "logout",
                "verify_session",
                "refresh_token"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AbstractAuthInterface": {
                    "methods": [
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token"
                    ],
                    "docstring": "Abstract base class defining the authentication interface.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\auth_backup_20250605_162224\\auth\\manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_attempt_login",
                "login",
                "logout",
                "verify_session",
                "refresh_token",
                "cleanup_expired_sessions",
                "login_operation"
            ],
            "classes": {
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_attempt_login",
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token",
                        "cleanup_expired_sessions"
                    ],
                    "docstring": "Authentication manager implementing the platform-agnostic interface.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\auth_backup_20250605_162224\\auth\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "__init__",
                "calculate_delay",
                "execute",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RetryError": {
                    "methods": [],
                    "docstring": "Base class for retry-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "RetryMechanism": {
                    "methods": [
                        "__init__",
                        "calculate_delay",
                        "execute"
                    ],
                    "docstring": "Implements retry logic with exponential backoff.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "backups\\auth_backup_20250605_162224\\auth\\session.py": {
            "language": ".py",
            "functions": [
                "extend",
                "is_valid",
                "time_remaining",
                "__init__",
                "start_cleanup",
                "stop_cleanup",
                "create_session",
                "get_session",
                "invalidate_session",
                "cleanup_expired",
                "_generate_session_id",
                "cleanup_loop"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "extend",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents an active user session.",
                    "base_classes": []
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "start_cleanup",
                        "stop_cleanup",
                        "create_session",
                        "get_session",
                        "invalidate_session",
                        "cleanup_expired",
                        "_generate_session_id"
                    ],
                    "docstring": "Manages user sessions with automatic cleanup.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "backups\\auth_backup_20250605_162224\\auth\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\auth_backup_20250605_162744\\auth\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "is_valid",
                "time_remaining"
            ],
            "classes": {
                "ExpirableMixin": {
                    "methods": [
                        "__post_init__",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Mixin providing expiration-related functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\auth_backup_20250605_162744\\auth\\token.py": {
            "language": ".py",
            "functions": [
                "is_valid",
                "time_remaining",
                "__init__",
                "generate_token",
                "validate_token",
                "get_token_info",
                "refresh_token",
                "invalidate_token",
                "cleanup_expired",
                "_sign_token"
            ],
            "classes": {
                "TokenInfo": {
                    "methods": [
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents token metadata.",
                    "base_classes": []
                },
                "TokenHandler": {
                    "methods": [
                        "__init__",
                        "generate_token",
                        "validate_token",
                        "get_token_info",
                        "refresh_token",
                        "invalidate_token",
                        "cleanup_expired",
                        "_sign_token"
                    ],
                    "docstring": "Handles token generation, validation, and refresh.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "backups\\auth_backup_20250605_162744\\auth\\session.py": {
            "language": ".py",
            "functions": [
                "extend",
                "is_valid",
                "time_remaining",
                "__init__",
                "start_cleanup",
                "stop_cleanup",
                "create_session",
                "get_session",
                "invalidate_session",
                "cleanup_expired",
                "_generate_session_id",
                "cleanup_loop"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "extend",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents an active user session.",
                    "base_classes": []
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "start_cleanup",
                        "stop_cleanup",
                        "create_session",
                        "get_session",
                        "invalidate_session",
                        "cleanup_expired",
                        "_generate_session_id"
                    ],
                    "docstring": "Manages user sessions with automatic cleanup.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "backups\\auth_backup_20250605_162744\\auth\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\auth\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "is_valid",
                "time_remaining"
            ],
            "classes": {
                "ExpirableMixin": {
                    "methods": [
                        "__post_init__",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Mixin providing expiration-related functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\auth\\interface.py": {
            "language": ".py",
            "functions": [
                "login",
                "logout",
                "verify_session",
                "refresh_token"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AbstractAuthInterface": {
                    "methods": [
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token"
                    ],
                    "docstring": "Abstract base class defining the authentication interface.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\auth\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "__init__",
                "calculate_delay",
                "execute",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RetryError": {
                    "methods": [],
                    "docstring": "Base class for retry-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "RetryMechanism": {
                    "methods": [
                        "__init__",
                        "calculate_delay",
                        "execute"
                    ],
                    "docstring": "Implements retry logic with exponential backoff.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\auth\\token.py": {
            "language": ".py",
            "functions": [
                "is_valid",
                "time_remaining",
                "__init__",
                "generate_token",
                "validate_token",
                "get_token_info",
                "refresh_token",
                "invalidate_token",
                "cleanup_expired",
                "_sign_token"
            ],
            "classes": {
                "TokenInfo": {
                    "methods": [
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents token metadata.",
                    "base_classes": []
                },
                "TokenHandler": {
                    "methods": [
                        "__init__",
                        "generate_token",
                        "validate_token",
                        "get_token_info",
                        "refresh_token",
                        "invalidate_token",
                        "cleanup_expired",
                        "_sign_token"
                    ],
                    "docstring": "Handles token generation, validation, and refresh.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "dreamos\\core\\auth\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\autonomy\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "current_state",
                "transition_history",
                "add_state_handler",
                "remove_state_handler",
                "clear_handlers",
                "get_transitions_since",
                "get_last_transition",
                "reset"
            ],
            "classes": {
                "State": {
                    "methods": [],
                    "docstring": "Possible states for autonomous components.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "StateTransition": {
                    "methods": [],
                    "docstring": "Record of a state transition.",
                    "base_classes": []
                },
                "StateTransitionError": {
                    "methods": [],
                    "docstring": "Error raised when a state transition is invalid.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "StateManager": {
                    "methods": [
                        "__init__",
                        "current_state",
                        "transition_history",
                        "add_state_handler",
                        "remove_state_handler",
                        "clear_handlers",
                        "get_transitions_since",
                        "get_last_transition",
                        "reset"
                    ],
                    "docstring": "Manages state transitions for autonomous components.\n\nThis class provides functionality to:\n- Track current state\n- Validate state transitions\n- Record transition history\n- Handle state-specific actions",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\autonomy\\base\\response_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_response"
            ],
            "classes": {
                "ResponseLoopConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for response loops.",
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "ResponseMetadata": {
                    "methods": [],
                    "docstring": "Metadata for response processing.",
                    "base_classes": []
                },
                "BaseResponseLoop": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "Base class for all response loop daemons.\n\nProvides common functionality for:\n- File polling and response processing\n- State management and transitions\n- Error handling and recovery\n- Resource cleanup",
                    "base_classes": [
                        null,
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\autonomy\\base\\runner_lifecycle.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RunnerConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for runners.",
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "RunnerLifecycleMixin": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mixin for managing runner lifecycle.\n\nThis mixin provides core functionality for:\n- Starting/stopping runners\n- Managing state transitions\n- Handling errors and retries\n- Resource cleanup",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\base\\test_response_loop.py": {
            "language": ".py",
            "functions": [
                "config",
                "response_files",
                "__init__",
                "_validate_response"
            ],
            "classes": {
                "TestResponseLoop": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "Test implementation of BaseResponseLoop.",
                    "base_classes": [
                        null
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\autonomy\\utils\\async_file_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_file_info",
                "clear_cache",
                "last_check",
                "watched_files"
            ],
            "classes": {
                "AsyncFileWatcher": {
                    "methods": [
                        "__init__",
                        "get_file_info",
                        "clear_cache",
                        "last_check",
                        "watched_files"
                    ],
                    "docstring": "Asynchronously watches a directory for file changes.\n\nThis class provides functionality to monitor a directory for file changes\nusing polling. It maintains a cache of file modification times to detect\nchanges between polls.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\utils\\core_utils.py": {
            "language": ".py",
            "functions": [
                "async_retry",
                "track_operation",
                "ensure_dir",
                "atomic_write",
                "safe_read",
                "safe_write",
                "load_json",
                "save_json",
                "read_json",
                "backup_file",
                "transform_coordinates",
                "ensure_dir",
                "__init__",
                "add_error",
                "get_errors",
                "clear_errors",
                "decorator",
                "decorator"
            ],
            "classes": {
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "add_error",
                        "get_errors",
                        "clear_errors"
                    ],
                    "docstring": "Track and manage operation errors.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "dreamos\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "atomic_write",
                "safe_read",
                "safe_write",
                "load_json",
                "save_json",
                "ensure_dir",
                "clear_dir",
                "archive_file",
                "extract_agent_id",
                "read_json",
                "backup_file",
                "write_json",
                "restore_backup",
                "read_yaml",
                "load_yaml",
                "write_yaml",
                "safe_rmdir",
                "save_yaml"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "configure_logging",
                "get_logger",
                "log_platform_event",
                "__init__",
                "log_event",
                "get_events",
                "clear_events",
                "__init__",
                "update_status",
                "get_status",
                "reset_status"
            ],
            "classes": {
                "PlatformEventLogger": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_events",
                        "clear_events"
                    ],
                    "docstring": "Log platform events with structured data.",
                    "base_classes": []
                },
                "StatusTracker": {
                    "methods": [
                        "__init__",
                        "update_status",
                        "get_status",
                        "reset_status"
                    ],
                    "docstring": "Track platform operation status.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 19
        },
        "dreamos\\social\\utils\\base_log_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Standard log levels for consistent logging across the application.",
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "dreamos\\social\\utils\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_files",
                "validate",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_files",
                        "validate",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for upload.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\social\\utils\\social_common.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "wait_for_element",
                "wait_for_clickable",
                "retry_click",
                "handle_login",
                "post_content",
                "verify_post_success",
                "validate_media",
                "upload_media"
            ],
            "classes": {
                "SocialMediaUtils": {
                    "methods": [
                        "__init__",
                        "wait_for_element",
                        "wait_for_clickable",
                        "retry_click",
                        "handle_login",
                        "post_content",
                        "verify_post_success",
                        "validate_media",
                        "upload_media"
                    ],
                    "docstring": "Common utilities for social media operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\reddit\\rate_limiting\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\cleanup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_file_locked",
                "_force_close_handle",
                "_wait_for_file_unlock",
                "safe_remove",
                "cleanup_directory",
                "cleanup_temp_files"
            ],
            "classes": {
                "FileCleanup": {
                    "methods": [
                        "__init__",
                        "_is_file_locked",
                        "_force_close_handle",
                        "_wait_for_file_unlock",
                        "safe_remove",
                        "cleanup_directory",
                        "cleanup_temp_files"
                    ],
                    "docstring": "Handles safe file cleanup with proper lock handling.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\utils\\json_settings.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "__getattr__",
                "__iter__",
                "items",
                "values",
                "__getitem__",
                "as_dict",
                "__init__",
                "reload",
                "convert"
            ],
            "classes": {
                "ConfigNode": {
                    "methods": [
                        "__post_init__",
                        "__getattr__",
                        "__iter__",
                        "items",
                        "values",
                        "__getitem__",
                        "as_dict"
                    ],
                    "docstring": "Data holder that provides attribute access like a dotmap.",
                    "base_classes": []
                },
                "JSONConfig": {
                    "methods": [
                        "__init__",
                        "reload"
                    ],
                    "docstring": "Load configuration from a JSON file.",
                    "base_classes": [
                        "ConfigNode"
                    ]
                }
            },
            "routes": [],
            "complexity": 19
        },
        "social\\utils\\log_pipeline.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_file_lock",
                "_is_file_locked",
                "_force_close_handle",
                "_wait_for_file_unlock",
                "add_entry",
                "flush",
                "read_logs",
                "get_log_info",
                "stop",
                "__del__"
            ],
            "classes": {
                "LogPipeline": {
                    "methods": [
                        "__init__",
                        "_get_file_lock",
                        "_is_file_locked",
                        "_force_close_handle",
                        "_wait_for_file_unlock",
                        "add_entry",
                        "flush",
                        "read_logs",
                        "get_log_info",
                        "stop",
                        "__del__"
                    ],
                    "docstring": "Unified log handling system combining batching and reading functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\utils\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_rate_limit",
                "set_rate_limit",
                "reset_limits",
                "get_remaining"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_rate_limit",
                        "set_rate_limit",
                        "reset_limits",
                        "get_remaining"
                    ],
                    "docstring": "Handles rate limiting for API operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\core\\test_agent_loop_dreamscribe.py": {
            "language": ".py",
            "functions": [
                "mock_agent_control",
                "agent_loop",
                "agent_loop"
            ],
            "classes": {
                "MockQtWidgets": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "MockQtCore": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "MockQtGui": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QMainWindow": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QWidget": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QVBoxLayout": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QPushButton": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QLabel": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QFrame": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QSizePolicy": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Qt": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QSize": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QObject": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "pyqtSignal": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QFont": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QColor": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QPalette": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 3
        },
        "tests\\utils\\mock_discord\\models.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_role",
                "get_member",
                "get_channel",
                "__init__",
                "add_member",
                "remove_member",
                "__init__",
                "add_role",
                "remove_role",
                "__init__",
                "__init__",
                "__init__",
                "add_field",
                "set_footer",
                "set_image",
                "set_thumbnail",
                "__init__"
            ],
            "classes": {
                "MockGuild": {
                    "methods": [
                        "__init__",
                        "get_role",
                        "get_member",
                        "get_channel"
                    ],
                    "docstring": "Mock Discord Guild for testing.",
                    "base_classes": []
                },
                "MockRole": {
                    "methods": [
                        "__init__",
                        "add_member",
                        "remove_member"
                    ],
                    "docstring": "Mock Discord Role for testing.",
                    "base_classes": []
                },
                "MockMember": {
                    "methods": [
                        "__init__",
                        "add_role",
                        "remove_role"
                    ],
                    "docstring": "Mock Discord Member for testing.",
                    "base_classes": []
                },
                "MockChannel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Channel for testing.",
                    "base_classes": []
                },
                "MockMessage": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Message for testing.",
                    "base_classes": []
                },
                "MockEmbed": {
                    "methods": [
                        "__init__",
                        "add_field",
                        "set_footer",
                        "set_image",
                        "set_thumbnail"
                    ],
                    "docstring": "Mock Discord Embed for testing.",
                    "base_classes": []
                },
                "MockFile": {
                    "methods": [],
                    "docstring": "Mock Discord File for testing.",
                    "base_classes": []
                },
                "MockWebhook": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Webhook for testing.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 36
        },
        "tests\\utils\\mock_discord\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}