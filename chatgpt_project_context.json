{
    "project_root": "D:\\SWARM\\Dream.OS",
    "num_files_analyzed": 20,
    "analysis_details": {
        "social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\driver\\driver_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\driver\\session_state.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_media",
                "is_logged_in",
                "login",
                "post",
                "comment"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "_validate_media",
                        "is_logged_in",
                        "login",
                        "post",
                        "comment"
                    ],
                    "docstring": "Strategy for interacting with Reddit.",
                    "base_classes": [
                        "PlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\strategies\\platform_strategy_base.py": {
            "language": ".py",
            "functions": [
                "retry_with_recovery",
                "decorator",
                "__init__",
                "_calculate_retry_delay",
                "_log_error_with_trace",
                "_track_operation_time",
                "_update_memory",
                "_log_action",
                "_handle_media_upload",
                "_validate_media",
                "get_memory_updates",
                "get_operation_stats",
                "is_logged_in",
                "login",
                "post",
                "create_post",
                "_create_post_impl",
                "_find_element",
                "_click_element",
                "_send_keys",
                "wrapper"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_calculate_retry_delay",
                        "_log_error_with_trace",
                        "_track_operation_time",
                        "_update_memory",
                        "_log_action",
                        "_handle_media_upload",
                        "_validate_media",
                        "get_memory_updates",
                        "get_operation_stats",
                        "is_logged_in",
                        "login",
                        "post",
                        "create_post",
                        "_create_post_impl",
                        "_find_element",
                        "_click_element",
                        "_send_keys"
                    ],
                    "docstring": "Base class for all social media platform strategies.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 39
        },
        "social\\strategies\\reddit\\strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "post",
                "is_logged_in",
                "login",
                "comment",
                "_validate_media"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "post",
                        "is_logged_in",
                        "login",
                        "comment",
                        "_validate_media"
                    ],
                    "docstring": "Strategy for interacting with Reddit.",
                    "base_classes": [
                        "PlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\strategies\\reddit\\handlers\\comment_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_comment",
                "_verify_comment_success"
            ],
            "classes": {
                "CommentHandler": {
                    "methods": [
                        "__init__",
                        "add_comment",
                        "_verify_comment_success"
                    ],
                    "docstring": "Handles all comment-related operations for Reddit.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\reddit\\handlers\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_logged_in",
                "login"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "login"
                    ],
                    "docstring": "Handles all login-related operations for Reddit.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\reddit\\handlers\\post_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "_handle_media_upload",
                "_verify_post_success"
            ],
            "classes": {
                "PostHandler": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "_handle_media_upload",
                        "_verify_post_success"
                    ],
                    "docstring": "Handles all post-related operations for Reddit.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\strategies\\reddit\\validators\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for Reddit posts.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\utils\\log_batcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add",
                "get_entries",
                "clear",
                "is_empty",
                "_should_flush",
                "flush"
            ],
            "classes": {
                "LogBatcher": {
                    "methods": [
                        "__init__",
                        "add",
                        "get_entries",
                        "clear",
                        "is_empty",
                        "_should_flush",
                        "flush"
                    ],
                    "docstring": "Handles batching log entries for efficient writing.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\utils\\log_config.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "__init__",
                "add_platform"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Logging levels as an enum for type safety.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "LogConfig": {
                    "methods": [
                        "__init__",
                        "add_platform"
                    ],
                    "docstring": "Configuration for logging setup.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\utils\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "write_log",
                "_write_batch",
                "flush",
                "info",
                "warning",
                "error",
                "debug",
                "get_metrics",
                "reset",
                "reset_singleton"
            ],
            "classes": {
                "LogManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "write_log",
                        "_write_batch",
                        "flush",
                        "info",
                        "warning",
                        "error",
                        "debug",
                        "get_metrics",
                        "reset",
                        "reset_singleton"
                    ],
                    "docstring": "Manages logging operations and coordinates between different logging components.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\utils\\log_rotator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "should_rotate",
                "rotate_file",
                "cleanup_old_files",
                "get_rotation_info",
                "reset"
            ],
            "classes": {
                "LogRotator": {
                    "methods": [
                        "__init__",
                        "should_rotate",
                        "rotate_file",
                        "cleanup_old_files",
                        "get_rotation_info",
                        "reset"
                    ],
                    "docstring": "Handles log file rotation and cleanup.",
                    "base_classes": []
                },
                "RotationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\utils\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "increment_logs",
                "record_error",
                "record_rotation",
                "record_operation_time",
                "record_retry",
                "get_metrics",
                "reset"
            ],
            "classes": {
                "LogMetrics": {
                    "methods": [
                        "__init__",
                        "increment_logs",
                        "record_error",
                        "record_rotation",
                        "record_operation_time",
                        "record_retry",
                        "get_metrics",
                        "reset"
                    ],
                    "docstring": "Tracks and aggregates logging metrics.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\utils\\log_writer.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "__init__",
                "__init__",
                "write_log",
                "read_logs",
                "clear_logs",
                "_is_in_time_range",
                "_parse_text_entry",
                "_update_text_entry"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Log levels for entries.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "LogEntry": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Represents a single log entry.",
                    "base_classes": []
                },
                "LogWriter": {
                    "methods": [
                        "__init__",
                        "write_log",
                        "read_logs",
                        "clear_logs",
                        "_is_in_time_range",
                        "_parse_text_entry",
                        "_update_text_entry"
                    ],
                    "docstring": "Handles writing log entries to files.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17
        },
        "social\\utils\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_files",
                "validate",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_files",
                        "validate",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for upload.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\utils\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_rate_limit",
                "set_rate_limit",
                "reset_limits",
                "get_remaining"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_rate_limit",
                        "set_rate_limit",
                        "reset_limits",
                        "get_remaining"
                    ],
                    "docstring": "Handles rate limiting for API operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "setup_test_dirs",
                "clean_test_dirs",
                "setup_logging",
                "mock_pyautogui",
                "temp_dir",
                "test_dirs",
                "test_env",
                "clean_test_dirs",
                "mock_config",
                "log_config",
                "setup_test_env",
                "pytest_configure",
                "pytest_collection_modifyitems",
                "test_data_dir",
                "mock_agent_registry",
                "test_messages",
                "clean_runtime_dir",
                "voice_queue",
                "bot",
                "temp_config_dir",
                "temp_runtime_dir",
                "message_processor",
                "agent_operations",
                "temp_voice_dir",
                "mock_driver_manager",
                "mock_dispatcher",
                "mock_rate_limiter",
                "mock_platform_strategy",
                "gui_test_env",
                "mock_agent_config",
                "test_log_dir",
                "mock_log_data",
                "mock_log_file",
                "mock_old_log_file",
                "mock_compressed_log_file",
                "setup_and_cleanup",
                "temp_log_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 37
        },
        "tests\\social\\strategies\\test_reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_config",
                "mock_memory_update",
                "strategy",
                "reddit_strategy_fixture",
                "test_initialization",
                "test_is_logged_in",
                "test_validate_media",
                "test_validate_media_edge_cases",
                "test_validate_media_real_files",
                "test_memory_error_tracking",
                "test_post_and_comment_flow",
                "test_rate_limiting_flow",
                "test_validate_media_single_image",
                "test_validate_media_empty",
                "test_validate_media_unsupported_format",
                "test_validate_media_too_many_images",
                "test_validate_media_invalid_format",
                "mock_splitext",
                "mock_splitext"
            ],
            "classes": {
                "TestRedditStrategy": {
                    "methods": [
                        "test_initialization",
                        "test_is_logged_in",
                        "test_validate_media",
                        "test_validate_media_edge_cases",
                        "test_validate_media_real_files",
                        "test_memory_error_tracking",
                        "test_post_and_comment_flow",
                        "test_rate_limiting_flow",
                        "test_validate_media_single_image",
                        "test_validate_media_empty",
                        "test_validate_media_unsupported_format",
                        "test_validate_media_too_many_images",
                        "test_validate_media_invalid_format"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 33
        }
    }
}