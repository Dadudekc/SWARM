{
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tqdm.py": {
        "language": ".py",
        "functions": [
            "tqdm"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\discord\\__init__.py": {
        "language": ".py",
        "functions": [
            "_load_custom_mapping",
            "_infer_channel",
            "_resolve_webhook",
            "_build_embed",
            "post_status"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agent_tools\\resume_agents.py": {
        "language": ".py",
        "functions": [
            "_resolve_prompt",
            "_run_sequence",
            "_launch_gui",
            "main",
            "_on_run",
            "_patched_write"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "agent_tools\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\core\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "_to_path",
            "get_file_extension",
            "is_valid_file",
            "is_test_file",
            "normalize_path",
            "ensure_dir",
            "clean_dir",
            "safe_mkdir",
            "safe_rmdir",
            "read_file",
            "write_file",
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml",
            "_make_suffix",
            "backup_file",
            "archive_file",
            "extract_agent_id"
        ],
        "classes": {},
        "routes": [],
        "complexity": 19
    },
    "agent_tools\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\fileops\\pattern_delete.py": {
        "language": ".py",
        "functions": [
            "_filename_matches",
            "_content_matches",
            "pattern_delete"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "agent_tools\\swarm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "config\\agent\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "config\\agent\\debug_logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "docs\\examples\\llm_agent_example.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "docs\\examples\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "broadcast_message",
            "get_messages",
            "acknowledge_message"
        ],
        "classes": {
            "MessageHandler": {
                "methods": [
                    "__init__",
                    "send_message",
                    "broadcast_message",
                    "get_messages",
                    "acknowledge_message"
                ],
                "docstring": "Stubbed MessageHandler \u2013 replace with real implementation if needed.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "sitecustomize.py": {
        "language": ".py",
        "functions": [
            "_create_stub_module",
            "__init__",
            "_noop",
            "__init__",
            "__iter__",
            "update",
            "close",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Placeholder for the historical Qt main window.",
                "base_classes": []
            },
            "_DummyTqdm": {
                "methods": [
                    "__init__",
                    "__iter__",
                    "update",
                    "close",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "agent_tools\\swarm\\analyzers\\architectural_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_architecture"
        ],
        "classes": {
            "ArchitecturalAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_architecture"
                ],
                "docstring": "Minimal placeholder implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\swarm\\analyzers\\ast_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_source"
        ],
        "classes": {
            "ASTAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_source"
                ],
                "docstring": "Minimal placeholder implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\swarm\\analyzers\\code_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze"
                ],
                "docstring": "Minimal placeholder implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\swarm\\analyzers\\quality_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_quality"
        ],
        "classes": {
            "QualityAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_quality"
                ],
                "docstring": "Minimal placeholder implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\swarm\\analyzers\\duplicate_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_duplicates"
        ],
        "classes": {
            "DuplicateAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_duplicates"
                ],
                "docstring": "Minimal placeholder implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\bridge.py": {
        "language": ".py",
        "functions": [
            "parse_hybrid_response",
            "parse_hybrid_response",
            "__init__",
            "_load_config",
            "_validate_config",
            "_find_chat_input",
            "_find_send_button",
            "_find_login_button",
            "_save_requests",
            "_save_health",
            "_is_logged_in"
        ],
        "classes": {
            "BridgeRequest": {
                "methods": [],
                "docstring": "A request to be processed by the bridge.",
                "base_classes": []
            },
            "BridgeHealth": {
                "methods": [],
                "docstring": "Health status information.",
                "base_classes": []
            },
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses hybrid responses containing both text and structured data.",
                "base_classes": []
            },
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_validate_config",
                    "_find_chat_input",
                    "_find_send_button",
                    "_find_login_button",
                    "_save_requests",
                    "_save_health",
                    "_is_logged_in"
                ],
                "docstring": "Main bridge service for ChatGPT integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dreamos\\start_dreamos.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_status_file"
        ],
        "classes": {
            "DreamOSLauncher": {
                "methods": [
                    "__init__",
                    "_init_status_file"
                ],
                "docstring": "Launches and manages Dream.OS components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "dreamos\\apps\\crime_report_generator\\main.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "collect_data",
            "process_data",
            "generate_visualizations",
            "generate_report",
            "run_pipeline",
            "run_range"
        ],
        "classes": {
            "CrimeReportGenerator": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "process_data",
                    "generate_visualizations",
                    "generate_report",
                    "run_pipeline",
                    "run_range"
                ],
                "docstring": "Main class for orchestrating the crime report generation pipeline.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\apps\\crime_report_generator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\agents\\report_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_data",
            "generate_report",
            "schedule_report",
            "distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportAgent": {
                "methods": [
                    "__init__",
                    "process_data",
                    "generate_report",
                    "schedule_report",
                    "distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Agent for managing crime report generation and distribution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\apps\\crime_report_generator\\data_sources\\austin_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "AustinScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Austin Police Department crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\apps\\crime_report_generator\\data_sources\\houston_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "HoustonScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Houston Police Department crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\apps\\crime_report_generator\\data_sources\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\processors\\aggregator.py": {
        "language": ".py",
        "functions": [
            "aggregate_by_type",
            "aggregate_by_district",
            "top_locations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\apps\\crime_report_generator\\processors\\categorizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "categorize_offense",
            "categorize_description",
            "categorize_dataframe",
            "_categorize_row",
            "categorize_crime"
        ],
        "classes": {
            "CrimeCategory": {
                "methods": [],
                "docstring": "Enumeration of crime categories.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CrimeCategorizer": {
                "methods": [
                    "__init__",
                    "categorize_offense",
                    "categorize_description",
                    "categorize_dataframe",
                    "_categorize_row",
                    "categorize_crime"
                ],
                "docstring": "Class for categorizing crime data into standardized categories.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\apps\\crime_report_generator\\processors\\cleaner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clean",
            "_clean_date",
            "_clean_crime_type",
            "_clean_count",
            "_clean_location",
            "_clean_status"
        ],
        "classes": {
            "DataCleaner": {
                "methods": [
                    "__init__",
                    "clean",
                    "_clean_date",
                    "_clean_crime_type",
                    "_clean_count",
                    "_clean_location",
                    "_clean_status"
                ],
                "docstring": "Class for cleaning and standardizing crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\apps\\crime_report_generator\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\reports\\arcgis_fetcher.py": {
        "language": ".py",
        "functions": [
            "get_bounding_box",
            "fetch_montgomery_arcgis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\apps\\crime_report_generator\\reports\\crimegrade_scraper.py": {
        "language": ".py",
        "functions": [
            "fetch_crimegrade_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\apps\\crime_report_generator\\reports\\crime_report_pipeline.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "generate_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\apps\\crime_report_generator\\reports\\report_formatter.py": {
        "language": ".py",
        "functions": [
            "format_markdown_report",
            "format_discord_report",
            "format_instagram_report",
            "format_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\apps\\crime_report_generator\\reports\\report_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_markdown_report",
            "generate_html_report",
            "generate_pdf_report",
            "generate_json_report",
            "generate_summary_statistics",
            "_validate_dataframe"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "generate_markdown_report",
                    "generate_html_report",
                    "generate_pdf_report",
                    "generate_json_report",
                    "generate_summary_statistics",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime reports in various formats.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\apps\\crime_report_generator\\reports\\zip_mapper.py": {
        "language": ".py",
        "functions": [
            "get_zip_info",
            "format_location",
            "get_zip_details"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\apps\\crime_report_generator\\reports\\summarizer.py": {
        "language": ".py",
        "functions": [
            "normalize_crime_types",
            "summarize_arcgis_data",
            "summarize_crimegrade_data",
            "compare_sources"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\apps\\crime_report_generator\\reports\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\scheduler\\report_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_report",
            "generate_report",
            "generate_and_distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportScheduler": {
                "methods": [
                    "__init__",
                    "schedule_report",
                    "generate_report",
                    "generate_and_distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Class for scheduling and automating crime report generation and distribution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\apps\\crime_report_generator\\scheduler\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\templates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\crime_report_generator\\visualizations\\crime_visualizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_category_pie_chart",
            "create_trend_line_chart",
            "create_location_bar_chart",
            "create_category_trend_chart",
            "save_visualization",
            "_validate_dataframe"
        ],
        "classes": {
            "CrimeVisualizer": {
                "methods": [
                    "__init__",
                    "create_category_pie_chart",
                    "create_trend_line_chart",
                    "create_location_bar_chart",
                    "create_category_trend_chart",
                    "save_visualization",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime data visualizations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\apps\\crime_report_generator\\visualizations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\discord_bot\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages",
            "cleanup"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dreamos\\apps\\discord_bot\\devlog_commands.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DevlogCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Commands for managing agent development logs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\apps\\discord_bot\\bot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "setup_metrics",
            "get_help_embed"
        ],
        "classes": {
            "DreamOSBot": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "setup_metrics",
                    "get_help_embed"
                ],
                "docstring": "Dream.OS Discord bot implementation.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\apps\\discord_bot\\commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "cog_unload"
        ],
        "classes": {
            "AgentCommands": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "cog_unload"
                ],
                "docstring": "Commands for managing agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\apps\\discord_bot\\log_utils.py": {
        "language": ".py",
        "functions": [
            "get_logs_embed"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\apps\\discord_bot\\help_menu.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_pages",
            "setup_buttons",
            "__init__"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__",
                    "setup_pages",
                    "setup_buttons"
                ],
                "docstring": "Interactive help menu for Discord bot commands.",
                "base_classes": [
                    "ui.View"
                ]
            },
            "CommandSearchModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for searching commands.",
                "base_classes": [
                    "ui.Modal"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\apps\\discord_bot\\tts.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TTSManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages text-to-speech generation using multiple engines.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\apps\\discord_bot\\notifier.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_webhooks",
            "_create_embed"
        ],
        "classes": {
            "DiscordNotifier": {
                "methods": [
                    "__init__",
                    "_load_webhooks",
                    "_create_embed"
                ],
                "docstring": "Unified Discord notification system.\n\nThis class provides a centralized way to send notifications to Discord\nchannels and webhooks, with consistent error handling, logging, and\nperformance monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\apps\\discord_bot\\voicebot.py": {
        "language": ".py",
        "functions": [
            "run_voicebot",
            "__init__",
            "on_created",
            "__init__",
            "_after_playback"
        ],
        "classes": {
            "VoiceQueueHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file system events for the voice queue directory.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "VoiceBot": {
                "methods": [
                    "__init__",
                    "_after_playback"
                ],
                "docstring": "Voice-enabled Discord bot for swarm audio output.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\apps\\discord_bot\\voice_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\apps\\discord_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\discord_bot\\cogs\\basic.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BasicCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Basic command handlers for the Discord bot.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\apps\\discord_bot\\cogs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\discord_bot\\commands\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_cooldown",
            "get_help_text",
            "__init__",
            "register",
            "get_command",
            "get_commands_by_category"
        ],
        "classes": {
            "CommandCategory": {
                "methods": [],
                "docstring": "Categories for organizing commands.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CommandContext": {
                "methods": [],
                "docstring": "Context for command execution.",
                "base_classes": []
            },
            "CommandResult": {
                "methods": [],
                "docstring": "Result of command execution.",
                "base_classes": []
            },
            "BaseCommand": {
                "methods": [
                    "__init__",
                    "check_cooldown",
                    "get_help_text"
                ],
                "docstring": "Base class for all commands.",
                "base_classes": [
                    "ABC"
                ]
            },
            "CommandRegistry": {
                "methods": [
                    "__init__",
                    "register",
                    "get_command",
                    "get_commands_by_category"
                ],
                "docstring": "Registry for managing commands.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\apps\\discord_bot\\commands\\system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "SystemStatusCommand": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Command to show system status.",
                "base_classes": [
                    "BaseCommand"
                ]
            },
            "RestartCommand": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Command to restart system components.",
                "base_classes": [
                    "BaseCommand"
                ]
            },
            "MetricsCommand": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Command to show detailed system metrics.",
                "base_classes": [
                    "BaseCommand"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\apps\\life_tether\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\options_bot\\broker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_history",
            "get_option_chain",
            "send_order",
            "get_equity"
        ],
        "classes": {
            "Broker": {
                "methods": [
                    "__init__",
                    "get_history",
                    "get_option_chain",
                    "send_order",
                    "get_equity"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\apps\\options_bot\\data_loader.py": {
        "language": ".py",
        "functions": [
            "fetch_history",
            "fetch_option_chain"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\apps\\options_bot\\monte_carlo.py": {
        "language": ".py",
        "functions": [
            "simulate_prices",
            "pop_above",
            "batch_pop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\apps\\options_bot\\run_bot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\apps\\options_bot\\strategy_core.py": {
        "language": ".py",
        "functions": [
            "tech_signal"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\apps\\options_bot\\trade_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_cycle",
            "_try_execute",
            "_size_position",
            "_log_trade"
        ],
        "classes": {
            "TradeManager": {
                "methods": [
                    "__init__",
                    "run_cycle",
                    "_try_execute",
                    "_size_position",
                    "_log_trade"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\apps\\options_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\core\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_validate_config",
            "_find_chat_input",
            "_find_send_button",
            "_find_login_button",
            "_save_requests",
            "_save_health",
            "_is_logged_in"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_validate_config",
                    "_find_chat_input",
                    "_find_send_button",
                    "_find_login_button",
                    "_save_requests",
                    "_save_health",
                    "_is_logged_in"
                ],
                "docstring": "Main bridge service for ChatGPT integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\bridge\\core\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\models\\health.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "BridgeHealth": {
                "methods": [],
                "docstring": "Health status information.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\models\\request.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "BridgeRequest": {
                "methods": [],
                "docstring": "A request to be processed by the bridge.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge\\utils\\response_handler.py": {
        "language": ".py",
        "functions": [
            "parse_hybrid_response",
            "parse_hybrid_response"
        ],
        "classes": {
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses hybrid responses containing both text and structured data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "dreamos\\bridge\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge_clients\\cursor\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseBridge"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\bridge_clients\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "send_command",
            "broadcast_command",
            "__init__",
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages",
            "cleanup"
        ],
        "classes": {
            "AgentInterface": {
                "methods": [
                    "__init__",
                    "send_command",
                    "broadcast_command",
                    "get_agent_status",
                    "clear_agent_messages",
                    "cleanup"
                ],
                "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages an agent's processing loop.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\cli.py": {
        "language": ".py",
        "functions": [
            "direct_send_message",
            "bus_send_message",
            "parse_args",
            "validate_priority",
            "load_coordinates",
            "cli_main",
            "send_message",
            "get_status",
            "clear_messages",
            "shutdown",
            "__init__",
            "send_message",
            "get_status",
            "clear_messages",
            "shutdown"
        ],
        "classes": {
            "MessageCLI": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_status",
                    "clear_messages",
                    "shutdown"
                ],
                "docstring": "Command-line interface for agent communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_dir",
            "log_dir"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "log_dir",
                    "log_dir"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "move_to",
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "press_ctrl_enter",
            "press_ctrl_n",
            "press_ctrl_v",
            "press_ctrl_a"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "press_ctrl_enter",
                    "press_ctrl_n",
                    "press_ctrl_v",
                    "press_ctrl_a"
                ],
                "docstring": "Controls cursor movement and input for agent interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\core\\log_manager.py": {
        "language": ".py",
        "functions": [
            "record_metric",
            "__init__",
            "_setup_logging",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics"
        ],
        "classes": {
            "LogManager": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics"
                ],
                "docstring": "Manages logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "dreamos\\core\\message.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\menu.py": {
        "language": ".py",
        "functions": [
            "_init_theme",
            "main",
            "__init__",
            "_init_theme",
            "get_font",
            "get_color",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "add_item",
            "clear",
            "__init__",
            "add_button",
            "add_header",
            "add_footer",
            "add_separator",
            "build",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MenuStyle": {
                "methods": [],
                "docstring": "Menu styles.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MenuItemType": {
                "methods": [],
                "docstring": "Menu item types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MenuItem": {
                "methods": [],
                "docstring": "Menu item.",
                "base_classes": []
            },
            "MenuTheme": {
                "methods": [
                    "__init__",
                    "_init_theme",
                    "get_font",
                    "get_color"
                ],
                "docstring": "Menu theme.",
                "base_classes": []
            },
            "MenuButton": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu button.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MenuHeader": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu header.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MenuFooter": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu footer.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MenuSignals": {
                "methods": [],
                "docstring": "Menu signals.",
                "base_classes": [
                    "QObject"
                ]
            },
            "Menu": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "add_item",
                    "clear"
                ],
                "docstring": "Menu widget.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "add_button",
                    "add_header",
                    "add_footer",
                    "add_separator",
                    "build"
                ],
                "docstring": "Menu builder.",
                "base_classes": []
            },
            "QWidget": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QVBoxLayout": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QFrame": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Qt": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "pyqtSignal": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QObject": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QFont": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QColor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "AlignmentFlag": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 58
    },
    "dreamos\\core\\persistent_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_from_disk",
            "_save_to_disk",
            "put",
            "get",
            "qsize",
            "empty",
            "full",
            "clear",
            "get_all"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_load_from_disk",
                    "_save_to_disk",
                    "put",
                    "get",
                    "qsize",
                    "empty",
                    "full",
                    "clear",
                    "get_all"
                ],
                "docstring": "A queue that persists its contents to disk.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\response_collector_new.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\start_dreamos.py": {
        "language": ".py",
        "functions": [
            "_init_status_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\system_init.py": {
        "language": ".py",
        "functions": [
            "initialize_core_systems",
            "main",
            "__init__",
            "initialize_core_systems",
            "establish_communication_channels",
            "begin_monitoring",
            "report_status"
        ],
        "classes": {
            "SystemInitializer": {
                "methods": [
                    "__init__",
                    "initialize_core_systems",
                    "establish_communication_channels",
                    "begin_monitoring",
                    "report_status"
                ],
                "docstring": "Handles system initialization and communication setup.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\agent\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\control\\agent_cellphone.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "get_messages",
            "send_notification",
            "get_notifications",
            "_save_message",
            "_save_notification"
        ],
        "classes": {
            "AgentCellphone": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_messages",
                    "send_notification",
                    "get_notifications",
                    "_save_message",
                    "_save_notification"
                ],
                "docstring": "Handles agent communication and messaging.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\agent\\control\\agent_control.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_agent",
            "stop_agent",
            "get_active_agents",
            "get_agent_status"
        ],
        "classes": {
            "AgentControl": {
                "methods": [
                    "__init__",
                    "start_agent",
                    "stop_agent",
                    "get_active_agents",
                    "get_agent_status"
                ],
                "docstring": "Base class for agent control functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\agent\\control\\agent_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_operation",
            "get_operation_history",
            "clear_operation_history",
            "_record_operation",
            "list_agents",
            "cleanup"
        ],
        "classes": {
            "AgentOperations": {
                "methods": [
                    "__init__",
                    "execute_operation",
                    "get_operation_history",
                    "clear_operation_history",
                    "_record_operation",
                    "list_agents",
                    "cleanup"
                ],
                "docstring": "Core agent operations handler.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\agent\\control\\agent_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_command_handlers"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "_setup_command_handlers"
                ],
                "docstring": "Agent control and lifecycle management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\agent\\control\\agent_restarter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_restart_history",
            "clear_restart_history"
        ],
        "classes": {
            "AgentRestarter": {
                "methods": [
                    "__init__",
                    "get_restart_history",
                    "clear_restart_history"
                ],
                "docstring": "Agent restart and recovery management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent\\control\\agent_selection_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "show",
            "set_filter",
            "clear_filter",
            "_get_available_agents",
            "_apply_filters",
            "_show_dialog"
        ],
        "classes": {
            "AgentSelectionDialog": {
                "methods": [
                    "__init__",
                    "show",
                    "set_filter",
                    "clear_filter",
                    "_get_available_agents",
                    "_apply_filters",
                    "_show_dialog"
                ],
                "docstring": "UI dialog for agent selection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\agent\\control\\agent_status.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update",
            "to_dict",
            "from_dict",
            "__init__",
            "update_status",
            "get_current_status",
            "get_status_history",
            "run_health_check",
            "get_health_history"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": "Enum representing possible agent states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AgentStatusInfo": {
                "methods": [
                    "__init__",
                    "update",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Class for tracking detailed agent status information.",
                "base_classes": []
            },
            "AgentStatusTracker": {
                "methods": [
                    "__init__",
                    "update_status",
                    "get_current_status",
                    "get_status_history",
                    "run_health_check",
                    "get_health_history"
                ],
                "docstring": "Agent status tracking and monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent\\control\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_outbox",
            "_save_outbox"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "_load_outbox",
                    "_save_outbox"
                ],
                "docstring": "Handles outbox operations for bridge communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent\\control\\captain.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Captain": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Central coordinator for agents.\n\nThe Captain assigns tasks and routes messages using the\n:class:`MessageSystem`. It also keeps track of tasks via\n:class:`TaskManager`.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\control\\coordinate_calibrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_coordinates",
            "save_coordinates",
            "get_coordinates",
            "update_coordinates",
            "calibrate_agent"
        ],
        "classes": {
            "CoordinateCalibrator": {
                "methods": [
                    "__init__",
                    "load_coordinates",
                    "save_coordinates",
                    "get_coordinates",
                    "update_coordinates",
                    "calibrate_agent"
                ],
                "docstring": "Manages UI coordinate calibration for agent interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent\\control\\controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_menu_builder",
            "_handle_menu_action",
            "_handle_list_agents",
            "cleanup",
            "run",
            "list_agents",
            "onboard_agent",
            "resume_agent",
            "verify_agent",
            "repair_agent",
            "backup_agent",
            "restore_agent",
            "send_message"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "set_menu_builder",
                    "_handle_menu_action",
                    "_handle_list_agents",
                    "cleanup",
                    "run",
                    "list_agents",
                    "onboard_agent",
                    "resume_agent",
                    "verify_agent",
                    "repair_agent",
                    "backup_agent",
                    "restore_agent",
                    "send_message"
                ],
                "docstring": "Main controller for agent operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\agent\\control\\coordinate_transformer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_monitors",
            "transform_coordinates",
            "transform_coordinate_dict"
        ],
        "classes": {
            "CoordinateTransformer": {
                "methods": [
                    "__init__",
                    "_get_monitors",
                    "transform_coordinates",
                    "transform_coordinate_dict"
                ],
                "docstring": "Transforms coordinates between monitor and screen space.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent\\control\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "get_position",
            "wait",
            "move_to_agent",
            "click_input_box",
            "click_copy_button"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "get_position",
                    "wait",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button"
                ],
                "docstring": "Controls cursor movement and interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent\\control\\devlog_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_event",
            "get_log",
            "clear_log",
            "send_embed",
            "shutdown"
        ],
        "classes": {
            "DevLogManager": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_log",
                    "clear_log",
                    "send_embed",
                    "shutdown"
                ],
                "docstring": "Manages development logs for agent control.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent\\control\\main.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\agent\\control\\high_priority_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "HighPriorityDispatcher": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles high-priority message routing and prompt bouncing between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\control\\menu_builder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_controller",
            "_handle_menu_action",
            "cleanup",
            "_build_menu",
            "_handle_list_agents",
            "_handle_agent_selection",
            "display_menu",
            "connect_signals",
            "disconnect_signals"
        ],
        "classes": {
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "set_controller",
                    "_handle_menu_action",
                    "cleanup",
                    "_build_menu",
                    "_handle_list_agents",
                    "_handle_agent_selection",
                    "display_menu",
                    "connect_signals",
                    "disconnect_signals"
                ],
                "docstring": "Builds the agent control menu.",
                "base_classes": [
                    "BaseMenuBuilder"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent\\control\\response_capture.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "capture_response",
            "wait_for_copy_button"
        ],
        "classes": {
            "ResponseCapture": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "capture_response",
                    "wait_for_copy_button"
                ],
                "docstring": "Handles capturing and processing UI responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent\\control\\periodic_restart.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_agent_management",
            "stop_agent_management",
            "__init__",
            "start_resume_management",
            "stop_resume_management"
        ],
        "classes": {
            "AgentManager": {
                "methods": [
                    "__init__",
                    "start_agent_management",
                    "stop_agent_management"
                ],
                "docstring": "Manages agent periodic restarts.",
                "base_classes": []
            },
            "AgentResumeManager": {
                "methods": [
                    "__init__",
                    "start_resume_management",
                    "stop_resume_management"
                ],
                "docstring": "Manages agent resumption after restarts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent\\control\\screenshot_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture",
            "get_screenshots",
            "get_latest_screenshot",
            "compare_screenshots",
            "cleanup"
        ],
        "classes": {
            "ScreenshotLogger": {
                "methods": [
                    "__init__",
                    "capture",
                    "get_screenshots",
                    "get_latest_screenshot",
                    "compare_screenshots",
                    "cleanup"
                ],
                "docstring": "Tracks and manages debug screenshots for UI automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent\\control\\timing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_focus",
            "wait_click",
            "wait_typing",
            "wait_capture",
            "wait_screenshot",
            "wait_move",
            "wait_scroll",
            "wait_load",
            "wait_refresh"
        ],
        "classes": {
            "Timing": {
                "methods": [
                    "__init__",
                    "wait_focus",
                    "wait_click",
                    "wait_typing",
                    "wait_capture",
                    "wait_screenshot",
                    "wait_move",
                    "wait_scroll",
                    "wait_load",
                    "wait_refresh"
                ],
                "docstring": "Minimal Timing stub for UI/automation flow compatibility.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent\\control\\system_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__init__",
            "_load_message_history",
            "_save_message_history",
            "_connect_components",
            "_needs_captain_response"
        ],
        "classes": {
            "MessageRecord": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Record of a message between agents.",
                "base_classes": []
            },
            "SystemOrchestrator": {
                "methods": [
                    "__init__",
                    "_load_message_history",
                    "_save_message_history",
                    "_connect_components",
                    "_needs_captain_response"
                ],
                "docstring": "Orchestrates all Dream.OS components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\agent\\control\\task_manager.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "validate",
            "__init__",
            "_load_tasks",
            "_save_tasks",
            "create_task",
            "get_task",
            "update_task_status",
            "get_agent_tasks",
            "get_blocked_tasks",
            "get_high_priority_tasks",
            "get_task_context",
            "generate_task_summary",
            "cleanup_completed_tasks"
        ],
        "classes": {
            "Task": {
                "methods": [
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Task structure for agent operations.",
                "base_classes": []
            },
            "TaskManager": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_save_tasks",
                    "create_task",
                    "get_task",
                    "update_task_status",
                    "get_agent_tasks",
                    "get_blocked_tasks",
                    "get_high_priority_tasks",
                    "get_task_context",
                    "generate_task_summary",
                    "cleanup_completed_tasks"
                ],
                "docstring": "Manages task distribution and tracking between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\core\\agent\\control\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\control\\ui_automation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_screen_resolution",
            "_is_coordinate_valid",
            "_move_to_coordinate",
            "_click_at_coordinate",
            "_type_text",
            "_clear_text",
            "_delete_text",
            "_wait_for_delay",
            "_capture_region",
            "_get_text_from_region",
            "_handle_interrupt",
            "_cleanup_calibration",
            "_validate_coordinates",
            "_has_duplicate_coordinates",
            "_check_region_overlap",
            "get_agent_coordinates",
            "get_response_region",
            "_load_config",
            "_save_coordinates",
            "_setup_signal_handlers",
            "_calibration_context",
            "_calibration_loop",
            "start_calibration",
            "_get_screenshot_logger",
            "_validate_window_title",
            "_capture_debug_screenshot",
            "_transform_coordinates",
            "_transform_coordinate_dict",
            "_load_coordinates",
            "_get_default_coordinates",
            "_click_focus",
            "send_message",
            "_load_onboarding_prompt",
            "perform_onboarding_sequence",
            "_split_message",
            "cleanup",
            "move_to",
            "click",
            "type_text",
            "press_key",
            "hotkey",
            "screenshot",
            "_get_response",
            "move_to_agent",
            "click_input_box",
            "click_copy_button",
            "_has_out_of_bounds_coordinates"
        ],
        "classes": {
            "UIAutomation": {
                "methods": [
                    "__init__",
                    "_get_screen_resolution",
                    "_is_coordinate_valid",
                    "_move_to_coordinate",
                    "_click_at_coordinate",
                    "_type_text",
                    "_clear_text",
                    "_delete_text",
                    "_wait_for_delay",
                    "_capture_region",
                    "_get_text_from_region",
                    "_handle_interrupt",
                    "_cleanup_calibration",
                    "_validate_coordinates",
                    "_has_duplicate_coordinates",
                    "_check_region_overlap",
                    "get_agent_coordinates",
                    "get_response_region",
                    "_load_config",
                    "_save_coordinates",
                    "_setup_signal_handlers",
                    "_calibration_context",
                    "_calibration_loop",
                    "start_calibration",
                    "_get_screenshot_logger",
                    "_validate_window_title",
                    "_capture_debug_screenshot",
                    "_transform_coordinates",
                    "_transform_coordinate_dict",
                    "_load_coordinates",
                    "_get_default_coordinates",
                    "_click_focus",
                    "send_message",
                    "_load_onboarding_prompt",
                    "perform_onboarding_sequence",
                    "_split_message",
                    "cleanup",
                    "move_to",
                    "click",
                    "type_text",
                    "press_key",
                    "hotkey",
                    "screenshot",
                    "_get_response",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button",
                    "_has_out_of_bounds_coordinates"
                ],
                "docstring": "UI automation class for handling screen interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 96
    },
    "dreamos\\core\\agent\\control\\visual_watchdog.py": {
        "language": ".py",
        "functions": [
            "hash_screen_region",
            "has_region_stabilized"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\control\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\control\\controllers\\agent_controller.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Controller for managing individual agents.",
                "base_classes": [
                    "BaseController"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\control\\controllers\\base_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_initialized",
            "is_running",
            "get_config",
            "set_config"
        ],
        "classes": {
            "BaseController": {
                "methods": [
                    "__init__",
                    "is_initialized",
                    "is_running",
                    "get_config",
                    "set_config"
                ],
                "docstring": "Base class for all Dream.OS controllers.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\agent\\control\\controllers\\system_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_bridge_metrics"
        ],
        "classes": {
            "SystemController": {
                "methods": [
                    "__init__",
                    "get_bridge_metrics"
                ],
                "docstring": "System-wide controller for managing agents and their interactions.",
                "base_classes": [
                    "BaseController"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\agent\\control\\controllers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\control\\onboarding\\agent_onboarder.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentOnboarder": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles individual agent onboarding.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\control\\onboarding\\captain_onboarder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_agent_id",
            "_get_network_config",
            "get_activation_history"
        ],
        "classes": {
            "CaptainOnboarder": {
                "methods": [
                    "__init__",
                    "_validate_agent_id",
                    "_get_network_config",
                    "get_activation_history"
                ],
                "docstring": "Handles activation and onboarding of multiple agents by a captain.\n\nSafety Features:\n- skip_self: Prevents the captain from onboarding itself\n- duplicate_check: Prevents re-onboarding already active agents\n- activation_tracking: Maintains record of which agents were activated\n- agent_validation: Ensures valid agent IDs and network configuration",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent\\control\\onboarding\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\control\\onboarding\\message_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_get_default_config",
            "_get_template",
            "_generate_message_id",
            "create_network_activation_message",
            "create_individual_activation_message",
            "create_broadcast_message",
            "save_message_to_inbox",
            "get_message_history"
        ],
        "classes": {
            "MessageManager": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_get_default_config",
                    "_get_template",
                    "_generate_message_id",
                    "create_network_activation_message",
                    "create_individual_activation_message",
                    "create_broadcast_message",
                    "save_message_to_inbox",
                    "get_message_history"
                ],
                "docstring": "Manages onboarding messages for agents and network activation.\n\nFeatures:\n- Jinja2 templating for dynamic messages\n- Multiple config sources (JSON/YAML/embedded)\n- Message idempotence and tracking\n- Broadcast support for network-wide announcements",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent\\control\\recovery\\agent_restarter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_can_restart",
            "callback"
        ],
        "classes": {
            "AgentRestarter": {
                "methods": [
                    "__init__",
                    "_can_restart"
                ],
                "docstring": "Handles agent recovery and restart operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "dreamos\\core\\agent\\control\\recovery\\heartbeat_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_can_restart",
            "get_failed_agents"
        ],
        "classes": {
            "HeartbeatMonitor": {
                "methods": [
                    "__init__",
                    "_can_restart",
                    "get_failed_agents"
                ],
                "docstring": "Monitors agent heartbeats and manages recovery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent\\control\\recovery\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_config",
            "save_config",
            "get_config",
            "validate"
        ],
        "classes": {
            "RecoveryConfigManager": {
                "methods": [
                    "__init__",
                    "load_config",
                    "save_config",
                    "get_config",
                    "validate"
                ],
                "docstring": "Manages recovery configuration settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\agent\\control\\recovery\\window_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_cursor_window",
            "check_window_idle",
            "activate_window",
            "update_activity",
            "callback"
        ],
        "classes": {
            "WindowManager": {
                "methods": [
                    "__init__",
                    "find_cursor_window",
                    "check_window_idle",
                    "activate_window",
                    "update_activity"
                ],
                "docstring": "Manages window operations for agent recovery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\agent\\control\\recovery\\recovery_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_recovery_status"
        ],
        "classes": {
            "RecoveryManager": {
                "methods": [
                    "__init__",
                    "get_recovery_status"
                ],
                "docstring": "Manages agent recovery operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\agent\\control\\recovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\lifecycle\\agent_onboarder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "onboard",
            "__init__",
            "resume"
        ],
        "classes": {
            "AgentOnboarder": {
                "methods": [
                    "__init__",
                    "onboard"
                ],
                "docstring": "No-op placeholder used during transition.",
                "base_classes": []
            },
            "AgentManager": {
                "methods": [
                    "__init__",
                    "resume"
                ],
                "docstring": "Minimal stand-in that fulfils expected API surface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent\\lifecycle\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentResumeManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Placeholder for legacy resume manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\messaging\\cell_phone.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "get_agent_status"
        ],
        "classes": {
            "CellPhone": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_agent_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent\\messaging\\common.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\messaging\\message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\shared\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_coordinates",
            "save_coordinates"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "get_coordinates",
                    "save_coordinates"
                ],
                "docstring": "Minimal placeholder for legacy coordinate management calls.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent\\shared\\coordinate_utils.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "save_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent\\shared\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent\\state\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {
            "_Stub": {
                "methods": [
                    "__getattr__"
                ],
                "docstring": "Base class for all placeholder shims.",
                "base_classes": [
                    "SimpleNamespace"
                ]
            },
            "AgentState": {
                "methods": [],
                "docstring": "Placeholder for the real `AgentState` model.",
                "base_classes": [
                    "_Stub"
                ]
            },
            "AgentStateManager": {
                "methods": [],
                "docstring": "Placeholder for the real `AgentStateManager`.",
                "base_classes": [
                    "_Stub"
                ]
            },
            "QuantumAgentResumer": {
                "methods": [],
                "docstring": "Placeholder for the real `QuantumAgentResumer`.",
                "base_classes": [
                    "_Stub"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\agent_cellphone.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentCellphone": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Minimal placeholder for the real AgentCellphone implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent_control\\__init__.py": {
        "language": ".py",
        "functions": [
            "_load_target_pkg",
            "__getattr__",
            "__dir__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\core\\ai\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "format_message",
            "format_system_message",
            "format_user_message",
            "format_assistant_message"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "format_message",
                    "format_system_message",
                    "format_user_message",
                    "format_assistant_message"
                ],
                "docstring": "Simplified ChatGPT integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\ai\\dreamscribe.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory_corpus",
            "_load_threads",
            "_load_insight_patterns",
            "_save_memory_corpus",
            "_save_thread",
            "_save_insight_patterns",
            "_extract_insights",
            "_find_connections",
            "_update_narratives",
            "process_with_gpt",
            "ingest_devlog",
            "get_memory",
            "get_thread",
            "get_system_insights"
        ],
        "classes": {
            "MemoryFragment": {
                "methods": [],
                "docstring": "A single memory fragment from a devlog or system event.",
                "base_classes": []
            },
            "NarrativeThread": {
                "methods": [],
                "docstring": "A connected sequence of memories forming a coherent story.",
                "base_classes": []
            },
            "Dreamscribe": {
                "methods": [
                    "__init__",
                    "_load_memory_corpus",
                    "_load_threads",
                    "_load_insight_patterns",
                    "_save_memory_corpus",
                    "_save_thread",
                    "_save_insight_patterns",
                    "_extract_insights",
                    "_find_connections",
                    "_update_narratives",
                    "process_with_gpt",
                    "ingest_devlog",
                    "get_memory",
                    "get_thread",
                    "get_system_insights"
                ],
                "docstring": "The core memory and narrative system for Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\core\\ai\\llm_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_history"
        ],
        "classes": {
            "LLMAgent": {
                "methods": [
                    "__init__",
                    "get_history"
                ],
                "docstring": "Agent that integrates ChatGPT with the messaging system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\ai\\memory_querier.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_recent_memory",
            "summarize_topic",
            "_calculate_memory_similarity",
            "find_similar_threads",
            "get_agent_insights",
            "get_task_history"
        ],
        "classes": {
            "MemoryQuerier": {
                "methods": [
                    "__init__",
                    "get_recent_memory",
                    "summarize_topic",
                    "_calculate_memory_similarity",
                    "find_similar_threads",
                    "get_agent_insights",
                    "get_task_history"
                ],
                "docstring": "Provides query interface for agent memory corpus.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\ai\\gpt_router\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_conversation"
        ],
        "classes": {
            "Engine": {
                "methods": [
                    "__init__",
                    "process_conversation"
                ],
                "docstring": "Orchestrates prompt delivery and response collection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\ai\\gpt_router\\router.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_profile",
            "decide_prompt"
        ],
        "classes": {
            "Router": {
                "methods": [
                    "__init__",
                    "_load_profile",
                    "decide_prompt"
                ],
                "docstring": "Decide which prompt and GPT profile to use based on context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\ai\\gpt_router\\validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_response",
            "validate_code",
            "extract_json"
        ],
        "classes": {
            "CodexValidator": {
                "methods": [
                    "__init__",
                    "validate_response",
                    "validate_code",
                    "extract_json"
                ],
                "docstring": "Validates code and responses from GPT models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\ai\\gpt_router\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\ai\\gpt_router\\profiles\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\auth\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining"
        ],
        "classes": {
            "ExpirableMixin": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Mixin providing expiration-related functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\auth\\login_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "authenticate",
            "validate_token",
            "refresh_token",
            "create_session",
            "get_session",
            "invalidate_session"
        ],
        "classes": {
            "AuthConfig": {
                "methods": [],
                "docstring": "Configuration for authentication.",
                "base_classes": []
            },
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "authenticate",
                    "validate_token",
                    "refresh_token",
                    "create_session",
                    "get_session",
                    "invalidate_session"
                ],
                "docstring": "Manages authentication and authorization.",
                "base_classes": [
                    "AbstractAuthInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Session class for managing user sessions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "is_valid",
            "time_remaining",
            "__init__",
            "_load_secret_key",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": []
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "_load_secret_key",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\automation\\prompt_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "send_prompt",
            "_type_prompt",
            "_inject_prompt",
            "wait_for_completion",
            "_is_response_complete",
            "get_conversation_history",
            "clear_conversation",
            "cleanup"
        ],
        "classes": {
            "PromptEngine": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "send_prompt",
                    "_type_prompt",
                    "_inject_prompt",
                    "wait_for_completion",
                    "_is_response_complete",
                    "get_conversation_history",
                    "clear_conversation",
                    "cleanup"
                ],
                "docstring": "Handles direct interaction with ChatGPT interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\browser\\browser_control.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "navigate_to",
            "wait_for_stable_element",
            "wait_for_element",
            "send_keys",
            "click",
            "get_text"
        ],
        "classes": {
            "BrowserControl": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate_to",
                    "wait_for_stable_element",
                    "wait_for_element",
                    "send_keys",
                    "click",
                    "get_text"
                ],
                "docstring": "Controls browser automation for Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\automation\\chat\\chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_cycle_config",
            "_should_stop_cycle",
            "_generate_prompt",
            "get_status",
            "cleanup"
        ],
        "classes": {
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "_load_cycle_config",
                    "_should_stop_cycle",
                    "_generate_prompt",
                    "get_status",
                    "cleanup"
                ],
                "docstring": "Orchestrates the scraping process and manages chat cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\automation\\chat\\chat_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "start",
            "stop",
            "verify_login",
            "get_chat_titles",
            "execute_prompt",
            "_update_memory",
            "get_chat_history",
            "clear_chat_history",
            "cleanup"
        ],
        "classes": {
            "ChatManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "start",
                    "stop",
                    "verify_login",
                    "get_chat_titles",
                    "execute_prompt",
                    "_update_memory",
                    "get_chat_history",
                    "clear_chat_history",
                    "cleanup"
                ],
                "docstring": "Manages ChatGPT conversations and memory.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\core\\automation\\chat\\chat_scraper_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_exclusions",
            "start",
            "stop",
            "validate_login",
            "get_all_chats",
            "wait_for_stable_response",
            "send_prompt",
            "cleanup"
        ],
        "classes": {
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "_load_exclusions",
                    "start",
                    "stop",
                    "validate_login",
                    "get_all_chats",
                    "wait_for_stable_response",
                    "send_prompt",
                    "cleanup"
                ],
                "docstring": "Core service for scraping ChatGPT conversations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\automation\\ui\\agent_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_add_placeholder_data",
            "refresh_agents",
            "_show_devlog",
            "_force_resume",
            "_onboard_agent",
            "_on_refresh",
            "closeEvent",
            "update_agent_status"
        ],
        "classes": {
            "AgentMonitor": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_add_placeholder_data",
                    "refresh_agents",
                    "_show_devlog",
                    "_force_resume",
                    "_onboard_agent",
                    "_on_refresh",
                    "closeEvent",
                    "update_agent_status"
                ],
                "docstring": "Widget for monitoring agent statuses.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\automation\\ui\\agent_dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "_log_message"
        ],
        "classes": {
            "AgentDashboard": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "_log_message"
                ],
                "docstring": "Main dashboard window for agent monitoring and control.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\automation\\ui\\agent_status_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "update_status"
        ],
        "classes": {
            "AgentStatusPanel": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_status"
                ],
                "docstring": "Panel for displaying agent status information.",
                "base_classes": [
                    "QFrame"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\automation\\ui\\log_console.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "log"
        ],
        "classes": {
            "LogConsole": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "log"
                ],
                "docstring": "Console widget for displaying log messages.",
                "base_classes": [
                    "QFrame"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\automation\\ui\\log_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "refresh_logs",
            "clear_logs",
            "_show_details",
            "closeEvent"
        ],
        "classes": {
            "LogMonitor": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "refresh_logs",
                    "clear_logs",
                    "_show_details",
                    "closeEvent"
                ],
                "docstring": "GUI component for monitoring and displaying logs.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\automation\\ui\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_setup_menu"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_setup_menu"
                ],
                "docstring": "Main application window.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\automation\\ui\\theme_manager.py": {
        "language": ".py",
        "functions": [
            "get_dialog_stylesheet",
            "get_dialog_stylesheet",
            "apply_dialog_theme",
            "is_dark_theme"
        ],
        "classes": {
            "ThemeManager": {
                "methods": [
                    "get_dialog_stylesheet",
                    "apply_dialog_theme",
                    "is_dark_theme"
                ],
                "docstring": "Manages application-wide UI theming.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "dreamos\\core\\automation\\ui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\ui\\vscode\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\ui\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\ui\\vscode\\src\\extension.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\ui\\vscode\\src\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\ui\\ws\\client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "stop",
            "on_response"
        ],
        "classes": {
            "ResponseClient": {
                "methods": [
                    "__init__",
                    "stop"
                ],
                "docstring": "WebSocket client for receiving responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "dreamos\\core\\automation\\ui\\ws\\server.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "disconnect",
            "run"
        ],
        "classes": {
            "WebSocketManager": {
                "methods": [
                    "__init__",
                    "disconnect",
                    "run"
                ],
                "docstring": "Manages WebSocket connections and broadcasting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\automation\\ui\\ws\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_inbox",
            "load_inbox",
            "save_inbox"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__",
                    "_load_inbox",
                    "load_inbox",
                    "save_inbox"
                ],
                "docstring": "Monitors agent inboxes and processes incoming prompts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\agent_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_agent_state",
            "get_agent_state",
            "get_idle_agents",
            "is_agent_stuck",
            "get_agent_stats",
            "get_all_stats"
        ],
        "classes": {
            "AgentState": {
                "methods": [
                    "__init__",
                    "update_agent_state",
                    "get_agent_state",
                    "get_idle_agents",
                    "is_agent_stuck",
                    "get_agent_stats",
                    "get_all_stats"
                ],
                "docstring": "Manages agent states and provides auto-resume functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\autonomy\\autonomy_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_shutdown",
            "load_tasks",
            "save_devlog"
        ],
        "classes": {
            "AutonomyLoop": {
                "methods": [
                    "__init__",
                    "_handle_shutdown",
                    "load_tasks",
                    "save_devlog"
                ],
                "docstring": "Main autonomy loop for Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\autonomy_loop_runner.py": {
        "language": ".py",
        "functions": [
            "run_pytest",
            "__init__",
            "_load_agent_ownership",
            "_should_run_iteration",
            "_determine_responsible_agent",
            "generate_fix_prompt",
            "apply_code_patch",
            "commit_code"
        ],
        "classes": {
            "AutonomyLoopRunner": {
                "methods": [
                    "__init__",
                    "_load_agent_ownership",
                    "_should_run_iteration",
                    "_determine_responsible_agent",
                    "generate_fix_prompt",
                    "apply_code_patch",
                    "commit_code"
                ],
                "docstring": "Manages the autonomous test-fix loop.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\autonomy\\base_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_log_failure",
            "_log_success",
            "_load_log"
        ],
        "classes": {
            "BaseTracker": {
                "methods": [
                    "__init__",
                    "_log_failure",
                    "_log_success",
                    "_load_log"
                ],
                "docstring": "Base class for tracking and logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\auto_trigger_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_should_trigger",
            "_determine_responsible_agent"
        ],
        "classes": {
            "AutoTriggerRunner": {
                "methods": [
                    "__init__",
                    "_should_trigger",
                    "_determine_responsible_agent"
                ],
                "docstring": "Manages automatic test failure handling and fix loops.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\codex_patch_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_patch_status",
            "get_all_patches"
        ],
        "classes": {
            "CodexPatchTracker": {
                "methods": [
                    "__init__",
                    "get_patch_status",
                    "get_all_patches"
                ],
                "docstring": "Tracks and manages code patches generated by Codex.",
                "base_classes": [
                    "BaseTracker"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\bridge_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_status"
        ],
        "classes": {
            "BridgeWriter": {
                "methods": [
                    "__init__",
                    "get_status"
                ],
                "docstring": "Manages writing responses to the bridge.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\content_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_content_event",
            "log_task_completion",
            "log_insight",
            "get_content_history"
        ],
        "classes": {
            "ContentLoop": {
                "methods": [
                    "__init__",
                    "log_content_event",
                    "log_task_completion",
                    "log_insight",
                    "get_content_history"
                ],
                "docstring": "Manages content generation and memory integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\core_response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_response_processor",
            "_get_response_files",
            "__init__",
            "on_created"
        ],
        "classes": {
            "CoreResponseLoopDaemon": {
                "methods": [
                    "__init__",
                    "_create_response_processor",
                    "_get_response_files"
                ],
                "docstring": "Core response loop daemon implementation.",
                "base_classes": [
                    "BaseResponseLoopDaemon"
                ]
            },
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file creation events in bridge outbox.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent",
            "register_agent",
            "unregister_agent"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "get_agent",
                    "register_agent",
                    "unregister_agent"
                ],
                "docstring": "Manages agent lifecycle and coordination.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\core_response_processor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CoreResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes responses for the core response loop.",
                "base_classes": [
                    "ResponseProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\cursor_agent_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_agent_regions",
            "_inject_to_cursor",
            "__init__",
            "on_created"
        ],
        "classes": {
            "CursorAgentBridge": {
                "methods": [
                    "__init__",
                    "_load_agent_regions",
                    "_inject_to_cursor"
                ],
                "docstring": "Handles automated response collection and feedback loops.",
                "base_classes": []
            },
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file creation events in bridge outbox.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\enhanced_response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_agent_regions",
            "_save_agent_regions",
            "_create_response_processor",
            "_get_response_files",
            "_has_region_stabilized",
            "_hash_region",
            "__init__",
            "on_created"
        ],
        "classes": {
            "EnhancedResponseLoopDaemon": {
                "methods": [
                    "__init__",
                    "_load_agent_regions",
                    "_save_agent_regions",
                    "_create_response_processor",
                    "_get_response_files",
                    "_has_region_stabilized",
                    "_hash_region"
                ],
                "docstring": "Enhanced response loop daemon with hybrid completion detection.",
                "base_classes": [
                    "BaseResponseLoopDaemon"
                ]
            },
            "EnhancedBridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Enhanced handler for bridge outbox events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\autonomy\\error_tracking.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "get_health_metrics",
            "manual_reset",
            "__init__",
            "record_error",
            "record_success",
            "can_execute",
            "get_error_summary",
            "get_agent_health",
            "get_critical_errors",
            "_archive_unfixable_error",
            "clear_errors",
            "manual_reset"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TrackedError": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Base class for tracked errors.",
                "base_classes": []
            },
            "ArchiveError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to archiving operations.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "PromptFormatError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to prompt formatting.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "AgentInactivityError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to agent inactivity.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "DevlogWriteError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to devlog writing.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "RecoveryStrategy": {
                "methods": [],
                "docstring": "Recovery strategies for different error types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute",
                    "get_health_metrics",
                    "manual_reset"
                ],
                "docstring": "Circuit breaker for error rate monitoring.",
                "base_classes": []
            },
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "record_error",
                    "record_success",
                    "can_execute",
                    "get_error_summary",
                    "get_agent_health",
                    "get_critical_errors",
                    "_archive_unfixable_error",
                    "clear_errors",
                    "manual_reset"
                ],
                "docstring": "Tracks errors and provides error analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 42
    },
    "dreamos\\core\\autonomy\\patch_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_validation_history",
            "get_all_validations"
        ],
        "classes": {
            "PatchValidator": {
                "methods": [
                    "__init__",
                    "get_validation_history",
                    "get_all_validations"
                ],
                "docstring": "Validates patches before they are applied.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\midnight_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MidnightRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages overnight operations and swarm maintenance.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\processor_mode.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ProcessorMode": {
                "methods": [],
                "docstring": "Processor operation modes.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\startup.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config"
        ],
        "classes": {
            "AutonomySystem": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Coordinates all autonomy components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "current_state",
            "transition_history",
            "add_state_handler",
            "remove_state_handler",
            "clear_handlers",
            "get_transitions_since",
            "get_last_transition",
            "reset"
        ],
        "classes": {
            "State": {
                "methods": [],
                "docstring": "Possible states for autonomous components.",
                "base_classes": [
                    "Enum"
                ]
            },
            "StateTransition": {
                "methods": [],
                "docstring": "Record of a state transition.",
                "base_classes": []
            },
            "StateTransitionError": {
                "methods": [],
                "docstring": "Error raised when a state transition is invalid.",
                "base_classes": [
                    "Exception"
                ]
            },
            "StateManager": {
                "methods": [
                    "__init__",
                    "current_state",
                    "transition_history",
                    "add_state_handler",
                    "remove_state_handler",
                    "clear_handlers",
                    "get_transitions_since",
                    "get_last_transition",
                    "reset"
                ],
                "docstring": "Manages state transitions for autonomous components.\n\nThis class provides functionality to:\n- Track current state\n- Validate state transitions\n- Record transition history\n- Handle state-specific actions",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\autonomy\\validation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_agent_state"
        ],
        "classes": {
            "ValidationEngine": {
                "methods": [
                    "__init__",
                    "validate_agent_state"
                ],
                "docstring": "Stub for ValidationEngine class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\agent_tools\\agent_cellphone.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_injection_log",
            "_load_coords",
            "_check_cooldown",
            "_update_injection_log",
            "type_message",
            "broadcast_message",
            "force_resume_bridge",
            "mass_resume_bridge"
        ],
        "classes": {
            "AgentCellphone": {
                "methods": [
                    "__init__",
                    "_init_injection_log",
                    "_load_coords",
                    "_check_cooldown",
                    "_update_injection_log",
                    "type_message",
                    "broadcast_message",
                    "force_resume_bridge",
                    "mass_resume_bridge"
                ],
                "docstring": "Direct high-priority message injector for agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\core\\autonomy\\agent_tools\\agent_onboarder.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_status_file",
            "onboard_agent",
            "onboard_all_agents",
            "_update_status",
            "get_active_agents"
        ],
        "classes": {
            "AgentOnboarder": {
                "methods": [
                    "__init__",
                    "_init_status_file",
                    "onboard_agent",
                    "onboard_all_agents",
                    "_update_status",
                    "get_active_agents"
                ],
                "docstring": "Handles agent onboarding and recovery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\autonomy\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\autonomy\\agent_tools\\agent_restarter.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "on_modified",
            "__init__",
            "start",
            "stop",
            "queue_status_check",
            "_check_agents",
            "_check_agent",
            "_recover_agent",
            "get_stalled_agents"
        ],
        "classes": {
            "StatusHandler": {
                "methods": [
                    "__init__",
                    "on_modified"
                ],
                "docstring": "Handles agent status file system events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "AgentRestarter": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_status_check",
                    "_check_agents",
                    "_check_agent",
                    "_recover_agent",
                    "get_stalled_agents"
                ],
                "docstring": "Handles recovery of stalled agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dreamos\\core\\autonomy\\agent_tools\\heartbeat_monitor.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "start",
            "stop",
            "_check_agents",
            "get_stalled_agents",
            "__init__",
            "on_modified"
        ],
        "classes": {
            "AgentHeartbeatMonitor": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "_check_agents",
                    "get_stalled_agents"
                ],
                "docstring": "Monitors agent activity and detects stalled agents.",
                "base_classes": []
            },
            "DevlogHandler": {
                "methods": [
                    "__init__",
                    "on_modified"
                ],
                "docstring": "Handles devlog file system events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\autonomy\\agent_tools\\high_priority_dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "on_modified",
            "__init__",
            "start",
            "stop",
            "queue_agent",
            "_process_queue",
            "_process_agent",
            "_parse_intent",
            "_choose_target",
            "_format_prompt"
        ],
        "classes": {
            "OutboxHandler": {
                "methods": [
                    "__init__",
                    "on_modified"
                ],
                "docstring": "Handles outbox file system events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "HighPriorityDispatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_agent",
                    "_process_queue",
                    "_process_agent",
                    "_parse_intent",
                    "_choose_target",
                    "_format_prompt"
                ],
                "docstring": "Orchestrates dynamic agent-to-agent communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "dreamos\\core\\autonomy\\agent_tools\\resume_controller.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "inject_prompt",
            "inject_task",
            "log_devlog",
            "force_resume",
            "check_agent_status"
        ],
        "classes": {
            "AgentResumeController": {
                "methods": [
                    "__init__",
                    "inject_prompt",
                    "inject_task",
                    "log_devlog",
                    "force_resume",
                    "check_agent_status"
                ],
                "docstring": "Controls agent reactivation and task enforcement.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\autonomy\\base\\autonomy_loop_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AutonomyLoopRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Runner for executing autonomy loops.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\base\\file_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_should_process",
            "on_created",
            "on_modified",
            "on_deleted",
            "get_file_manager"
        ],
        "classes": {
            "BaseFileHandler": {
                "methods": [
                    "__init__",
                    "_should_process",
                    "on_created",
                    "on_modified",
                    "on_deleted",
                    "get_file_manager"
                ],
                "docstring": "Base class for file system event handlers with unified event processing.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\base\\response_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_response",
            "_validate_response",
            "__init__",
            "clear",
            "is_empty",
            "queue_size"
        ],
        "classes": {
            "ResponseLoopConfig": {
                "methods": [],
                "docstring": "Configuration protocol for response loops.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "ResponseMetadata": {
                "methods": [],
                "docstring": "Metadata for response processing.",
                "base_classes": []
            },
            "BaseResponseLoop": {
                "methods": [
                    "__init__",
                    "_validate_response"
                ],
                "docstring": "Base class for all response loop daemons.\n\nProvides common functionality for:\n- File polling and response processing\n- State management and transitions\n- Error handling and recovery\n- Resource cleanup",
                "base_classes": [
                    null,
                    "ABC"
                ]
            },
            "ResponseLoop": {
                "methods": [
                    "__init__",
                    "clear",
                    "is_empty",
                    "queue_size"
                ],
                "docstring": "Response loop for agent communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\autonomy\\base\\response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "release",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "ResourceManager": {
                "methods": [
                    "__init__",
                    "release"
                ],
                "docstring": "Manages concurrent resource usage.",
                "base_classes": []
            },
            "ResponseErrorHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles response processing errors.",
                "base_classes": []
            },
            "ResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for response processors.",
                "base_classes": [
                    "ABC"
                ]
            },
            "BaseResponseLoopDaemon": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for response loop daemons.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\base\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\agent_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\base\\runner_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "parse_test_failures"
        ],
        "classes": {
            "RunnerConfig": {
                "methods": [],
                "docstring": "Protocol for runner configuration.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "RunnerCore": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "parse_test_failures"
                ],
                "docstring": "Base class for all runners with common functionality.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\base\\state_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_metrics",
            "_setup_recovery",
            "_validate_backup",
            "get_recovery_events",
            "_validate_transition",
            "get_state",
            "get_metadata",
            "get_history",
            "is_stuck",
            "get_stuck_agents",
            "_update_metrics",
            "get_stats",
            "get_all_stats"
        ],
        "classes": {
            "AgentStateType": {
                "methods": [],
                "docstring": "Enumeration of possible agent states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "StateTransitionError": {
                "methods": [],
                "docstring": "Raised when a state transition is invalid.",
                "base_classes": [
                    "Exception"
                ]
            },
            "StateCorruptionError": {
                "methods": [],
                "docstring": "Raised when state data is corrupted.",
                "base_classes": [
                    "Exception"
                ]
            },
            "BaseStateManager": {
                "methods": [
                    "__init__",
                    "_setup_metrics",
                    "_setup_recovery",
                    "_validate_backup",
                    "get_recovery_events",
                    "_validate_transition",
                    "get_state",
                    "get_metadata",
                    "get_history",
                    "is_stuck",
                    "get_stuck_agents",
                    "_update_metrics",
                    "get_stats",
                    "get_all_stats"
                ],
                "docstring": "Base class for unified state management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\autonomy\\base\\runner_lifecycle.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "RunnerConfig": {
                "methods": [],
                "docstring": "Configuration protocol for runners.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "RunnerLifecycleMixin": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mixin for managing runner lifecycle.\n\nThis mixin provides core functionality for:\n- Starting/stopping runners\n- Managing state transitions\n- Handling errors and retries\n- Resource cleanup",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\base\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\error\\base.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "get_health_metrics",
            "manual_reset"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TrackedError": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Base class for tracked errors.",
                "base_classes": []
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute",
                    "get_health_metrics",
                    "manual_reset"
                ],
                "docstring": "Circuit breaker for error rate monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\autonomy\\error\\error_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_error_severity",
            "_should_retry",
            "_calculate_retry_delay"
        ],
        "classes": {
            "RetryStrategy": {
                "methods": [],
                "docstring": "Retry strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ErrorHandler": {
                "methods": [
                    "__init__",
                    "_get_error_severity",
                    "_should_retry",
                    "_calculate_retry_delay"
                ],
                "docstring": "Handles error recovery and retry logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\error\\error_reporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_report",
            "save_report",
            "_count_by_severity",
            "_count_by_agent",
            "_count_by_type"
        ],
        "classes": {
            "ErrorReporter": {
                "methods": [
                    "__init__",
                    "generate_report",
                    "save_report",
                    "_count_by_severity",
                    "_count_by_agent",
                    "_count_by_type"
                ],
                "docstring": "Handles error reporting and notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\error\\error_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_error",
            "record_success",
            "can_execute",
            "get_error_summary"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "record_error",
                    "record_success",
                    "can_execute",
                    "get_error_summary"
                ],
                "docstring": "Tracks and manages error states.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\error\\tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_error",
            "get_error_count",
            "get_recent_errors"
        ],
        "classes": {
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "track_error",
                    "get_error_count",
                    "get_recent_errors"
                ],
                "docstring": "Tracks and manages errors in the system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\error\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\error\\types.py": {
        "language": ".py",
        "functions": [
            "create_error",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "ArchiveError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to archiving operations.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "PromptFormatError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to prompt formatting.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "AgentInactivityError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to agent inactivity.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "DevlogWriteError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to devlog writing.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "BridgeConnectionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to bridge connection.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "TaskExecutionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to task execution.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "ResourceExhaustionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to resource exhaustion.",
                "base_classes": [
                    "TrackedError"
                ]
            },
            "StateTransitionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to state transitions.",
                "base_classes": [
                    "TrackedError"
                ]
            }
        },
        "routes": [],
        "complexity": 17
    },
    "dreamos\\core\\autonomy\\handlers\\base_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BaseHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for all handlers with common functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\handlers\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes agent responses and applies code changes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\base_bridge_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "on_modified"
        ],
        "classes": {
            "BaseBridgeHandler": {
                "methods": [
                    "__init__",
                    "on_created",
                    "on_modified"
                ],
                "docstring": "Base class for all bridge handlers with common functionality.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes agent responses and applies code changes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\logging\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "info",
            "error",
            "warning",
            "debug"
        ],
        "classes": {
            "LogManager": {
                "methods": [
                    "__init__",
                    "log",
                    "info",
                    "error",
                    "warning",
                    "debug"
                ],
                "docstring": "Stub implementation of LogManager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\memory\\response_memory_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "is_processed",
            "track_processing",
            "_save_memory",
            "get_stats",
            "mark_processed"
        ],
        "classes": {
            "ResponseMemoryTracker": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "is_processed",
                    "track_processing",
                    "_save_memory",
                    "get_stats",
                    "mark_processed"
                ],
                "docstring": "Tracks processed messages to prevent duplicate processing.",
                "base_classes": [
                    "BaseTracker"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\autonomy\\processors\\factory.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\processors\\response.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AutonomyResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes and validates responses in the autonomy system.",
                "base_classes": [
                    "ResponseProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\runners\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\utils\\async_file_watcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_file_info",
            "clear_cache",
            "last_check",
            "watched_files"
        ],
        "classes": {
            "AsyncFileWatcher": {
                "methods": [
                    "__init__",
                    "get_file_info",
                    "clear_cache",
                    "last_check",
                    "watched_files"
                ],
                "docstring": "Asynchronously watches a directory for file changes.\n\nThis class provides functionality to monitor a directory for file changes\nusing polling. It maintains a cache of file modification times to detect\nchanges between polls.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\utils\\response_utils.py": {
        "language": ".py",
        "functions": [
            "load_response_file",
            "archive_response_file",
            "extract_agent_id_from_file",
            "validate_response",
            "__init__",
            "__init__"
        ],
        "classes": {
            "ResourceManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages resource allocation and limits.",
                "base_classes": []
            },
            "ResponseErrorHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles response processing errors.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\validation\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_validator",
            "validate",
            "validate_required_fields",
            "validate_field_type"
        ],
        "classes": {
            "ValidationResult": {
                "methods": [],
                "docstring": "Result of a validation check.",
                "base_classes": []
            },
            "ValidationEngine": {
                "methods": [
                    "__init__",
                    "add_validator",
                    "validate",
                    "validate_required_fields",
                    "validate_field_type"
                ],
                "docstring": "Engine for validating responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\base.py": {
        "language": ".py",
        "functions": [
            "_validate_config",
            "__init__",
            "_validate_config",
            "__init__",
            "_load_config",
            "get"
        ],
        "classes": {
            "BaseBridge": {
                "methods": [
                    "__init__",
                    "_validate_config"
                ],
                "docstring": "Base class for all bridge implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "BridgeConfig": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get"
                ],
                "docstring": "Bridge configuration manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\bridge\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Bridge for interacting with ChatGPT API.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\bridge\\inbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_metrics"
        ],
        "classes": {
            "BridgeInboxHandler": {
                "methods": [
                    "__init__",
                    "get_metrics"
                ],
                "docstring": "Handles incoming messages in the bridge system.",
                "base_classes": [
                    "BaseHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\bridge\\daemon.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "ResponseLoopDaemon": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Daemon that monitors agent mailboxes and processes messages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\bridge\\response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_state",
            "_save_state",
            "_create_response_processor",
            "_get_response_files",
            "__init__",
            "on_created"
        ],
        "classes": {
            "ResponseLoopDaemon": {
                "methods": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "_create_response_processor",
                    "_get_response_files"
                ],
                "docstring": "Monitors agent responses and generates new prompts for the ChatGPT bridge.",
                "base_classes": [
                    "BaseResponseLoopDaemon"
                ]
            },
            "AgentMailboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file creation events in agent mailbox.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\bridge\\run_response_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\base\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "get",
            "set",
            "__init__"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "BridgeError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for bridge errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "BridgeConfig": {
                "methods": [
                    "__init__",
                    "get",
                    "set"
                ],
                "docstring": "Configuration for bridge implementations.",
                "base_classes": []
            },
            "BaseBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for all bridge implementations.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\base\\monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "start",
            "stop"
        ],
        "classes": {
            "BaseMonitor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for all bridge monitors.",
                "base_classes": [
                    "ABC"
                ]
            },
            "BridgeMonitor": {
                "methods": [
                    "__init__",
                    "start",
                    "stop"
                ],
                "docstring": "Bridge-specific monitor implementation.",
                "base_classes": [
                    "BaseMonitor"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\bridge\\base\\handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_validate_data"
        ],
        "classes": {
            "BaseHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for bridge handlers with unified file system event handling.",
                "base_classes": [
                    "BaseFileHandler"
                ]
            },
            "BridgeHandler": {
                "methods": [
                    "__init__",
                    "_validate_data"
                ],
                "docstring": "Bridge-specific handler implementation.",
                "base_classes": [
                    "BaseHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\bridge\\base\\processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "total_processed",
            "total_failed",
            "_update_metrics",
            "get_metrics"
        ],
        "classes": {
            "BridgeProcessor": {
                "methods": [
                    "__init__",
                    "total_processed",
                    "total_failed",
                    "_update_metrics",
                    "get_metrics"
                ],
                "docstring": "Bridge-specific processor implementation.",
                "base_classes": [
                    "BaseProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\base\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__",
            "_validate_config",
            "_load_config",
            "get"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\bridge\\base\\validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_validate_required_fields",
            "_validate_field_types",
            "_validate_field_values"
        ],
        "classes": {
            "BaseValidator": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for all bridge validators.",
                "base_classes": [
                    "ABC"
                ]
            },
            "BridgeValidator": {
                "methods": [
                    "__init__",
                    "_validate_required_fields",
                    "_validate_field_types",
                    "_validate_field_values"
                ],
                "docstring": "Bridge-specific validator implementation.",
                "base_classes": [
                    "BaseValidator"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\cache\\bridge_cache.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_cache_path",
            "add_interaction",
            "get_interactions",
            "get_average_latency"
        ],
        "classes": {
            "BridgeCache": {
                "methods": [
                    "__init__",
                    "_get_cache_path",
                    "add_interaction",
                    "get_interactions",
                    "get_average_latency"
                ],
                "docstring": "Manages caching of bridge interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\chatgpt\\bridge_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_metrics",
            "_update_metrics",
            "_load_config",
            "cleanup",
            "_init_browser",
            "_navigate_to_chatgpt",
            "_wait_for_page_load",
            "_wait_for_response"
        ],
        "classes": {
            "ChatGPTBridgeLoop": {
                "methods": [
                    "__init__",
                    "_init_metrics",
                    "_update_metrics",
                    "_load_config",
                    "cleanup",
                    "_init_browser",
                    "_navigate_to_chatgpt",
                    "_wait_for_page_load",
                    "_wait_for_response"
                ],
                "docstring": "Handles the communication loop with ChatGPT.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\bridge\\chatgpt\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "format_message",
            "format_system_message",
            "format_user_message",
            "format_assistant_message"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "format_message",
                    "format_system_message",
                    "format_user_message",
                    "format_assistant_message"
                ],
                "docstring": "Unified ChatGPT bridge implementation with enhanced features.",
                "base_classes": [
                    "BaseBridge"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\chatgpt\\prompt.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_template",
            "add_template",
            "remove_template",
            "list_templates"
        ],
        "classes": {
            "PromptManager": {
                "methods": [
                    "__init__",
                    "_get_template",
                    "add_template",
                    "remove_template",
                    "list_templates"
                ],
                "docstring": "Manages prompt generation and template handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\bridge\\chatgpt\\response_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "extract_reply",
            "parse_output"
        ],
        "classes": {
            "ChatGPTResponseHandler": {
                "methods": [
                    "__init__",
                    "extract_reply",
                    "parse_output"
                ],
                "docstring": "Handles processing and validation of ChatGPT responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\bridge\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\chatgpt\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\config\\loader.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "_load_mode_config",
            "_load_agent_config",
            "_merge_configs",
            "_validate_config",
            "save_agent_config",
            "deep_merge",
            "deep_merge",
            "__init__",
            "load_config",
            "_load_mode_config",
            "_load_agent_config",
            "_merge_configs",
            "_validate_config",
            "save_agent_config",
            "deep_merge"
        ],
        "classes": {
            "BridgeMode": {
                "methods": [],
                "docstring": "Bridge operation modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "BridgeConfigLoader": {
                "methods": [
                    "__init__",
                    "load_config",
                    "_load_mode_config",
                    "_load_agent_config",
                    "_merge_configs",
                    "_validate_config",
                    "save_agent_config"
                ],
                "docstring": "Loads and validates bridge configurations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "dreamos\\core\\bridge\\cursor\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Bridge implementation for Cursor UI automation.",
                "base_classes": [
                    "BaseBridge"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\bridge\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\handlers\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created"
        ],
        "classes": {
            "BaseBridgeHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Base class for all bridge handlers.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\bridge\\handlers\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BridgeHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Coordinates communication between inbox and outbox handlers.",
                "base_classes": [
                    "BaseBridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\bridge\\handlers\\cursor_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorBridgeHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Cursor bridge handler with unified logging and metrics.",
                "base_classes": [
                    "BridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\bridge\\handlers\\inbox.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "write_response"
        ],
        "classes": {
            "BridgeInboxHandler": {
                "methods": [
                    "__init__",
                    "write_response"
                ],
                "docstring": "Handles incoming messages from external sources and routes them to agent mailboxes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\bridge\\handlers\\inbox_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\handlers\\outbox.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "write_response",
            "get_metrics"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "write_response",
                    "get_metrics"
                ],
                "docstring": "Handles outgoing messages for the bridge system using agent-local mailboxes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\bridge\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\handlers\\outbox_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\logging\\logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_loggers",
            "log_message",
            "log_response",
            "log_metric",
            "log_health",
            "log_error",
            "get_logs"
        ],
        "classes": {
            "BridgeLogger": {
                "methods": [
                    "__init__",
                    "_setup_loggers",
                    "log_message",
                    "log_response",
                    "log_metric",
                    "log_health",
                    "log_error",
                    "get_logs"
                ],
                "docstring": "Centralized logging for bridge operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\bridge\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\monitoring\\discord.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_color"
        ],
        "classes": {
            "EventType": {
                "methods": [],
                "docstring": "Types of events that can be sent to Discord.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DiscordHook": {
                "methods": [
                    "__init__",
                    "_get_color"
                ],
                "docstring": "Handles Discord webhook integration for notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\bridge\\monitoring\\health.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "__init__",
            "_load_health",
            "_save_health",
            "is_healthy",
            "get_health_status"
        ],
        "classes": {
            "BridgeHealth": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Bridge health status.",
                "base_classes": []
            },
            "BridgeMonitor": {
                "methods": [
                    "__init__",
                    "_load_health",
                    "_save_health",
                    "is_healthy",
                    "get_health_status"
                ],
                "docstring": "Monitors bridge health and status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\bridge\\monitoring\\metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update",
            "to_dict",
            "__init__",
            "update_metrics",
            "get_metrics"
        ],
        "classes": {
            "BridgeHealth": {
                "methods": [
                    "__init__",
                    "update",
                    "to_dict"
                ],
                "docstring": "Tracks bridge health status.",
                "base_classes": []
            },
            "BridgeMetrics": {
                "methods": [
                    "__init__",
                    "update_metrics",
                    "get_metrics"
                ],
                "docstring": "Tracks metrics for bridge operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\bridge\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\scripts\\run_response_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\bridge\\validation\\validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate",
            "_is_valid_message_type",
            "_validate_content"
        ],
        "classes": {
            "BridgeMessage": {
                "methods": [],
                "docstring": "Bridge message data class.",
                "base_classes": []
            },
            "BridgeValidator": {
                "methods": [
                    "__init__",
                    "validate",
                    "_is_valid_message_type",
                    "_validate_content"
                ],
                "docstring": "Validator for bridge messages.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\captain\\task_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "_calculate_priority_score",
            "_is_task_ready",
            "get_scheduled_tasks"
        ],
        "classes": {
            "ScheduledTask": {
                "methods": [],
                "docstring": "Represents a task scheduled for execution.",
                "base_classes": []
            },
            "TaskScheduler": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "_calculate_priority_score",
                    "_is_task_ready",
                    "get_scheduled_tasks"
                ],
                "docstring": "Manages task scheduling and prioritization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\captain\\captain.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Priority levels for tasks.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task to be executed by an agent.",
                "base_classes": []
            },
            "Captain": {
                "methods": [
                    "__init__",
                    "create_task"
                ],
                "docstring": "Oversees agent coordination and task management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\captain\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\config\\bridge_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load",
            "save",
            "validate"
        ],
        "classes": {
            "BridgeConfig": {
                "methods": [
                    "__init__",
                    "load",
                    "save",
                    "validate"
                ],
                "docstring": "Configuration for Dream.OS bridges.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\codex\\codex_quality_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_validation_prompt",
            "_log_judgment"
        ],
        "classes": {
            "CodexController": {
                "methods": [
                    "__init__",
                    "_format_validation_prompt",
                    "_log_judgment"
                ],
                "docstring": "Quality control agent using headless Chrome and ChatGPT.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\codex\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\config\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "set",
            "_load",
            "_save",
            "__getattr__",
            "__repr__"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "get",
                    "set",
                    "_load",
                    "_save",
                    "__getattr__",
                    "__repr__"
                ],
                "docstring": "Very small subset of the real ConfigManager API.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\cursor\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "type_text",
            "press_ctrl_s"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "type_text",
                    "press_ctrl_s"
                ],
                "docstring": "Controls the Cursor IDE for applying code changes.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\discord_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\discord_bot\\activity.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ActivityType": {
                "methods": [],
                "docstring": "Discord activity types.",
                "base_classes": [
                    "IntEnum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\config\\unified_config.py": {
        "language": ".py",
        "functions": [
            "get_config",
            "set_config",
            "reload_config",
            "get_section",
            "set_value",
            "get_value",
            "get",
            "set",
            "__init__",
            "_load_all_configs",
            "_load_config_section",
            "get_config",
            "set_config",
            "_save_config",
            "reload_config",
            "get_section"
        ],
        "classes": {
            "ConfigType": {
                "methods": [],
                "docstring": "Types of configuration files.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ConfigSection": {
                "methods": [
                    "get",
                    "set"
                ],
                "docstring": "Represents a section of configuration.",
                "base_classes": []
            },
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "_load_all_configs",
                    "_load_config_section",
                    "get_config",
                    "set_config",
                    "_save_config",
                    "reload_config",
                    "get_section"
                ],
                "docstring": "Manages all configuration across the project.",
                "base_classes": []
            },
            "UnifiedConfigManager": {
                "methods": [],
                "docstring": "Legacy alias for ConfigManager expected by older code/tests.",
                "base_classes": [
                    "ConfigManager"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\errors\\bridge_errors.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__str__"
        ],
        "classes": {
            "BridgeError": {
                "methods": [
                    "__init__",
                    "__str__"
                ],
                "docstring": "Base exception for bridge-related errors.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\errors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\gpt_router\\bridge_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log"
        ],
        "classes": {
            "BridgeLogger": {
                "methods": [
                    "__init__",
                    "log"
                ],
                "docstring": "Simple JSON line logger.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\gpt_router\\cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\gpt_router\\navigator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__iter__",
            "__next__"
        ],
        "classes": {
            "ConversationNavigator": {
                "methods": [
                    "__init__",
                    "__iter__",
                    "__next__"
                ],
                "docstring": "Cycle through conversation URLs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\gpt_router\\validator.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CodexValidator": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Check responses for hallucinations and format errors.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\gpt_router\\prompt_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_conversation"
        ],
        "classes": {
            "ChatGPTPromptEngine": {
                "methods": [
                    "__init__",
                    "process_conversation"
                ],
                "docstring": "Orchestrates prompt delivery and response collection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\gpt_router\\prompt_router.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_profile",
            "decide_prompt"
        ],
        "classes": {
            "PromptRouter": {
                "methods": [
                    "__init__",
                    "_load_profile",
                    "decide_prompt"
                ],
                "docstring": "Decide which prompt and GPT profile to use.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\gpt_router\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\handlers\\unified_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_operation"
        ],
        "classes": {
            "UnifiedHandler": {
                "methods": [
                    "__init__",
                    "log_operation"
                ],
                "docstring": "Base class for all handlers in the system.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\handlers\\handler_utils.py": {
        "language": ".py",
        "functions": [
            "structured_log"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\handlers\\response_processor_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_processor"
        ],
        "classes": {
            "ResponseProcessorFactory": {
                "methods": [
                    "__init__",
                    "create_processor"
                ],
                "docstring": "Factory for creating response processors.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\gpt_router\\profiles\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\imports\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_update_progress",
            "create_backup",
            "analyze_imports",
            "update_imports",
            "format_file",
            "run_tests"
        ],
        "classes": {
            "ImportInfo": {
                "methods": [],
                "docstring": "Information about imports in a file.",
                "base_classes": []
            },
            "ImportUpdateResults": {
                "methods": [],
                "docstring": "Results from an import update operation.",
                "base_classes": []
            },
            "ImportManager": {
                "methods": [
                    "__init__",
                    "_update_progress",
                    "create_backup",
                    "analyze_imports",
                    "update_imports",
                    "format_file",
                    "run_tests"
                ],
                "docstring": "Core class for managing Python imports.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\imports\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\imports\\analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file",
            "analyze_project",
            "generate_report"
        ],
        "classes": {
            "ImportIssueType": {
                "methods": [],
                "docstring": "Types of import issues that can be detected.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ImportIssue": {
                "methods": [],
                "docstring": "Represents an issue found with imports in a file.",
                "base_classes": []
            },
            "ImportAnalysis": {
                "methods": [],
                "docstring": "Results of import analysis for a file or project.",
                "base_classes": []
            },
            "ImportAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "analyze_project",
                    "generate_report"
                ],
                "docstring": "Analyzes Python imports for issues and best practices.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\integration\\bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_bridge",
            "_create_processor",
            "_create_response"
        ],
        "classes": {
            "BridgeIntegration": {
                "methods": [
                    "__init__",
                    "_create_bridge",
                    "_create_processor",
                    "_create_response"
                ],
                "docstring": "Bridge integration facade.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\integrations\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_queue_stats",
            "is_healthy"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "get_queue_stats",
                    "is_healthy"
                ],
                "docstring": "Main service for ChatGPT integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\integrations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\io\\atomic.py": {
        "language": ".py",
        "functions": [
            "safe_read",
            "safe_write"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\io\\json_ops.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json",
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\io\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\logging\\agent_logger.py": {
        "language": ".py",
        "functions": [
            "get_logger",
            "__init__",
            "log",
            "_create_inbox_message",
            "get_log",
            "clear_log"
        ],
        "classes": {
            "AgentLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "_create_inbox_message",
                    "get_log",
                    "clear_log"
                ],
                "docstring": "Handles agent development logging and Discord notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\logging\\log_config.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "get_log_path",
            "get_metrics_path",
            "get_retention_date",
            "get_log_path",
            "get_metrics_path",
            "get_retention_date",
            "setup_logging",
            "should_log",
            "from_string",
            "__init__",
            "to_dict",
            "from_dict",
            "save",
            "load",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "LogLevel": {
                "methods": [
                    "should_log",
                    "from_string"
                ],
                "docstring": "Standardized log levels for Dream.OS logging system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Logging configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\logging\\log_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_log_path",
            "_get_handle_key",
            "_get_file_handle",
            "write_log",
            "read_logs",
            "clear_log",
            "close"
        ],
        "classes": {
            "LogWriter": {
                "methods": [
                    "__init__",
                    "_get_log_path",
                    "_get_handle_key",
                    "_get_file_handle",
                    "write_log",
                    "read_logs",
                    "clear_log",
                    "close"
                ],
                "docstring": "Thread-safe log writer with proper file locking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\logging\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "get_metrics",
            "shutdown"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels with numeric values.",
                "base_classes": []
            },
            "LogConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Lightweight logging configuration container.\n\nThis implementation is intentionally minimal \u2013 it just needs to expose the\nattributes that other modules (e.g. the social *LogRotator*) reference.  A\nfuller configuration system can be wired in later without breaking the\npublic interface.",
                "base_classes": []
            },
            "LogManager": {
                "methods": [
                    "__init__",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Unified logging manager with metrics integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\logging\\unified_logger.py": {
        "language": ".py",
        "functions": [
            "get_logger",
            "log",
            "__init__",
            "_setup_logging",
            "_get_default_config",
            "_setup_category_logger",
            "get_logger",
            "set_level",
            "log",
            "format"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels supported by the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogCategory": {
                "methods": [],
                "docstring": "Categories of logs in the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogConfig": {
                "methods": [],
                "docstring": "Configuration for a log category.",
                "base_classes": []
            },
            "UnifiedLogger": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "_get_default_config",
                    "_setup_category_logger",
                    "get_logger",
                    "set_level",
                    "log"
                ],
                "docstring": "Unified logging system for Dream.OS.",
                "base_classes": []
            },
            "JsonFormatter": {
                "methods": [
                    "format"
                ],
                "docstring": "Formatter that outputs JSON.",
                "base_classes": [
                    "logging.Formatter"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\messaging\\agent_bridge_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "AgentBridgeHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles communication between agents and the bridge system.",
                "base_classes": []
            },
            "BridgeIntegration": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Fallback stub used when the real BridgeIntegration cannot be imported.",
                "base_classes": []
            },
            "AgentResponseTracker": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Fallback stub for response tracking when full implementation is unavailable.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send",
            "receive",
            "__init__",
            "copy"
        ],
        "classes": {
            "BaseMessagingComponent": {
                "methods": [
                    "__init__",
                    "send",
                    "receive"
                ],
                "docstring": "No-op stand-in for the historical messaging base class.",
                "base_classes": []
            },
            "MessagePriority": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageType": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            },
            "Message": {
                "methods": [
                    "__init__",
                    "copy"
                ],
                "docstring": "Flexible message model used by unit-tests.\n\nIt intentionally accepts a broad set of keyword arguments so that older\ncall-sites (e.g. ``Message(type=..., sender=..., recipient=...)``) do not\nexplode with ``TypeError: unexpected keyword``.",
                "base_classes": []
            },
            "MessageQueue": {
                "methods": [],
                "docstring": "Abstract queue interface (subset).",
                "base_classes": [
                    "ABC"
                ]
            },
            "MessageRouter": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "SimpleQueue": {
                "methods": [],
                "docstring": "Minimal runnable queue that fulfils the abstract interface.",
                "base_classes": [
                    "MessageQueue"
                ]
            },
            "MessageValidator": {
                "methods": [],
                "docstring": "Very small placeholder used by unit tests.",
                "base_classes": []
            },
            "MessageHandler": {
                "methods": [],
                "docstring": "No-op message handler placeholder.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\messaging\\captain_phone.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "reset_singleton",
            "send_message",
            "broadcast_message",
            "get_messages",
            "acknowledge_message",
            "_monitor_response",
            "_save_response",
            "_get_all_agents",
            "clear_messages"
        ],
        "classes": {
            "CaptainPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "send_message",
                    "broadcast_message",
                    "get_messages",
                    "acknowledge_message",
                    "_monitor_response",
                    "_save_response",
                    "_get_all_agents",
                    "clear_messages"
                ],
                "docstring": "Captain phone for managing agent communications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\messaging\\bridge_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_enhance_prompt",
            "get_health_status",
            "get_agent_responses"
        ],
        "classes": {
            "BridgeIntegration": {
                "methods": [
                    "__init__",
                    "_enhance_prompt",
                    "get_health_status",
                    "get_agent_responses"
                ],
                "docstring": "Core integration for ChatGPT bridge functionality.\n\nThis class provides a high-level interface for agents to interact with ChatGPT\nthrough the bridge system. It handles message routing, response tracking,\nand health monitoring.\n\nAttributes:\n    bridge: Core ChatGPT bridge instance\n    queue: Request queue for managing messages\n    health: Health monitoring system\n    tracker: Response tracking system\n    config: Bridge configuration",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\cell_phone.py": {
        "language": ".py",
        "functions": [
            "validate_phone_number",
            "format_phone_number",
            "__init__",
            "_load_queue",
            "_save_queue",
            "add_message",
            "get_messages",
            "clear_queue",
            "__init__",
            "_load_coordinates",
            "__new__",
            "__init__",
            "reset_singleton",
            "broadcast_message"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message delivery modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "_load_queue",
                    "_save_queue",
                    "add_message",
                    "get_messages",
                    "clear_queue"
                ],
                "docstring": "Queue for storing and retrieving messages.",
                "base_classes": []
            },
            "CellPhone": {
                "methods": [
                    "__init__",
                    "_load_coordinates"
                ],
                "docstring": "Handles injecting prompts into agent conversations.",
                "base_classes": []
            },
            "CaptainPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "broadcast_message"
                ],
                "docstring": "Manages messaging for the captain agent.",
                "base_classes": [
                    "CellPhone"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\messaging\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_health",
            "_update_health",
            "start",
            "stop",
            "_process_request",
            "_worker_loop",
            "_ensure_valid_session",
            "_handle_login",
            "_launch_browser",
            "_send_prompt",
            "_focus_cursor_window",
            "_paste_to_cursor",
            "_load_pending_requests",
            "_save_pending_requests",
            "_worker_loop"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "_load_health",
                    "_update_health",
                    "start",
                    "stop",
                    "_process_request",
                    "_worker_loop",
                    "_ensure_valid_session",
                    "_handle_login",
                    "_launch_browser",
                    "_send_prompt",
                    "_focus_cursor_window",
                    "_paste_to_cursor",
                    "_load_pending_requests",
                    "_save_pending_requests",
                    "_worker_loop"
                ],
                "docstring": "Manages communication between Dream.OS agents and ChatGPT.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "dreamos\\core\\messaging\\enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Modes for message delivery.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessagePriority": {
                "methods": [],
                "docstring": "Priority levels for messages.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageType": {
                "methods": [],
                "docstring": "Types of messages in the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageStatus": {
                "methods": [],
                "docstring": "Message delivery and processing status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Task execution status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskState": {
                "methods": [],
                "docstring": "Legacy TaskState enumeration used by debug tests.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\common.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "__post_init__",
            "to_dict",
            "from_dict",
            "validate"
        ],
        "classes": {
            "MessageContext": {
                "methods": [
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Context for message processing.",
                "base_classes": []
            },
            "Message": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Base message structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_handler",
            "remove_handler",
            "set_default_handler",
            "set_error_handler",
            "is_processing",
            "queue_size"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "add_handler",
                    "remove_handler",
                    "set_default_handler",
                    "set_error_handler",
                    "is_processing",
                    "queue_size"
                ],
                "docstring": "Processor for handling messages.",
                "base_classes": [
                    "MessageHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history"
        ],
        "classes": {
            "PersistentMessageHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history"
                ],
                "docstring": "Persistent message history implementation.",
                "base_classes": [
                    "MessageHistory"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\messaging\\message.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\message_builder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_message",
            "add_template",
            "remove_template"
        ],
        "classes": {
            "MessageType": {
                "methods": [],
                "docstring": "Enumeration of message types.\n\nAttributes:\n    SUCCESS: Indicates successful operation completion\n    ERROR: Indicates operation failure\n    INFO: General information message\n    WARNING: Warning message\n    PROGRESS: Progress update message\n    STATUS: Status update message\n    COMMAND: Command-related message\n    SYSTEM: System-level message",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageTemplate": {
                "methods": [],
                "docstring": "Template for creating messages.\n\nAttributes:\n    type: The type of message (SUCCESS, ERROR, etc.)\n    template: The template string with placeholders\n    mode: The message mode (TASK, SYSTEM, etc.)\n    default_data: Default values for template placeholders",
                "base_classes": []
            },
            "MessageBuilder": {
                "methods": [
                    "__init__",
                    "create_message",
                    "add_template",
                    "remove_template"
                ],
                "docstring": "Builder for creating consistent UI messages.\n\nThis class implements the singleton pattern to ensure a single source of truth\nfor message templates and formatting rules across the application.\n\nAttributes:\n    _templates: Dictionary of message templates by type and name",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\message_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_agent_status",
            "_save_agent_status",
            "_load_agent_status",
            "is_valid_message",
            "sanitize_filename",
            "handle_corrupted_inbox",
            "send_message",
            "get_messages",
            "mark_as_processed",
            "cleanup_old_messages",
            "get_agent_status",
            "update_agent_status"
        ],
        "classes": {
            "MessageValidationError": {
                "methods": [],
                "docstring": "Raised when message validation fails.",
                "base_classes": [
                    "Exception"
                ]
            },
            "MessageHandler": {
                "methods": [
                    "__init__",
                    "_init_agent_status",
                    "_save_agent_status",
                    "_load_agent_status",
                    "is_valid_message",
                    "sanitize_filename",
                    "handle_corrupted_inbox",
                    "send_message",
                    "get_messages",
                    "mark_as_processed",
                    "cleanup_old_messages",
                    "get_agent_status",
                    "update_agent_status"
                ],
                "docstring": "Handles message routing and delivery between agents with security validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\messaging\\message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "unregister_handler",
            "_save_message",
            "_load_message"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "register_handler",
                    "unregister_handler",
                    "_save_message",
                    "_load_message"
                ],
                "docstring": "Handles message processing and routing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\messaging\\message_loop.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageLoop": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Asynchronous message loop for processing messages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\messaging\\message_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_queue",
            "_get_lock",
            "enqueue",
            "dequeue",
            "peek",
            "clear",
            "subscribe",
            "unsubscribe",
            "_notify_subscribers",
            "get_queue_size",
            "get_all_messages"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "_get_queue",
                    "_get_lock",
                    "enqueue",
                    "dequeue",
                    "peek",
                    "clear",
                    "subscribe",
                    "unsubscribe",
                    "_notify_subscribers",
                    "get_queue_size",
                    "get_all_messages"
                ],
                "docstring": "Thread-safe message queue with priority support.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\core\\messaging\\message_record.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_message",
            "get_history",
            "clear_history"
        ],
        "classes": {
            "MessageRecord": {
                "methods": [
                    "__init__",
                    "record_message",
                    "get_history",
                    "clear_history"
                ],
                "docstring": "Tracks message history and persistence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\message_system.py": {
        "language": ".py",
        "functions": [
            "enqueue",
            "get_messages",
            "acknowledge",
            "__init__",
            "_load_queue",
            "_save_queue",
            "enqueue",
            "get_messages",
            "acknowledge",
            "record",
            "get_history",
            "__init__",
            "_load_history",
            "_save_history",
            "record",
            "get_history",
            "route",
            "__init__",
            "send",
            "receive",
            "acknowledge",
            "get_history"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [
                    "enqueue",
                    "get_messages",
                    "acknowledge"
                ],
                "docstring": "Abstract base class for message queue implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_load_queue",
                    "_save_queue",
                    "enqueue",
                    "get_messages",
                    "acknowledge"
                ],
                "docstring": "Persistent message queue using JSON storage.",
                "base_classes": [
                    "MessageQueue"
                ]
            },
            "MessageHistory": {
                "methods": [
                    "record",
                    "get_history"
                ],
                "docstring": "Abstract base class for message history implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "JsonMessageHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "record",
                    "get_history"
                ],
                "docstring": "Message history implementation using JSON storage.",
                "base_classes": [
                    "MessageHistory"
                ]
            },
            "MessageRouter": {
                "methods": [
                    "route"
                ],
                "docstring": "Abstract base class for message routing implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "MessageSystem": {
                "methods": [
                    "__init__",
                    "send",
                    "receive",
                    "acknowledge",
                    "get_history"
                ],
                "docstring": "Unified message system for Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "dreamos\\core\\messaging\\messaging.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "Message": {
                "methods": [],
                "docstring": "Represents a message with metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\phones.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "send_message",
            "_monitor_response",
            "_save_response",
            "broadcast_message",
            "_get_all_agents"
        ],
        "classes": {
            "Phone": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base phone interface for agent communication.",
                "base_classes": [
                    "BaseMessagingComponent"
                ]
            },
            "CaptainPhone": {
                "methods": [
                    "__init__",
                    "send_message",
                    "_monitor_response",
                    "_save_response",
                    "broadcast_message",
                    "_get_all_agents"
                ],
                "docstring": "Special phone interface for the captain to communicate with agents.",
                "base_classes": [
                    "Phone"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\pipeline.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessagePipeline": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles the processing of messages through the system.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\messaging\\queue.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AsyncMessageQueue": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Asynchronous message queue implementation.",
                "base_classes": [
                    "MessageQueue"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\messaging\\request_queue.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "__init__",
            "_load_requests",
            "_save_requests",
            "add_request",
            "update_request",
            "get_pending_requests",
            "get_requests_by_status",
            "get_failed_requests",
            "get_completed_requests",
            "cleanup_old_requests",
            "get_queue_stats"
        ],
        "classes": {
            "Request": {
                "methods": [
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Request in the queue.",
                "base_classes": []
            },
            "RequestQueue": {
                "methods": [
                    "__init__",
                    "_load_requests",
                    "_save_requests",
                    "add_request",
                    "update_request",
                    "get_pending_requests",
                    "get_requests_by_status",
                    "get_failed_requests",
                    "get_completed_requests",
                    "cleanup_old_requests",
                    "get_queue_stats"
                ],
                "docstring": "Manages request queue for bridges.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\messaging\\response_collector.py": {
        "language": ".py",
        "functions": [
            "collect_response",
            "load_regions",
            "save_regions",
            "__init__",
            "load_template",
            "detect_copy_button",
            "click_copy_button",
            "__init__",
            "capture",
            "is_stable",
            "try_copy_response",
            "__init__",
            "_load_agent_regions",
            "_find_cursor_windows",
            "_get_cursor_text",
            "start_collecting",
            "_save_response",
            "get_saved_responses",
            "get_latest_response",
            "clear_responses"
        ],
        "classes": {
            "CopyButtonDetector": {
                "methods": [
                    "__init__",
                    "load_template",
                    "detect_copy_button",
                    "click_copy_button"
                ],
                "docstring": "Detects and interacts with the copy button in Cursor.",
                "base_classes": []
            },
            "AgentRegion": {
                "methods": [
                    "__init__",
                    "capture",
                    "is_stable",
                    "try_copy_response"
                ],
                "docstring": "Defines a region for monitoring agent responses.",
                "base_classes": []
            },
            "ResponseCollector": {
                "methods": [
                    "__init__",
                    "_load_agent_regions",
                    "_find_cursor_windows",
                    "_get_cursor_text",
                    "start_collecting",
                    "_save_response",
                    "get_saved_responses",
                    "get_latest_response",
                    "clear_responses"
                ],
                "docstring": "Collects and saves Cursor agent responses for SWARM.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 37
    },
    "dreamos\\core\\messaging\\response_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_agent_dir",
            "_get_response_path",
            "_load_responses",
            "enqueue_response",
            "update_response_state",
            "archive_response",
            "get_pending_responses",
            "cleanup_old_responses"
        ],
        "classes": {
            "ResponseState": {
                "methods": [],
                "docstring": "Response state enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ResponseQueue": {
                "methods": [
                    "__init__",
                    "_get_agent_dir",
                    "_get_response_path",
                    "_load_responses",
                    "enqueue_response",
                    "update_response_state",
                    "archive_response",
                    "get_pending_responses",
                    "cleanup_old_responses"
                ],
                "docstring": "Thread-safe response queue with persistence and state tracking.",
                "base_classes": [
                    "MessageQueue"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\messaging\\response_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentResponseTracker": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Tracks agent responses and message history.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\messaging\\response_watcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "__init__",
            "start",
            "stop",
            "_watch_loop"
        ],
        "classes": {
            "ResponseEventHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handler for response file events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "ResponseWatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "_watch_loop"
                ],
                "docstring": "Watches response outbox and forwards responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_route",
            "remove_route",
            "add_handler",
            "remove_handler",
            "set_default_handler",
            "set_rate_limit",
            "set_content_pattern",
            "set_required_fields",
            "queue_size",
            "is_processing"
        ],
        "classes": {
            "MessageSystem": {
                "methods": [
                    "__init__",
                    "add_route",
                    "remove_route",
                    "add_handler",
                    "remove_handler",
                    "set_default_handler",
                    "set_rate_limit",
                    "set_content_pattern",
                    "set_required_fields",
                    "queue_size",
                    "is_processing"
                ],
                "docstring": "Unified message system for agent communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\messaging\\router.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_route",
            "remove_route",
            "add_handler",
            "remove_handler",
            "set_default_handler"
        ],
        "classes": {
            "AgentMessageRouter": {
                "methods": [
                    "__init__",
                    "add_route",
                    "remove_route",
                    "add_handler",
                    "remove_handler",
                    "set_default_handler"
                ],
                "docstring": "Router for handling message routing between agents.",
                "base_classes": [
                    "MessageRouter"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\types.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\ui.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "process_message",
            "initialize",
            "shutdown",
            "send_message",
            "get_status",
            "_handle_resume",
            "_handle_sync",
            "_handle_verify",
            "_handle_repair",
            "_handle_backup",
            "_handle_restore",
            "_handle_cleanup",
            "_handle_captain",
            "_handle_task",
            "_handle_integrate"
        ],
        "classes": {
            "MessageUI": {
                "methods": [
                    "__post_init__",
                    "process_message",
                    "initialize",
                    "shutdown",
                    "send_message",
                    "get_status",
                    "_handle_resume",
                    "_handle_sync",
                    "_handle_verify",
                    "_handle_repair",
                    "_handle_backup",
                    "_handle_restore",
                    "_handle_cleanup",
                    "_handle_captain",
                    "_handle_task",
                    "_handle_integrate"
                ],
                "docstring": "UI handler for message processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "dreamos\\core\\messaging\\validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_rate_limit",
            "set_content_pattern",
            "set_required_fields"
        ],
        "classes": {
            "MessageValidator": {
                "methods": [
                    "__init__",
                    "set_rate_limit",
                    "set_content_pattern",
                    "set_required_fields"
                ],
                "docstring": "Validator for ensuring message integrity.",
                "base_classes": [
                    "MessageValidator"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\unified_message_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_load_messages",
            "_save_messages",
            "__init__",
            "__init__",
            "__init__",
            "__new__",
            "__init__",
            "_setup_components",
            "_load_history",
            "_save_history"
        ],
        "classes": {
            "Message": {
                "methods": [],
                "docstring": "Message data class.",
                "base_classes": [
                    null
                ]
            },
            "MessageQueue": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Abstract base class for message queue implementations.",
                "base_classes": [
                    "ABC",
                    null
                ]
            },
            "PersistentMessageQueue": {
                "methods": [
                    "__init__",
                    "_load_messages",
                    "_save_messages"
                ],
                "docstring": "Message queue with persistent storage.",
                "base_classes": [
                    null
                ]
            },
            "MessageProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes messages from a queue.",
                "base_classes": [
                    null
                ]
            },
            "MessageHistory": {
                "methods": [],
                "docstring": "Abstract base class for message history implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "MessageRouter": {
                "methods": [],
                "docstring": "Abstract base class for message routing implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "SimpleRouter": {
                "methods": [],
                "docstring": "Simple message router implementation.",
                "base_classes": [
                    "MessageRouter"
                ]
            },
            "SimpleQueue": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Simple message queue implementation.",
                "base_classes": [
                    "MessageQueue"
                ]
            },
            "SimpleHistory": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Simple message history implementation.",
                "base_classes": [
                    "MessageHistory"
                ]
            },
            "MessageSystem": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_setup_components",
                    "_load_history",
                    "_save_history"
                ],
                "docstring": "Unified message handling system for Dream.OS.",
                "base_classes": [
                    "BaseMessagingComponent"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\core\\messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\utils\\core_utils.py": {
        "language": ".py",
        "functions": [
            "format_message",
            "parse_message",
            "validate_message",
            "get_message_type",
            "get_message_content",
            "get_message_timestamp",
            "format_timestamp",
            "write_json",
            "read_yaml",
            "ensure_directory_exists",
            "atomic_write",
            "safe_read"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\metrics\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment",
            "gauge",
            "histogram",
            "get_metrics",
            "reset",
            "_get_key",
            "_save"
        ],
        "classes": {
            "BaseMetrics": {
                "methods": [
                    "__init__",
                    "increment",
                    "gauge",
                    "histogram",
                    "get_metrics",
                    "reset",
                    "_get_key",
                    "_save"
                ],
                "docstring": "Base class for all metrics implementations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\metrics\\bridge_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_request",
            "record_success",
            "record_error",
            "get_metrics"
        ],
        "classes": {
            "BridgeMetrics": {
                "methods": [
                    "__init__",
                    "record_request",
                    "record_success",
                    "record_error",
                    "get_metrics"
                ],
                "docstring": "Metrics for bridge operations.",
                "base_classes": [
                    "BaseMetrics"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\metrics\\file_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_read",
            "record_write",
            "record_error",
            "record_directory_operation"
        ],
        "classes": {
            "FileMetrics": {
                "methods": [
                    "__init__",
                    "record_read",
                    "record_write",
                    "record_error",
                    "record_directory_operation"
                ],
                "docstring": "Metrics for file operations.",
                "base_classes": [
                    "BaseMetrics"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\metrics\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_log",
            "record_error",
            "record_rotation",
            "get_metrics"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "record_log",
                    "record_error",
                    "record_rotation",
                    "get_metrics"
                ],
                "docstring": "Metrics for logging operations.",
                "base_classes": [
                    "BaseMetrics"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\metrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\bridge_health.py": {
        "language": ".py",
        "functions": [
            "check_health",
            "update_metrics",
            "__init__",
            "check_health",
            "update_metrics"
        ],
        "classes": {
            "BridgeHealthMonitor": {
                "methods": [
                    "__init__",
                    "check_health",
                    "update_metrics"
                ],
                "docstring": "Monitors the health of the bridge system.",
                "base_classes": [
                    "BaseHealthMonitor"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\monitoring\\metrics.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\metrics_server.py": {
        "language": ".py",
        "functions": [
            "_load_metrics",
            "metrics",
            "start"
        ],
        "classes": {},
        "routes": [
            {
                "function": "metrics",
                "method": "ROUTE",
                "path": "/metrics"
            }
        ],
        "complexity": 3
    },
    "dreamos\\core\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\health\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\health\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict",
            "__init__",
            "_load_health",
            "_save_health",
            "update_health",
            "is_healthy",
            "get_health_status"
        ],
        "classes": {
            "HealthStatus": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Health status data.",
                "base_classes": []
            },
            "BaseHealthMonitor": {
                "methods": [
                    "__init__",
                    "_load_health",
                    "_save_health",
                    "update_health",
                    "is_healthy",
                    "get_health_status"
                ],
                "docstring": "Base class for health monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\nlp\\keyword_extract.py": {
        "language": ".py",
        "functions": [
            "extract",
            "__init__",
            "extract"
        ],
        "classes": {
            "KeywordExtractor": {
                "methods": [
                    "__init__",
                    "extract"
                ],
                "docstring": "Extracts keywords from text using frequency analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "dreamos\\core\\response\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\response\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate",
            "to_dict",
            "is_valid",
            "__init__",
            "__init__",
            "_ensure_storage",
            "store",
            "retrieve"
        ],
        "classes": {
            "BaseResponse": {
                "methods": [
                    "__init__",
                    "_validate",
                    "to_dict",
                    "is_valid"
                ],
                "docstring": "Base class for all response implementations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "BaseResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for response processors.",
                "base_classes": [
                    "ABC"
                ]
            },
            "ResponseMemory": {
                "methods": [
                    "__init__",
                    "_ensure_storage",
                    "store",
                    "retrieve"
                ],
                "docstring": "Response memory manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\nlp\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\resumer_v2\\atomic_file_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load",
            "save"
        ],
        "classes": {
            "AtomicFileManager": {
                "methods": [
                    "__init__",
                    "load",
                    "save"
                ],
                "docstring": "No-op placeholder that fulfils the expected interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\resumer_v2\\agent_state_manager.py": {
        "language": ".py",
        "functions": [
            "default",
            "__init__",
            "_init_state",
            "_write_state_file",
            "_write_tasks_file",
            "_load_state",
            "_load_tasks",
            "validate_state",
            "validate_tasks"
        ],
        "classes": {
            "TaskStatusEncoder": {
                "methods": [
                    "default"
                ],
                "docstring": "Custom JSON encoder for TaskStatus enum.",
                "base_classes": [
                    "json.JSONEncoder"
                ]
            },
            "AgentStateManager": {
                "methods": [
                    "__init__",
                    "_init_state",
                    "_write_state_file",
                    "_write_tasks_file",
                    "_load_state",
                    "_load_tasks",
                    "validate_state",
                    "validate_tasks"
                ],
                "docstring": "Manages agent state with event hooks and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\resumer_v2\\quantum_agent_resumer.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "QuantumAgentResumer": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages agent state persistence and resumption.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\resumer_v2\\schemas.py": {
        "language": ".py",
        "functions": [
            "create_default_state"
        ],
        "classes": {
            "TaskData": {
                "methods": [],
                "docstring": "Schema for task data payload.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentState": {
                "methods": [],
                "docstring": "Schema for agent state.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\resumer_v2\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\security\\identity_utils.py": {
        "language": ".py",
        "functions": [
            "generate_agent_id",
            "validate_password",
            "hash_password",
            "verify_password",
            "generate_token",
            "format_agent_name"
        ],
        "classes": {
            "IdentityUtils": {
                "methods": [
                    "generate_agent_id",
                    "validate_password",
                    "hash_password",
                    "verify_password",
                    "generate_token",
                    "format_agent_name"
                ],
                "docstring": "Utility functions for identity management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\security\\security_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_default_config_path",
            "_load_config",
            "_validate_and_merge_config",
            "_save_config",
            "get_auth_config",
            "get_session_config",
            "get_identity_config",
            "update_config"
        ],
        "classes": {
            "SecurityConfig": {
                "methods": [
                    "__init__",
                    "_get_default_config_path",
                    "_load_config",
                    "_validate_and_merge_config",
                    "_save_config",
                    "get_auth_config",
                    "get_session_config",
                    "get_identity_config",
                    "update_config"
                ],
                "docstring": "Manages security-related configuration settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\security\\auth_manager.py": {
        "language": ".py",
        "functions": [
            "register_user",
            "authenticate",
            "validate_token",
            "get_user_info",
            "update_user_metadata",
            "assign_role",
            "remove_role",
            "save_users",
            "load_users",
            "is_locked_out",
            "record_failed_attempt",
            "__init__",
            "register_user",
            "authenticate",
            "validate_token",
            "get_user_info",
            "update_user_metadata",
            "assign_role",
            "remove_role",
            "is_locked_out",
            "record_failed_attempt",
            "save_users",
            "load_users"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "AuthManager": {
                "methods": [
                    "__init__",
                    "register_user",
                    "authenticate",
                    "validate_token",
                    "get_user_info",
                    "update_user_metadata",
                    "assign_role",
                    "remove_role",
                    "is_locked_out",
                    "record_failed_attempt",
                    "save_users",
                    "load_users"
                ],
                "docstring": "Manages authentication and authorization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "dreamos\\core\\security\\session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_start_cleanup_thread",
            "create_session",
            "validate_session",
            "get_session",
            "update_session_metadata",
            "invalidate_session",
            "cleanup_expired_sessions",
            "save_sessions",
            "load_sessions",
            "cleanup_loop"
        ],
        "classes": {
            "SessionError": {
                "methods": [],
                "docstring": "Base class for session management errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "_start_cleanup_thread",
                    "create_session",
                    "validate_session",
                    "get_session",
                    "update_session_metadata",
                    "invalidate_session",
                    "cleanup_expired_sessions",
                    "save_sessions",
                    "load_sessions"
                ],
                "docstring": "Manages user and agent sessions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dreamos\\core\\security\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\self_discovery\\journal.py": {
        "language": ".py",
        "functions": [
            "init_db",
            "calculate_relapse_risk",
            "add_entry",
            "log_coding_session",
            "get_today_stats",
            "__init__",
            "add_entry",
            "log_coding_session",
            "get_today_stats",
            "calculate_relapse_risk"
        ],
        "classes": {
            "Journal": {
                "methods": [
                    "__init__",
                    "add_entry",
                    "log_coding_session",
                    "get_today_stats",
                    "calculate_relapse_risk"
                ],
                "docstring": "Journal class for managing self-discovery entries.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\self_discovery\\prompts.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\self_discovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "save_coordinates",
            "get_coordinates",
            "set_coordinates",
            "__init__",
            "_initialize_monitors",
            "_load_config",
            "_transform_coordinates",
            "_transform_coordinate_dict",
            "validate_coordinates",
            "has_duplicate_coordinates",
            "check_region_overlap",
            "get_agent_coordinates",
            "get_response_region",
            "get",
            "get_all",
            "get_overlap",
            "has_coordinates",
            "get_coordinates",
            "set_coordinates",
            "_save_config"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "_initialize_monitors",
                    "_load_config",
                    "_transform_coordinates",
                    "_transform_coordinate_dict",
                    "validate_coordinates",
                    "has_duplicate_coordinates",
                    "check_region_overlap",
                    "get_agent_coordinates",
                    "get_response_region",
                    "get",
                    "get_all",
                    "get_overlap",
                    "has_coordinates",
                    "get_coordinates",
                    "set_coordinates",
                    "_save_config"
                ],
                "docstring": "Manages coordinates for UI automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "dreamos\\core\\shared\\coordinate_utils.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "validate_coordinates",
            "has_duplicate_coordinates",
            "regions_overlap",
            "region_overlap"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dreamos\\core\\shared\\persistent_queue.py": {
        "language": ".py",
        "functions": [
            "load_queue",
            "save_queue",
            "load_queue_file",
            "get_queue_size",
            "__init__",
            "_acquire_lock",
            "_release_lock",
            "_read_queue",
            "_write_queue",
            "_check_rate_limit",
            "get_queue_size",
            "get_message",
            "clear_queue",
            "enqueue",
            "put",
            "get",
            "get_status",
            "add_message",
            "clear_agent",
            "shutdown",
            "get_message_history",
            "clear_history",
            "set_test_mode"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_acquire_lock",
                    "_release_lock",
                    "_read_queue",
                    "_write_queue",
                    "_check_rate_limit",
                    "get_queue_size",
                    "get_message",
                    "clear_queue",
                    "enqueue",
                    "put",
                    "get",
                    "get_status",
                    "add_message",
                    "clear_agent",
                    "shutdown",
                    "get_message_history",
                    "clear_history",
                    "set_test_mode"
                ],
                "docstring": "A file-based persistent queue with file locking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 42
    },
    "dreamos\\core\\shared\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "enqueue",
            "dequeue",
            "peek"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "enqueue",
                    "dequeue",
                    "peek"
                ],
                "docstring": "Minimal placeholder \u2013 satisfies interface expected by tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\shared\\processors\\factory.py": {
        "language": ".py",
        "functions": [
            "register_processor",
            "create",
            "get_available_processors"
        ],
        "classes": {
            "ProcessorFactory": {
                "methods": [
                    "register_processor",
                    "create",
                    "get_available_processors"
                ],
                "docstring": "Factory for creating processor instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\shared\\processors\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_metrics",
            "__str__"
        ],
        "classes": {
            "BaseProcessor": {
                "methods": [
                    "__init__",
                    "get_metrics",
                    "__str__"
                ],
                "docstring": "Base class for all processors in the system.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\shared\\processors\\mode.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ProcessorMode": {
                "methods": [],
                "docstring": "Processor operation modes.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\processors\\message.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes and validates messages.",
                "base_classes": [
                    "BaseProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\shared\\processors\\response.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_metrics",
            "_update_metrics"
        ],
        "classes": {
            "ResponseProcessor": {
                "methods": [
                    "__init__",
                    "_init_metrics",
                    "_update_metrics"
                ],
                "docstring": "Processes and validates responses.",
                "base_classes": [
                    "BaseProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\shared\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\validation\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "validate",
            "add_error",
            "validate_with_metrics",
            "__init__",
            "validate",
            "_get_type"
        ],
        "classes": {
            "ValidationError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base exception for validation errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ValidationResult": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Result of a validation operation.",
                "base_classes": [
                    null
                ]
            },
            "BaseValidator": {
                "methods": [
                    "__init__",
                    "validate",
                    "add_error",
                    "validate_with_metrics"
                ],
                "docstring": "Base class for all validators in Dream.OS.",
                "base_classes": [
                    "ABC",
                    null
                ]
            },
            "SchemaValidator": {
                "methods": [
                    "__init__",
                    "validate",
                    "_get_type"
                ],
                "docstring": "Validator that uses a schema for validation.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\shared\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\tasks\\manager.py": {
        "language": ".py",
        "functions": [
            "create_task",
            "get_task",
            "update_task",
            "start_task",
            "complete_task",
            "cancel_task",
            "get_tasks",
            "__init__",
            "_load_tasks",
            "_save_tasks",
            "_dict_to_task",
            "_task_to_dict",
            "create_task",
            "get_task",
            "update_task",
            "start_task",
            "complete_task",
            "cancel_task",
            "get_tasks"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": "Status of a task.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskPriority": {
                "methods": [],
                "docstring": "Priority of a task.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskCategory": {
                "methods": [],
                "docstring": "Category of a task.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task in the system.",
                "base_classes": []
            },
            "TaskManager": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_save_tasks",
                    "_dict_to_task",
                    "_task_to_dict",
                    "create_task",
                    "get_task",
                    "update_task",
                    "start_task",
                    "complete_task",
                    "cancel_task",
                    "get_tasks"
                ],
                "docstring": "Manages tasks across the project.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "dreamos\\core\\telemetry\\ws_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "send",
            "run_client"
        ],
        "classes": {
            "WSClient": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "send"
                ],
                "docstring": "WebSocket client for receiving telemetry updates.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\telemetry\\ws_server.py": {
        "language": ".py",
        "functions": [
            "start_server",
            "__init__"
        ],
        "classes": {
            "TelemetryServer": {
                "methods": [
                    "__init__"
                ],
                "docstring": "WebSocket server for broadcasting agent telemetry.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "dreamos\\core\\telemetry\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\ui\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "show",
            "_boolean",
            "_noop",
            "__init__"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "show"
                ],
                "docstring": "Minimal stand-in for the historical Qt main window.",
                "base_classes": []
            },
            "AgentDashboard": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\utils\\agent_helpers.py": {
        "language": ".py",
        "functions": [
            "load_agent_ownership",
            "determine_responsible_agent",
            "validate_agent_id",
            "build_agent_message",
            "parse_test_failures",
            "get_test_files",
            "get_agent_status",
            "validate_agent_config",
            "get_agent_status",
            "validate_agent_config"
        ],
        "classes": {
            "AgentError": {
                "methods": [],
                "docstring": "Stub for AgentError exception.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\utils\\agent_status.py": {
        "language": ".py",
        "functions": [
            "_ensure_status_file",
            "__init__",
            "_ensure_status_file"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [
                    "__init__",
                    "_ensure_status_file"
                ],
                "docstring": "Manages agent status tracking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "dreamos\\core\\utils\\core_utils.py": {
        "language": ".py",
        "functions": [
            "add_error",
            "async_retry",
            "with_retry",
            "track_operation",
            "format_message",
            "parse_message",
            "get_timestamp",
            "format_duration",
            "is_valid_uuid",
            "get_errors",
            "clear_errors",
            "decorator",
            "safe_move",
            "format_timestamp",
            "generate_id",
            "read_yaml",
            "write_yaml",
            "atomic_write",
            "load_json",
            "save_json",
            "read_json",
            "write_json",
            "ensure_directory_exists",
            "load_yaml",
            "transform_coordinates",
            "__init__",
            "add_error",
            "get_errors",
            "clear_errors",
            "decorator",
            "decorator",
            "decorator",
            "wrapped",
            "wrapper"
        ],
        "classes": {
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "add_error",
                    "get_errors",
                    "clear_errors"
                ],
                "docstring": "Track errors with context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "dreamos\\core\\utils\\exceptions.py": {
        "language": ".py",
        "functions": [
            "handle_error",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "counter",
            "__init__",
            "labels",
            "inc"
        ],
        "classes": {
            "DreamOSError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base exception class for Dream.OS.",
                "base_classes": [
                    "Exception"
                ]
            },
            "FileOpsError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "File operations error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "FileOpsPermissionError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "File permission error.",
                "base_classes": [
                    "FileOpsError"
                ]
            },
            "FileOpsIOError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "File I/O error.",
                "base_classes": [
                    "FileOpsError"
                ]
            },
            "ConfigError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "MessageError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Message processing error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ValidationError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Data validation error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ResourceError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Resource management error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "TimeoutError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Operation timeout error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "BridgeError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Bridge integration error.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "_MetricsStub": {
                "methods": [
                    "counter"
                ],
                "docstring": "Minimal stub to satisfy metrics calls when prom client is absent.",
                "base_classes": []
            },
            "_Counter": {
                "methods": [
                    "__init__",
                    "labels",
                    "inc"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 29
    },
    "dreamos\\core\\utils\\file_ops.py": {
        "language": ".py",
        "functions": [
            "safe_mkdir",
            "ensure_dir",
            "clear_dir",
            "archive_file",
            "extract_agent_id",
            "backup_file",
            "safe_rmdir",
            "read_json",
            "write_json",
            "read_text",
            "write_text",
            "copy_file",
            "safe_delete",
            "__init__"
        ],
        "classes": {
            "FileManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified file manager with atomic operations, backup support, and metrics.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\utils\\json_utils.py": {
        "language": ".py",
        "functions": [
            "validate_json",
            "load_json",
            "save_json",
            "read_json",
            "write_json",
            "__init__"
        ],
        "classes": {
            "JsonValidationError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Raised when JSON validation fails.",
                "base_classes": [
                    "DreamOSError"
                ]
            }
        },
        "routes": [],
        "complexity": 7
    },
    "dreamos\\core\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json",
            "ensure_dir",
            "safe_rmdir",
            "get_file_info",
            "restore_backup",
            "find_files",
            "rotate_file"
        ],
        "classes": {
            "FileError": {
                "methods": [],
                "docstring": "Stub for FileError exception.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\utils\\message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes and routes messages between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\utils\\metrics.py": {
        "language": ".py",
        "functions": [
            "log_operation",
            "__init__",
            "counter",
            "gauge",
            "histogram",
            "summary",
            "__init__",
            "_log",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "exception",
            "decorator"
        ],
        "classes": {
            "MetricsManager": {
                "methods": [
                    "__init__",
                    "counter",
                    "gauge",
                    "histogram",
                    "summary"
                ],
                "docstring": "Centralized metrics management with Prometheus integration.",
                "base_classes": []
            },
            "LogManager": {
                "methods": [
                    "__init__",
                    "_log",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "exception"
                ],
                "docstring": "Centralized logging management with structured logging.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "configure_logging",
            "get_logger",
            "log_platform_event",
            "setup_logging",
            "get_events",
            "clear_events",
            "update_status",
            "get_status",
            "reset_status",
            "__init__",
            "log_event",
            "get_events",
            "clear_events",
            "__init__",
            "update_status",
            "get_status",
            "reset_status"
        ],
        "classes": {
            "PlatformEventLogger": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_events",
                    "clear_events"
                ],
                "docstring": "Log platform events with structured data.",
                "base_classes": []
            },
            "StatusTracker": {
                "methods": [
                    "__init__",
                    "update_status",
                    "get_status",
                    "reset_status"
                ],
                "docstring": "Track platform operation status.",
                "base_classes": []
            },
            "LogConfig": {
                "methods": [],
                "docstring": "Stub for LogConfig class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\utils\\metrics_utils.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "labels",
            "inc",
            "log_event"
        ],
        "classes": {
            "Counter": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "labels",
                    "inc",
                    "log_event"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\utils\\region_finder.py": {
        "language": ".py",
        "functions": [
            "find_cursor_regions",
            "find_region",
            "get_region_center",
            "_load_regions",
            "_save_regions",
            "start_finding",
            "_set_start",
            "_set_end",
            "_quit",
            "get_region",
            "__init__",
            "_load_regions",
            "_save_regions",
            "start_finding",
            "_set_start",
            "_set_end",
            "_quit",
            "get_region"
        ],
        "classes": {
            "RegionError": {
                "methods": [],
                "docstring": "Stub exception for region finding errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "RegionFinder": {
                "methods": [
                    "__init__",
                    "_load_regions",
                    "_save_regions",
                    "start_finding",
                    "_set_start",
                    "_set_end",
                    "_quit",
                    "get_region"
                ],
                "docstring": "Helps find screen coordinates for UI regions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\utils\\retry.py": {
        "language": ".py",
        "functions": [
            "with_retry",
            "decorator",
            "wrapper",
            "with_retry",
            "decorator",
            "wrapper",
            "wrapped",
            "decorator",
            "wrapper",
            "wrapped"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\utils\\safe_io.py": {
        "language": ".py",
        "functions": [
            "safe_file_handle",
            "atomic_write",
            "safe_read",
            "safe_write"
        ],
        "classes": {
            "SafeIOError": {
                "methods": [],
                "docstring": "Legacy safe I/O error for compatibility.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\utils\\serialization.py": {
        "language": ".py",
        "functions": [
            "serialize",
            "deserialize",
            "load_json",
            "save_json",
            "read_json",
            "write_json",
            "restore_backup",
            "read_yaml",
            "load_yaml",
            "write_yaml",
            "save_yaml"
        ],
        "classes": {
            "SerializationError": {
                "methods": [],
                "docstring": "Raised when serialization fails.",
                "base_classes": [
                    "FileOpsError"
                ]
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\utils\\system_ops.py": {
        "language": ".py",
        "functions": [
            "with_retry",
            "transform_coordinates",
            "normalize_coordinates",
            "get_system_info",
            "decorator",
            "decorator",
            "wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "dreamos\\core\\utils\\yaml_utils.py": {
        "language": ".py",
        "functions": [
            "read_yaml",
            "load_yaml",
            "write_yaml",
            "save_yaml",
            "validate_yaml",
            "__init__",
            "validate_file",
            "validate"
        ],
        "classes": {
            "YamlError": {
                "methods": [],
                "docstring": "Exception raised for YAML-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "YAMLValidator": {
                "methods": [
                    "__init__",
                    "validate_file",
                    "validate"
                ],
                "docstring": "Validator for YAML files.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\verification\\scanner.py": {
        "language": ".py",
        "functions": [
            "_normalise",
            "_strip",
            "summary",
            "format_full_report",
            "__init__",
            "_add",
            "visit_FunctionDef",
            "__init__",
            "summary",
            "format_full_report",
            "__init__",
            "visit_FunctionDef",
            "__init__"
        ],
        "classes": {
            "ScanResults": {
                "methods": [
                    "summary",
                    "format_full_report"
                ],
                "docstring": null,
                "base_classes": []
            },
            "_FunctionCollector": {
                "methods": [
                    "__init__",
                    "_add",
                    "visit_FunctionDef"
                ],
                "docstring": "Extract *all* function definitions (incl. nested) from a source file.",
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            },
            "Scanner": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "_FuncCollector": {
                "methods": [
                    "__init__",
                    "visit_FunctionDef"
                ],
                "docstring": null,
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dreamos\\core\\verification\\scanner_cli.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\verification\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\verification\\verify_beta.py": {
        "language": ".py",
        "functions": [
            "main",
            "__post_init__",
            "to_dict",
            "__init__",
            "_setup_logging",
            "check_mailboxes",
            "check_required_docs",
            "check_unit_tests",
            "check_orphans_and_dupes",
            "check_agent_state_files",
            "check_backlog_and_episodes",
            "check_autonomy_loop",
            "check_discord_commander",
            "check_discord_devlog",
            "check_social_integrations",
            "check_resumer",
            "check_onboarder",
            "check_chatgpt_bridge",
            "check_system_initialization",
            "check_autonomy_system",
            "check_runtime_directories",
            "check_test_coverage",
            "check_security_config",
            "check_monitoring_system",
            "check_error_handling",
            "check_coordinate_system",
            "check_cursor_agent_bridge",
            "check_agent_recovery",
            "check_response_collection",
            "_categorize_check",
            "_determine_severity",
            "_generate_recommendations",
            "run_verification",
            "generate_report"
        ],
        "classes": {
            "CheckResult": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Result of a verification check.",
                "base_classes": []
            },
            "BetaVerifier": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "check_mailboxes",
                    "check_required_docs",
                    "check_unit_tests",
                    "check_orphans_and_dupes",
                    "check_agent_state_files",
                    "check_backlog_and_episodes",
                    "check_autonomy_loop",
                    "check_discord_commander",
                    "check_discord_devlog",
                    "check_social_integrations",
                    "check_resumer",
                    "check_onboarder",
                    "check_chatgpt_bridge",
                    "check_system_initialization",
                    "check_autonomy_system",
                    "check_runtime_directories",
                    "check_test_coverage",
                    "check_security_config",
                    "check_monitoring_system",
                    "check_error_handling",
                    "check_coordinate_system",
                    "check_cursor_agent_bridge",
                    "check_agent_recovery",
                    "check_response_collection",
                    "_categorize_check",
                    "_determine_severity",
                    "_generate_recommendations",
                    "run_verification",
                    "generate_report"
                ],
                "docstring": "Dream.OS Beta Deployment Validator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 67
    },
    "dreamos\\discord\\devlog_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_infer_webhook"
        ],
        "classes": {
            "DiscordDevlog": {
                "methods": [
                    "__init__",
                    "_infer_webhook"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\discord\\client.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\discord\\webhooks.py": {
        "language": ".py",
        "functions": [
            "load_webhook_mapping",
            "validate_webhook_mapping"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\discord\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\gui\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_menu",
            "_show_about",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "_setup_menu",
                    "_show_about",
                    "closeEvent"
                ],
                "docstring": "Main application window.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\gui\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\gui\\components\\agent_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "__init__",
            "_setup_ui",
            "paintEvent",
            "__init__",
            "_setup_ui",
            "_wire",
            "_toggle_batch_mode",
            "_choose_episode",
            "_collect_options",
            "_begin_onboard",
            "_update_progress",
            "_update_stage",
            "_on_worker_finished",
            "_on_live_status",
            "closeEvent",
            "__init__",
            "_setup_ui",
            "refresh_agents",
            "_show_devlog",
            "_force_resume",
            "_onboard_agent",
            "_show_context_menu",
            "_show_devlog_modal",
            "_force_resume_agent",
            "_clear_agent_errors",
            "closeEvent"
        ],
        "classes": {
            "OnboardingOptions": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "_OnboardWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "QObject"
                ]
            },
            "GlassDialog": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "paintEvent"
                ],
                "docstring": "Frameless dialog with glass effect.",
                "base_classes": [
                    "QDialog"
                ]
            },
            "OnboardingDialog": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "_wire",
                    "_toggle_batch_mode",
                    "_choose_episode",
                    "_collect_options",
                    "_begin_onboard",
                    "_update_progress",
                    "_update_stage",
                    "_on_worker_finished",
                    "_on_live_status",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "GlassDialog"
                ]
            },
            "AgentMonitor": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "refresh_agents",
                    "_show_devlog",
                    "_force_resume",
                    "_onboard_agent",
                    "_show_context_menu",
                    "_show_devlog_modal",
                    "_force_resume_agent",
                    "_clear_agent_errors",
                    "closeEvent"
                ],
                "docstring": "GUI component for monitoring and controlling agents.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "dreamos\\logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\gui\\components\\log_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "refresh_logs",
            "clear_logs",
            "_show_details",
            "closeEvent"
        ],
        "classes": {
            "LogMonitor": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "refresh_logs",
                    "clear_logs",
                    "_show_details",
                    "closeEvent"
                ],
                "docstring": "GUI component for monitoring and displaying logs.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\gui\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\metrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\discord_webhooks.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\devlog_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_modified",
            "__init__",
            "_load_platforms",
            "_load_post_log",
            "_save_post_log",
            "_compute_hash",
            "_format_devlog_content",
            "process_devlog",
            "start_watching",
            "cleanup"
        ],
        "classes": {
            "DevlogEvent": {
                "methods": [
                    "__init__",
                    "on_modified"
                ],
                "docstring": "Handles devlog file system events.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "DevlogDispatcher": {
                "methods": [
                    "__init__",
                    "_load_platforms",
                    "_load_post_log",
                    "_save_post_log",
                    "_compute_hash",
                    "_format_devlog_content",
                    "process_devlog",
                    "start_watching",
                    "cleanup"
                ],
                "docstring": "Dispatches devlog updates to social media platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\social\\platform_login.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_load_credentials",
            "get_driver",
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login",
            "login",
            "login_linkedin",
            "login_twitter",
            "login_facebook",
            "is_instagram_logged_in",
            "login_instagram",
            "login_reddit",
            "login_stocktwits",
            "run_all_logins",
            "cleanup",
            "fb_logged_in",
            "is_logged_in"
        ],
        "classes": {
            "LoginResult": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Result of a login attempt.",
                "base_classes": []
            },
            "PlatformLoginManager": {
                "methods": [
                    "__init__",
                    "_load_credentials",
                    "get_driver",
                    "load_cookies",
                    "save_cookies",
                    "wait_for_manual_login",
                    "login",
                    "login_linkedin",
                    "login_twitter",
                    "login_facebook",
                    "is_instagram_logged_in",
                    "login_instagram",
                    "login_reddit",
                    "login_stocktwits",
                    "run_all_logins",
                    "cleanup"
                ],
                "docstring": "Manages social media platform logins with persistent sessions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "dreamos\\social\\platform_poster.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_selectors",
            "_parse_selector_markdown",
            "_request_selector",
            "_get_selector",
            "_wait_for_element",
            "_ensure_logged_in",
            "post",
            "_post_to_twitter",
            "_post_to_reddit",
            "cleanup"
        ],
        "classes": {
            "SelectorError": {
                "methods": [],
                "docstring": "Raised when a selector fails to find an element.",
                "base_classes": [
                    "Exception"
                ]
            },
            "PlatformPoster": {
                "methods": [
                    "__init__",
                    "_load_selectors",
                    "_parse_selector_markdown",
                    "_request_selector",
                    "_get_selector",
                    "_wait_for_element",
                    "_ensure_logged_in",
                    "post",
                    "_post_to_twitter",
                    "_post_to_reddit",
                    "cleanup"
                ],
                "docstring": "Handles posting to social media platforms using browser automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\social\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_refill",
            "acquire",
            "get_tokens",
            "__init__",
            "_load_state",
            "_save_state",
            "can_post",
            "get_wait_time",
            "get_platform_stats"
        ],
        "classes": {
            "RateLimitConfig": {
                "methods": [],
                "docstring": "Configuration for platform rate limits.",
                "base_classes": []
            },
            "RateLimitState": {
                "methods": [],
                "docstring": "Current state of rate limiting.",
                "base_classes": []
            },
            "TokenBucket": {
                "methods": [
                    "__init__",
                    "_refill",
                    "acquire",
                    "get_tokens"
                ],
                "docstring": "Token bucket rate limiter implementation.",
                "base_classes": []
            },
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "can_post",
                    "get_wait_time",
                    "get_platform_stats"
                ],
                "docstring": "Manages rate limits for multiple social media platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\social\\social_formatter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_templates",
            "_wrap",
            "_splice",
            "_format_links",
            "_format_hashtags",
            "_format_mentions",
            "_format_emojis",
            "_truncate_text",
            "_format_dream_core",
            "format_post",
            "format_title"
        ],
        "classes": {
            "SocialFormatter": {
                "methods": [
                    "__init__",
                    "_load_templates",
                    "_wrap",
                    "_splice",
                    "_format_links",
                    "_format_hashtags",
                    "_format_mentions",
                    "_format_emojis",
                    "_truncate_text",
                    "_format_dream_core",
                    "format_post",
                    "format_title"
                ],
                "docstring": "Formats content for different social media platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\constants\\platform_constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\config\\social_config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\strategies\\platform_strategy_base.py": {
        "language": ".py",
        "functions": [
            "retry_with_recovery",
            "decorator",
            "__init__",
            "_calculate_retry_delay",
            "_log_error_with_trace",
            "_track_operation_time",
            "_update_memory",
            "_log_action",
            "_handle_media_upload",
            "_validate_media",
            "_upload_media",
            "get_memory_updates",
            "get_operation_stats",
            "is_logged_in",
            "login",
            "post",
            "create_post",
            "_create_post_impl",
            "_find_element",
            "_click_element",
            "_send_keys",
            "initialize",
            "wrapper"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "_calculate_retry_delay",
                    "_log_error_with_trace",
                    "_track_operation_time",
                    "_update_memory",
                    "_log_action",
                    "_handle_media_upload",
                    "_validate_media",
                    "_upload_media",
                    "get_memory_updates",
                    "get_operation_stats",
                    "is_logged_in",
                    "login",
                    "post",
                    "create_post",
                    "_create_post_impl",
                    "_find_element",
                    "_click_element",
                    "_send_keys",
                    "initialize"
                ],
                "docstring": "Base class for all social media platform strategies.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 43
    },
    "dreamos\\social\\constants\\__init__.py": {
        "language": ".py",
        "functions": [
            "__getattr__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\social\\utils\\base.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BaseUtils": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base utilities for social media operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\base_log_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Standard log levels for consistent logging across the application.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\cleanup.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_is_file_locked",
            "_force_close_handle",
            "_wait_for_file_unlock",
            "safe_remove",
            "cleanup_directory",
            "cleanup_temp_files"
        ],
        "classes": {
            "FileCleanup": {
                "methods": [
                    "__init__",
                    "_is_file_locked",
                    "_force_close_handle",
                    "_wait_for_file_unlock",
                    "safe_remove",
                    "cleanup_directory",
                    "cleanup_temp_files"
                ],
                "docstring": "Handles safe file cleanup with proper lock handling.",
                "base_classes": [
                    "BaseUtils"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\social\\utils\\file_locks.py": {
        "language": ".py",
        "functions": [
            "get_file_lock",
            "ensure_log_dir",
            "lock_context"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\social\\utils\\json_settings.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__getattr__",
            "__iter__",
            "items",
            "values",
            "__getitem__",
            "as_dict",
            "__init__",
            "reload",
            "convert"
        ],
        "classes": {
            "ConfigNode": {
                "methods": [
                    "__post_init__",
                    "__getattr__",
                    "__iter__",
                    "items",
                    "values",
                    "__getitem__",
                    "as_dict"
                ],
                "docstring": "Data holder that provides attribute access like a dotmap.",
                "base_classes": []
            },
            "JSONConfig": {
                "methods": [
                    "__init__",
                    "reload"
                ],
                "docstring": "Load configuration from a JSON file.",
                "base_classes": [
                    "ConfigNode"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\social\\utils\\log_cleanup.py": {
        "language": ".py",
        "functions": [
            "cleanup_old_logs",
            "rotate_log",
            "compress_old_logs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\social\\utils\\log_batcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_batch_size",
            "is_running"
        ],
        "classes": {
            "LogBatcher": {
                "methods": [
                    "__init__",
                    "get_batch_size",
                    "is_running"
                ],
                "docstring": "Handles batched logging operations for efficiency.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\social\\utils\\log_entry.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict",
            "_asdict",
            "__eq__",
            "__hash__",
            "__str__"
        ],
        "classes": {
            "LogEntry": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict",
                    "_asdict",
                    "__eq__",
                    "__hash__",
                    "__str__"
                ],
                "docstring": "Represents a log entry.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\social\\utils\\log_config.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "max_bytes",
            "file_path",
            "__eq__"
        ],
        "classes": {
            "LogConfig": {
                "methods": [
                    "__post_init__",
                    "max_bytes",
                    "file_path",
                    "__eq__"
                ],
                "docstring": "Configuration for log files and settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\social\\utils\\log_level.py": {
        "language": ".py",
        "functions": [
            "from_str",
            "__str__",
            "value"
        ],
        "classes": {
            "LogLevel": {
                "methods": [
                    "from_str",
                    "__str__",
                    "value"
                ],
                "docstring": "Logging levels for the system.\n\nAttributes:\n    DEBUG: Detailed information for debugging\n    INFO: General information about program execution\n    WARNING: Indicates a potential problem\n    ERROR: A more serious problem\n    CRITICAL: A critical problem that may prevent the program from running",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\social\\utils\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "_setup_logging",
            "logger",
            "write_log",
            "_update_metrics",
            "get_metrics",
            "read_logs",
            "cleanup",
            "__del__",
            "set_level",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "rotate"
        ],
        "classes": {
            "LogEntry": {
                "methods": [],
                "docstring": "Represents a log entry.",
                "base_classes": []
            },
            "LogManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_setup_logging",
                    "logger",
                    "write_log",
                    "_update_metrics",
                    "get_metrics",
                    "read_logs",
                    "cleanup",
                    "__del__",
                    "set_level",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "rotate"
                ],
                "docstring": "Manages logging for social media operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "dreamos\\social\\utils\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment_logs",
            "increment_errors",
            "increment_warnings",
            "get_metrics"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "increment_logs",
                    "increment_errors",
                    "increment_warnings",
                    "get_metrics"
                ],
                "docstring": "Tracks metrics for logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\social\\utils\\log_types.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RotationConfig": {
                "methods": [],
                "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\log_rotator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "max_bytes",
            "check_rotation",
            "_rotate_file",
            "rotate_all",
            "_cleanup_old_backups",
            "get_rotation_info",
            "_get_file_size",
            "_get_file_age",
            "rotate"
        ],
        "classes": {
            "LogRotator": {
                "methods": [
                    "__init__",
                    "max_bytes",
                    "check_rotation",
                    "_rotate_file",
                    "rotate_all",
                    "_cleanup_old_backups",
                    "get_rotation_info",
                    "_get_file_size",
                    "_get_file_age",
                    "rotate"
                ],
                "docstring": "Handles log file rotation and compression.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\social\\utils\\log_pipeline.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_entry",
            "flush",
            "start",
            "stop",
            "_flush_thread_func",
            "get_log_info",
            "read_logs",
            "cleanup_old_logs",
            "_cleanup_all_locks",
            "__del__"
        ],
        "classes": {
            "LogPipeline": {
                "methods": [
                    "__init__",
                    "add_entry",
                    "flush",
                    "start",
                    "stop",
                    "_flush_thread_func",
                    "get_log_info",
                    "read_logs",
                    "cleanup_old_logs",
                    "_cleanup_all_locks",
                    "__del__"
                ],
                "docstring": "Handles batched log entry processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\social\\utils\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_files",
            "validate",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_files",
                    "validate",
                    "validate_media"
                ],
                "docstring": "Validates media files for upload.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\social\\utils\\log_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "write_log",
            "get_metrics",
            "get_summary",
            "clear_metrics"
        ],
        "classes": {
            "LogWriter": {
                "methods": [
                    "__init__",
                    "write_log",
                    "get_metrics",
                    "get_summary",
                    "clear_metrics"
                ],
                "docstring": "Handles writing logs to files with proper locking and metrics tracking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\social\\utils\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_rate_limit",
            "set_rate_limit",
            "reset_limits",
            "get_remaining"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_rate_limit",
                    "set_rate_limit",
                    "reset_limits",
                    "get_remaining"
                ],
                "docstring": "Handles rate limiting for API operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\social\\utils\\social_common.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__init__",
            "wait_for_element",
            "wait_for_clickable",
            "retry_click",
            "handle_login",
            "post_content",
            "verify_post_success",
            "validate_media",
            "upload_media"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Configuration for social media operations.",
                "base_classes": []
            },
            "SocialMediaUtils": {
                "methods": [
                    "__init__",
                    "wait_for_element",
                    "wait_for_clickable",
                    "retry_click",
                    "handle_login",
                    "post_content",
                    "verify_post_success",
                    "validate_media",
                    "upload_media"
                ],
                "docstring": "Common utilities for social media operations.",
                "base_classes": [
                    "BaseUtils"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\tasks\\refactor_ui.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\utils\\discord_client.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos.egg-info\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "examples\\messaging_example.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "prompts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\agent_memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\agent_memory\\invalid_agent\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\bridge_inbox\\cursor_chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "safe_read_json",
            "safe_write_json",
            "setup_temp_profile",
            "launch_chatgpt_browser",
            "send_prompt_and_get_response",
            "focus_cursor_window",
            "paste_into_cursor",
            "ensure_bridge_inbox",
            "main_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "runtime\\bridge_inbox\\chatgpt_client.py": {
        "language": ".py",
        "functions": [
            "request_chatgpt",
            "get_pending_count",
            "clear_pending_requests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "runtime\\bridge_inbox\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chat_logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\AmountExtractionHeuristicRegexes\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\AutofillStates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\BrowserMetrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\CertificateRevocation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\CertificateRevocation\\9837\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\CertificateRevocation\\9837\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\component_crx_cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\CookieReadinessList\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Crashpad\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Crashpad\\attachments\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Crashpad\\reports\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Crowd Deny\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\AutofillStrikeDatabase\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\blob_storage\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\blob_storage\\2a1e2f4e-0aed-425f-a825-7ed309171136\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\BudgetDatabase\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Cache\\Cache_Data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\chrome_cart_db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\ClientCertificates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Code Cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Code Cache\\js\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Code Cache\\js\\index-dir\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Code Cache\\wasm\\index-dir\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Code Cache\\wasm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\commerce_subscription_db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\DawnGraphiteCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\DawnWebGPUCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\discounts_db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Download Service\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Download Service\\EntryDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Download Service\\Files\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Extension Scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Extension Rules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Extension State\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Feature Engagement Tracker\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Feature Engagement Tracker\\AvailabilityDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Feature Engagement Tracker\\EventDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\GCM Store\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\GCM Store\\Encryption\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Local Storage\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\GPUCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Local Storage\\leveldb\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Network\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\parcel_tracking_db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\PersistentOriginTrials\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\optimization_guide_hint_cache_store\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Safe Browsing Network\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Segmentation Platform\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Segmentation Platform\\SegmentInfoDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Segmentation Platform\\SignalStorageConfigDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Segmentation Platform\\SignalDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Session Storage\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Sessions\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Shared Dictionary\\cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Shared Dictionary\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\shared_proto_db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Shared Dictionary\\cache\\index-dir\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\shared_proto_db\\metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Sync Data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Site Characteristics Database\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Sync Data\\LevelDB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\aghbiahbpaijignceidepookljebhfak\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\aghbiahbpaijignceidepookljebhfak\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\aghbiahbpaijignceidepookljebhfak\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\aghbiahbpaijignceidepookljebhfak\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\agimnkijcaahngcdmfeangaknmldooml\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\agimnkijcaahngcdmfeangaknmldooml\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\agimnkijcaahngcdmfeangaknmldooml\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\agimnkijcaahngcdmfeangaknmldooml\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fhihpiojkbmbpdjeoajapmgkhlnakfjf\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fhihpiojkbmbpdjeoajapmgkhlnakfjf\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fhihpiojkbmbpdjeoajapmgkhlnakfjf\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fmgjjmmmlfnkbppncabfkddbjimcfncm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fhihpiojkbmbpdjeoajapmgkhlnakfjf\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fmgjjmmmlfnkbppncabfkddbjimcfncm\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fmgjjmmmlfnkbppncabfkddbjimcfncm\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\fmgjjmmmlfnkbppncabfkddbjimcfncm\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\kefjledonklijopmnomlcbpllchaibag\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\kefjledonklijopmnomlcbpllchaibag\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\kefjledonklijopmnomlcbpllchaibag\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\kefjledonklijopmnomlcbpllchaibag\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mdpkiolbdkhdjpekfbkbmhigcaggjagi\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mdpkiolbdkhdjpekfbkbmhigcaggjagi\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mdpkiolbdkhdjpekfbkbmhigcaggjagi\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mdpkiolbdkhdjpekfbkbmhigcaggjagi\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mpnpojknpmmopombnjdcgaaiekajbnjb\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mpnpojknpmmopombnjdcgaaiekajbnjb\\Icons\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mpnpojknpmmopombnjdcgaaiekajbnjb\\Icons Maskable\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Manifest Resources\\mpnpojknpmmopombnjdcgaaiekajbnjb\\Icons Monochrome\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\WebStorage\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Default\\Web Applications\\Temp\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\extensions_crx_cache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\FileTypePolicies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\FileTypePolicies\\67\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\FileTypePolicies\\67\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\FirstPartySetsPreloaded\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\GraphiteDawnCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\GrShaderCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\hyphen-data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\MEIPreload\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OnDeviceHeadSuggestModel\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OnDeviceHeadSuggestModel\\20250522.762470205.14\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OnDeviceHeadSuggestModel\\20250522.762470205.14\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OpenCookieDatabase\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OptimizationHints\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OptimizationHints\\512\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OptimizationHints\\512\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\13\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\13\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\13\\E6DC4029A1E4B4C1\\F1A0EA9692278A27\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\15\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\15\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\15\\E6DC4029A1E4B4C1\\AF81E9573E124C89\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\2\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\2\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\2\\E6DC4029A1E4B4C1\\FC22CFA20C0CC845\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\20\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\20\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\20\\E6DC4029A1E4B4C1\\863C1570CE468BDD\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\24\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\24\\E6DC4029A1E4B4C1\\2E2BD725B10071B8\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\24\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\25\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\25\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\25\\E6DC4029A1E4B4C1\\0BA12B859709E2BB\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\26\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\26\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\26\\E6DC4029A1E4B4C1\\0044AA1E334FD516\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\45\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\45\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\45\\E6DC4029A1E4B4C1\\F009D467DC289225\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\9\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\9\\E6DC4029A1E4B4C1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OriginTrials\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\optimization_guide_model_store\\9\\E6DC4029A1E4B4C1\\95F9E9BE5558C11A\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OriginTrials\\1.0.0.17\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\OriginTrials\\1.0.0.17\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\PKIMetadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\ProbabilisticRevealTokenRegistry\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\RecoveryImproved\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Safe Browsing\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\SafetyTips\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\segmentation_platform\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\SSLErrorAssistant\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\ShaderCache\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\SSLErrorAssistant\\7\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\SSLErrorAssistant\\7\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Indexed Rules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Indexed Rules\\36\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Indexed Rules\\36\\9.56.0\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Unindexed Rules\\9.56.0\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Unindexed Rules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\Subresource Filter\\Unindexed Rules\\9.56.0\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\ThirdPartyModuleList64\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\TpcdMetadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\TrustTokenKeyCommitments\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\TrustTokenKeyCommitments\\2025.5.15.1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\TrustTokenKeyCommitments\\2025.5.15.1\\_metadata\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\WidevineCdm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\chrome_user_data\\ZxcvbnData\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\cookies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\debug_logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\devlog\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\devlog\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\devlog\\agents\\agent-4\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\discord_outbox\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\logs\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\logs\\data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\planning\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\planning\\odyssey\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\prompts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\queue\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\scanner\\codex_failures\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\sessions\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\analyze_dirs.py": {
        "language": ".py",
        "functions": [
            "analyze_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\migrate_auth_to_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_environment",
            "create_backup",
            "find_import_references",
            "update_imports",
            "migrate_files",
            "validate_migration",
            "cleanup",
            "generate_report",
            "run"
        ],
        "classes": {
            "AuthMigration": {
                "methods": [
                    "__init__",
                    "validate_environment",
                    "create_backup",
                    "find_import_references",
                    "update_imports",
                    "migrate_files",
                    "validate_migration",
                    "cleanup",
                    "generate_report",
                    "run"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "scripts\\migrate_bridge_config.py": {
        "language": ".py",
        "functions": [
            "load_old_config",
            "migrate_config",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\prune_dead_files.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_build_impl_cache",
            "_is_empty_test",
            "_is_critical_test",
            "_find_duplicates",
            "_check_fixtures",
            "analyze",
            "_save_analysis",
            "_print_summary",
            "cleanup"
        ],
        "classes": {
            "TestPruner": {
                "methods": [
                    "__init__",
                    "_build_impl_cache",
                    "_is_empty_test",
                    "_is_critical_test",
                    "_find_duplicates",
                    "_check_fixtures",
                    "analyze",
                    "_save_analysis",
                    "_print_summary",
                    "cleanup"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "scripts\\run_overnight.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\run_scanner.py": {
        "language": ".py",
        "functions": [
            "progress_callback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\analyze_restructure.py": {
        "language": ".py",
        "functions": [
            "load_move_map",
            "analyze_structure",
            "analyze_directory",
            "generate_tree",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools\\autopitch_machine.py": {
        "language": ".py",
        "functions": [
            "parse_devlog",
            "create_visual",
            "send_to_discord"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\calibrate_coordinates.py": {
        "language": ".py",
        "functions": [
            "get_mouse_position",
            "calibrate_agent",
            "calibrate_multiple_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\check_cursor_coords.py": {
        "language": ".py",
        "functions": [
            "on_click",
            "on_press"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\create_minimal_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\daily_trigger.py": {
        "language": ".py",
        "functions": [
            "send_notification",
            "check_activities",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\odyssey_generator.py": {
        "language": ".py",
        "functions": [
            "_extract_identity",
            "generate_odyssey",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\life_os_dashboard.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\layout_snapshot.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_screen_info",
            "_compute_hash",
            "create_snapshot",
            "_save_snapshot",
            "load_snapshot",
            "list_snapshots",
            "compare_snapshots"
        ],
        "classes": {
            "LayoutSnapshot": {
                "methods": [],
                "docstring": "Represents a snapshot of agent layouts.",
                "base_classes": []
            },
            "LayoutSnapshotManager": {
                "methods": [
                    "__init__",
                    "_get_screen_info",
                    "_compute_hash",
                    "create_snapshot",
                    "_save_snapshot",
                    "load_snapshot",
                    "list_snapshots",
                    "compare_snapshots"
                ],
                "docstring": "Manages layout snapshots.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\odyssey_board.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "dragEnterEvent",
            "dragMoveEvent",
            "dropEvent",
            "__init__",
            "_build_tabs",
            "closeEvent",
            "_persist_board"
        ],
        "classes": {
            "KanbanColumn": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dragMoveEvent",
                    "dropEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QListWidget"
                ]
            },
            "OdysseyBoard": {
                "methods": [
                    "__init__",
                    "_build_tabs",
                    "closeEvent",
                    "_persist_board"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\prepare_release.py": {
        "language": ".py",
        "functions": [
            "generate_changelog",
            "prepare_release"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\pygetwindow.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\pyautogui.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\recalibrate_coords.py": {
        "language": ".py",
        "functions": [
            "get_window_info",
            "capture_point",
            "validate_unique_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\restructure_agent_tools.py": {
        "language": ".py",
        "functions": [
            "create_backup",
            "create_directories",
            "find_pycache_dirs",
            "find_empty_dirs",
            "move_files",
            "cleanup_old_dirs",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tools\\run_menu.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\start_metrics_server.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\system_diagnostics.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run_check",
            "run_all_checks",
            "_calculate_health_score",
            "print_results"
        ],
        "classes": {
            "SystemDiagnostics": {
                "methods": [
                    "__init__",
                    "run_check",
                    "run_all_checks",
                    "_calculate_health_score",
                    "print_results"
                ],
                "docstring": "System diagnostics dashboard.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools\\update_imports.py": {
        "language": ".py",
        "functions": [
            "create_backup",
            "load_move_map",
            "parse_imports",
            "update_imports",
            "format_file",
            "run_tests",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\bridge\\watchers\\reply_handoff_watcher.py": {
        "language": ".py",
        "functions": [
            "extract_agent_id",
            "build_resume_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\core\\autonomy\\loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_shutdown",
            "load_tasks",
            "save_devlog",
            "paste_to_cursor"
        ],
        "classes": {
            "AutonomyLoop": {
                "methods": [
                    "__init__",
                    "_handle_shutdown",
                    "load_tasks",
                    "save_devlog",
                    "paste_to_cursor"
                ],
                "docstring": "Main autonomy loop for Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\core\\autonomy\\task_completion.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_extract_mentioned_agents",
            "_generate_tags",
            "_format_task_summary",
            "__init__",
            "_load_config"
        ],
        "classes": {
            "TaskCompletionHook": {
                "methods": [
                    "__init__",
                    "_extract_mentioned_agents",
                    "_generate_tags",
                    "_format_task_summary"
                ],
                "docstring": "Hook for handling task completion events.",
                "base_classes": []
            },
            "TaskCompletionManager": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Manage task completion hooks for multiple agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\core\\autonomy\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\bridge\\openai_client.py": {
        "language": ".py",
        "functions": [
            "_safe_mkdir",
            "__init__",
            "_create_driver",
            "_save_cookies",
            "_load_cookies",
            "_is_logged_in",
            "login_openai",
            "send_prompt",
            "_collect_response",
            "prompt",
            "shutdown"
        ],
        "classes": {
            "OpenAIClient": {
                "methods": [
                    "__init__",
                    "_create_driver",
                    "_save_cookies",
                    "_load_cookies",
                    "_is_logged_in",
                    "login_openai",
                    "send_prompt",
                    "_collect_response",
                    "prompt",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "tools\\core\\bridge\\cursor_chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "main",
            "__init__",
            "_load_memory",
            "_save_memory",
            "parse_and_update_memory",
            "_merge_memory_updates",
            "get_prompt",
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory",
            "__init__",
            "setup",
            "quit",
            "__init__",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow",
            "load_chat",
            "archive_chat",
            "shutdown",
            "__init__",
            "get_prompt",
            "send_prompt_and_wait",
            "__init__",
            "_load_config",
            "_default_output_callback",
            "append_output",
            "start",
            "_process_pending_requests",
            "_handle_request",
            "_save_response",
            "_send_error",
            "shutdown"
        ],
        "classes": {
            "AletheiaPromptManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "parse_and_update_memory",
                    "_merge_memory_updates",
                    "get_prompt"
                ],
                "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                "base_classes": []
            },
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                "base_classes": []
            },
            "DriverManager": {
                "methods": [
                    "__init__",
                    "setup",
                    "quit"
                ],
                "docstring": "Manages the Chrome WebDriver instance.",
                "base_classes": []
            },
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow",
                    "load_chat",
                    "archive_chat",
                    "shutdown"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": []
            },
            "PromptExecutionService": {
                "methods": [
                    "__init__",
                    "get_prompt",
                    "send_prompt_and_wait"
                ],
                "docstring": "Handles prompt execution and response retrieval.",
                "base_classes": []
            },
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "_process_pending_requests",
                    "_handle_request",
                    "_save_response",
                    "_send_error",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 90
    },
    "tools\\core\\config\\config_loader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_config",
            "_load_yaml",
            "_merge_configs",
            "_format_paths"
        ],
        "classes": {
            "ConfigLoader": {
                "methods": [
                    "__init__",
                    "load_config",
                    "_load_yaml",
                    "_merge_configs",
                    "_format_paths"
                ],
                "docstring": "Loads and validates configuration files.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\core\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\config\\config_validator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "validate_all",
            "_validate_config",
            "_find_used_configs"
        ],
        "classes": {
            "ConfigValidator": {
                "methods": [
                    "__init__",
                    "validate_all",
                    "_validate_config",
                    "_find_used_configs"
                ],
                "docstring": "Validates configuration files.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tools\\core\\inject\\capture_copy_button.py": {
        "language": ".py",
        "functions": [
            "capture_template",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\core\\config\\schema.py": {
        "language": ".py",
        "functions": [
            "validate_url",
            "validate_path_exists",
            "validate_command",
            "validate_ip",
            "__init__",
            "validate",
            "_validate_paths",
            "_validate_webhook_url",
            "_validate_command_paths",
            "_validate_ips",
            "get_default_config"
        ],
        "classes": {
            "ConfigValidator": {
                "methods": [
                    "__init__",
                    "validate",
                    "_validate_paths",
                    "_validate_webhook_url",
                    "_validate_command_paths",
                    "_validate_ips",
                    "get_default_config"
                ],
                "docstring": "Validates configuration against schema and performs additional checks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools\\core\\inject\\captain_prompt.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_sequence_data",
            "_format_waiting_messages",
            "_get_agent_prompt",
            "run"
        ],
        "classes": {
            "CaptainPrompt": {
                "methods": [
                    "__init__",
                    "_get_sequence_data",
                    "_format_waiting_messages",
                    "_get_agent_prompt",
                    "run"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\core\\inject\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\mailbox\\handlers\\message_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_sequence",
            "_get_sequence_data",
            "_update_sequence",
            "get_next_agent",
            "send_message",
            "broadcast_message",
            "get_messages",
            "mark_as_processed",
            "cleanup_old_messages",
            "acknowledge_message",
            "save_response",
            "clear_messages",
            "update_message_status"
        ],
        "classes": {
            "MessageHandler": {
                "methods": [
                    "__init__",
                    "_initialize_sequence",
                    "_get_sequence_data",
                    "_update_sequence",
                    "get_next_agent",
                    "send_message",
                    "broadcast_message",
                    "get_messages",
                    "mark_as_processed",
                    "cleanup_old_messages",
                    "acknowledge_message",
                    "save_response",
                    "clear_messages",
                    "update_message_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tools\\core\\mailbox\\handlers\\task_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_task"
        ],
        "classes": {
            "TaskHandler": {
                "methods": [
                    "__init__",
                    "get_agent_task"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tools\\core\\mailbox\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\mailbox\\utils\\standardize.py": {
        "language": ".py",
        "functions": [
            "create_standard_structure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\core\\mailbox\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\monitor\\debug_tools.py": {
        "language": ".py",
        "functions": [
            "get_agent_coords",
            "send_prompt_to_agent",
            "activate_test_debug_mode"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\core\\monitor\\drift_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_get_last_activity"
        ],
        "classes": {
            "LoopDriftDetector": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_get_last_activity"
                ],
                "docstring": "Detects agent loop drift and stuck states.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools\\core\\monitor\\loop_drift_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_get_last_activity"
        ],
        "classes": {
            "LoopDriftDetector": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_get_last_activity"
                ],
                "docstring": "Detects agent loop drift and stuck states.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools\\core\\monitor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\resume\\agent_resumer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_files",
            "_write_json",
            "_read_json",
            "activate_test_debug_mode",
            "increment_cycle",
            "reset_cycle_count",
            "add_test_fix_task",
            "add_blocker_task",
            "log_test_debug",
            "get_test_debug_status"
        ],
        "classes": {
            "AgentResumer": {
                "methods": [
                    "__init__",
                    "_init_files",
                    "_write_json",
                    "_read_json",
                    "activate_test_debug_mode",
                    "increment_cycle",
                    "reset_cycle_count",
                    "add_test_fix_task",
                    "add_blocker_task",
                    "log_test_debug",
                    "get_test_debug_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tools\\core\\resume\\agent_restart.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "restart_agent",
            "send_initial_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\core\\resume\\resume_integration_runner.py": {
        "language": ".py",
        "functions": [
            "_take_screenshot",
            "run_sequence",
            "_patched_write"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\core\\resume\\runner.py": {
        "language": ".py",
        "functions": [
            "run_resume_sequence",
            "_hook_arity",
            "_safe_invoke"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\core\\resume\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\security\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\core\\security\\security_overlay_generator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "generate_markdown",
            "_format_risks",
            "_format_validation_checks",
            "_format_attack_surfaces",
            "_format_mitigation_steps",
            "_format_dependencies",
            "_format_monitoring",
            "save_overlay",
            "load_template",
            "create_overlay_from_template"
        ],
        "classes": {
            "SecurityRisk": {
                "methods": [],
                "docstring": "Represents a potential security risk in a task.",
                "base_classes": []
            },
            "ValidationCheck": {
                "methods": [],
                "docstring": "Represents a security validation check.",
                "base_classes": []
            },
            "AttackSurface": {
                "methods": [],
                "docstring": "Represents a potential attack surface in a task.",
                "base_classes": []
            },
            "MitigationStep": {
                "methods": [],
                "docstring": "Represents a security mitigation step.",
                "base_classes": []
            },
            "SecurityOverlay": {
                "methods": [],
                "docstring": "Represents a complete security overlay for a task.",
                "base_classes": []
            },
            "SecurityOverlayGenerator": {
                "methods": [
                    "__init__",
                    "generate_markdown",
                    "_format_risks",
                    "_format_validation_checks",
                    "_format_attack_surfaces",
                    "_format_mitigation_steps",
                    "_format_dependencies",
                    "_format_monitoring",
                    "save_overlay",
                    "load_template",
                    "create_overlay_from_template"
                ],
                "docstring": "Generates security overlays for tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "tools\\core\\utils\\file_metrics.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_should_analyze",
            "analyze_file",
            "_extract_imports",
            "_extract_classes",
            "_extract_functions",
            "find_large_files",
            "analyze_module_sizes"
        ],
        "classes": {
            "FileMetrics": {
                "methods": [],
                "docstring": "Metrics for a single file.",
                "base_classes": []
            },
            "FileMetricsAnalyzer": {
                "methods": [
                    "__init__",
                    "_should_analyze",
                    "analyze_file",
                    "_extract_imports",
                    "_extract_classes",
                    "_extract_functions",
                    "find_large_files",
                    "analyze_module_sizes"
                ],
                "docstring": "Analyzes file metrics across a codebase.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\core\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "is_valid_file",
            "is_test_file",
            "get_file_extension",
            "normalize_path",
            "ensure_dir",
            "clean_dir",
            "safe_mkdir",
            "safe_rmdir",
            "read_file",
            "write_file",
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml",
            "backup_file",
            "archive_file",
            "extract_agent_id"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "tools\\dev\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\devlog\\devlog_pitcher.py": {
        "language": ".py",
        "functions": [
            "parse_devlog",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\devlog\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\analyzers\\agent_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_agents"
        ],
        "classes": {
            "AgentAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_agents"
                ],
                "docstring": "Analyzes agent behavior and interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tools\\swarm\\analyzers\\analyze_logs.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "parse_log_file",
            "summarize",
            "export",
            "clear_logs",
            "rotate_logs",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tools\\swarm\\analyzers\\architectural_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_architecture",
            "_find_design_patterns",
            "_find_architectural_issues",
            "_analyze_module_dependencies",
            "_check_layer_violations",
            "_is_layer_violation",
            "_find_circular_dependencies",
            "_analyze_module_structure",
            "_analyze_file_organization",
            "_find_structural_issues",
            "_check_naming_conventions",
            "_analyze_code_organization",
            "_analyze_module_distribution",
            "_build_dependency_graph",
            "_analyze_layer_distribution",
            "_check_section_order",
            "visit"
        ],
        "classes": {
            "ArchitecturalAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_architecture",
                    "_find_design_patterns",
                    "_find_architectural_issues",
                    "_analyze_module_dependencies",
                    "_check_layer_violations",
                    "_is_layer_violation",
                    "_find_circular_dependencies",
                    "_analyze_module_structure",
                    "_analyze_file_organization",
                    "_find_structural_issues",
                    "_check_naming_conventions",
                    "_analyze_code_organization",
                    "_analyze_module_distribution",
                    "_build_dependency_graph",
                    "_analyze_layer_distribution",
                    "_check_section_order"
                ],
                "docstring": "Analyzes code architecture, design patterns, and structure.",
                "base_classes": [
                    "BaseAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 35
    },
    "tools\\swarm\\analyzers\\base_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file",
            "_extract_imports",
            "_analyze_function",
            "_analyze_class",
            "_extract_base_classes",
            "_calculate_complexity",
            "_calculate_node_complexity",
            "_extract_function_dependencies",
            "get_module_info",
            "clear_cache"
        ],
        "classes": {
            "ClassInfo": {
                "methods": [],
                "docstring": "Information about a class definition.",
                "base_classes": []
            },
            "FunctionInfo": {
                "methods": [],
                "docstring": "Information about a function definition.",
                "base_classes": []
            },
            "ModuleInfo": {
                "methods": [],
                "docstring": "Information about a Python module.",
                "base_classes": []
            },
            "BaseAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_extract_imports",
                    "_analyze_function",
                    "_analyze_class",
                    "_extract_base_classes",
                    "_calculate_complexity",
                    "_calculate_node_complexity",
                    "_extract_function_dependencies",
                    "get_module_info",
                    "clear_cache"
                ],
                "docstring": "Base class for code analyzers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tools\\swarm\\analyzers\\code_analyzer.py": {
        "language": ".py",
        "functions": [
            "analyze_project",
            "analyze_file",
            "_extract_imports",
            "_analyze_function",
            "_analyze_class",
            "_extract_base_classes",
            "_calculate_complexity",
            "_calculate_node_complexity",
            "_extract_function_dependencies"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "analyze_project",
                    "analyze_file",
                    "_extract_imports",
                    "_analyze_function",
                    "_analyze_class",
                    "_extract_base_classes",
                    "_calculate_complexity",
                    "_calculate_node_complexity",
                    "_extract_function_dependencies"
                ],
                "docstring": "Analyzes code structure and metrics.",
                "base_classes": [
                    "BaseAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools\\swarm\\analyzers\\ast_analyzer.py": {
        "language": ".py",
        "functions": [
            "analyze_source",
            "find_patterns",
            "find_all_patterns",
            "_matches_pattern",
            "_has_type_hints",
            "_has_docstring",
            "_extract_pattern_details",
            "_extract_type_hints",
            "_extract_docstring",
            "_extract_with_item",
            "_extract_expr",
            "_reset_state",
            "_analyze_tree",
            "_analyze_function",
            "_analyze_class",
            "_extract_base_classes"
        ],
        "classes": {
            "ASTAnalyzer": {
                "methods": [
                    "analyze_source",
                    "find_patterns",
                    "find_all_patterns",
                    "_matches_pattern",
                    "_has_type_hints",
                    "_has_docstring",
                    "_extract_pattern_details",
                    "_extract_type_hints",
                    "_extract_docstring",
                    "_extract_with_item",
                    "_extract_expr",
                    "_reset_state",
                    "_analyze_tree",
                    "_analyze_function",
                    "_analyze_class",
                    "_extract_base_classes"
                ],
                "docstring": "Analyzes Python source code using AST for pattern detection and analysis.",
                "base_classes": [
                    "BaseAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "tools\\swarm\\analyzers\\dependency_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_dependencies",
            "analyze_file_dependencies",
            "identify_core_components",
            "group_into_modules"
        ],
        "classes": {
            "DependencyAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_dependencies",
                    "analyze_file_dependencies",
                    "identify_core_components",
                    "group_into_modules"
                ],
                "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\swarm\\analyzers\\duplicate_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "visit_ClassDef",
            "_calculate_node_complexity",
            "__init__",
            "analyze_duplicates",
            "_analyze_class_definitions",
            "_find_duplicate_class_definitions",
            "_calculate_class_definition_similarity",
            "_find_duplicate_functions",
            "_find_duplicate_classes",
            "_find_duplicate_blocks",
            "_calculate_function_similarity",
            "_calculate_class_similarity",
            "_should_skip_file"
        ],
        "classes": {
            "ClassVisitor": {
                "methods": [
                    "__init__",
                    "visit_ClassDef",
                    "_calculate_node_complexity"
                ],
                "docstring": "AST visitor for finding class definitions.",
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            },
            "DuplicateAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_duplicates",
                    "_analyze_class_definitions",
                    "_find_duplicate_class_definitions",
                    "_calculate_class_definition_similarity",
                    "_find_duplicate_functions",
                    "_find_duplicate_classes",
                    "_find_duplicate_blocks",
                    "_calculate_function_similarity",
                    "_calculate_class_similarity",
                    "_should_skip_file"
                ],
                "docstring": "Analyzes code duplication using AST analysis.",
                "base_classes": [
                    "BaseAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tools\\swarm\\analyzers\\performance_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_metrics",
            "collect_system_metrics",
            "update_metrics",
            "get_optimization_recommendations",
            "run_monitoring_loop"
        ],
        "classes": {
            "PerformanceMonitor": {
                "methods": [
                    "__init__",
                    "initialize_metrics",
                    "collect_system_metrics",
                    "update_metrics",
                    "get_optimization_recommendations",
                    "run_monitoring_loop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\swarm\\analyzers\\quality_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_quality",
            "_calculate_code_duplication",
            "_calculate_maintainability",
            "analyze_test_coverage",
            "_should_skip_file"
        ],
        "classes": {
            "QualityAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_quality",
                    "_calculate_code_duplication",
                    "_calculate_maintainability",
                    "analyze_test_coverage",
                    "_should_skip_file"
                ],
                "docstring": "Analyzes code quality metrics including complexity and duplication.",
                "base_classes": [
                    "BaseAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\swarm\\analyzers\\theme_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_themes"
        ],
        "classes": {
            "ThemeAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_themes"
                ],
                "docstring": "Analyzes code themes and patterns.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tools\\swarm\\analyzers\\visualize_agent_layout.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_draw_point",
            "_draw_region",
            "visualize_agent",
            "visualize_all_agents",
            "analyze_layout"
        ],
        "classes": {
            "AgentLayoutVisualizer": {
                "methods": [
                    "__init__",
                    "_draw_point",
                    "_draw_region",
                    "visualize_agent",
                    "visualize_all_agents",
                    "analyze_layout"
                ],
                "docstring": "Visualizes agent positions and regions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "tools\\swarm\\browser\\integration.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "StealthBrowserBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tools\\swarm\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\browser\\debug_helper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "print_page_info",
            "print_form_elements",
            "print_element_info",
            "wait_for_hotkey",
            "find_element_by_attributes"
        ],
        "classes": {
            "BrowserDebugger": {
                "methods": [
                    "__init__",
                    "print_page_info",
                    "print_form_elements",
                    "print_element_info",
                    "wait_for_hotkey",
                    "find_element_by_attributes"
                ],
                "docstring": "Helper class for debugging browser automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\swarm\\browser\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\browser\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_driver",
            "save_cookies",
            "load_cookies"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "set_driver",
                    "save_cookies",
                    "load_cookies"
                ],
                "docstring": "Handles saving and loading of browser cookies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools\\swarm\\browser\\stealth_browser.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "navigate_to",
            "check_login_status",
            "print_element_info"
        ],
        "classes": {
            "StealthBrowser": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate_to",
                    "check_login_status",
                    "print_element_info"
                ],
                "docstring": "Codex-compatible synchronous stealth browser.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\swarm\\browser\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\browser\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "click_initial_login",
            "click_secondary_login",
            "wait_for_email_input",
            "wait_for_continue_button",
            "wait_for_password_input",
            "input_email",
            "input_password",
            "find_element",
            "find_element_by_text",
            "wait_for_verification_code",
            "check_login_status",
            "handle_verification_code",
            "verify_login",
            "input_codex_message",
            "wait_for_codex_response"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "click_initial_login",
                    "click_secondary_login",
                    "wait_for_email_input",
                    "wait_for_continue_button",
                    "wait_for_password_input",
                    "input_email",
                    "input_password",
                    "find_element",
                    "find_element_by_text",
                    "wait_for_verification_code",
                    "check_login_status",
                    "handle_verification_code",
                    "verify_login",
                    "input_codex_message",
                    "wait_for_codex_response"
                ],
                "docstring": "Handles login-related operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "tools\\swarm\\browser\\__main__.py": {
        "language": ".py",
        "functions": [
            "keep_browser_open",
            "handle_login_flow",
            "try_cookie_login",
            "send_codex_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools\\swarm\\models\\analysis.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "ClassInfo": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Information about a class in the codebase.",
                "base_classes": []
            },
            "FileAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Analysis results for a single file.",
                "base_classes": []
            },
            "ProjectAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Analysis results for an entire project.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools\\swarm\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\scanner\\core\\scanner.py": {
        "language": ".py",
        "functions": [
            "save_reports",
            "__init__",
            "_extract_nodes",
            "_analyze_file",
            "_find_duplicates",
            "_are_functions_similar",
            "_calculate_similarity",
            "_are_classes_similar",
            "_calculate_class_similarity",
            "_analyze_architecture",
            "_analyze_structure",
            "_analyze_themes",
            "_find_top_violators",
            "_generate_narrative",
            "_generate_init_files"
        ],
        "classes": {
            "ScanResults": {
                "methods": [
                    "save_reports"
                ],
                "docstring": "Results from a code scan.",
                "base_classes": []
            },
            "Scanner": {
                "methods": [
                    "__init__",
                    "_extract_nodes",
                    "_analyze_file",
                    "_find_duplicates",
                    "_are_functions_similar",
                    "_calculate_similarity",
                    "_are_classes_similar",
                    "_calculate_class_similarity",
                    "_analyze_architecture",
                    "_analyze_structure",
                    "_analyze_themes",
                    "_find_top_violators",
                    "_generate_narrative",
                    "_generate_init_files"
                ],
                "docstring": "Unified code scanner for detecting duplicates and analyzing code structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tools\\swarm\\scanner\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\swarm\\utils\\backup_restore.py": {
        "language": ".py",
        "functions": [
            "add_path",
            "write_metadata",
            "backup_runtime",
            "safe_extract",
            "restore",
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tools\\swarm\\utils\\cleanup_project.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "analyze_project",
            "generate_report",
            "consolidate_test_files",
            "clean_temp_files"
        ],
        "classes": {
            "ProjectCleaner": {
                "methods": [
                    "__init__",
                    "analyze_project",
                    "generate_report",
                    "consolidate_test_files",
                    "clean_temp_files"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools\\swarm\\utils\\zip_resolver.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "__init__",
            "resolve",
            "resolve_batch",
            "get_stats",
            "reset",
            "warm_cache",
            "get_circuit_breaker_status"
        ],
        "classes": {
            "ZipResolverConfig": {
                "methods": [],
                "docstring": "Configuration for ZIP code resolution service.",
                "base_classes": []
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute"
                ],
                "docstring": "Circuit breaker pattern implementation.",
                "base_classes": []
            },
            "ZipResolver": {
                "methods": [
                    "__init__",
                    "resolve",
                    "resolve_batch",
                    "get_stats",
                    "reset",
                    "warm_cache",
                    "get_circuit_breaker_status"
                ],
                "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tools\\swarm\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    }
}