{
    "agent_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\agent_cellphone.py": {
        "language": ".py",
        "functions": [
            "get_welcome_message",
            "direct_send_message",
            "send_message",
            "main",
            "get_xy"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agent_tools\\scanner\\analyzers\\dependency_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_dependencies",
            "analyze_file_dependencies",
            "identify_core_components",
            "group_into_modules"
        ],
        "classes": {
            "DependencyAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_dependencies",
                    "analyze_file_dependencies",
                    "identify_core_components",
                    "group_into_modules"
                ],
                "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\scanner\\scanner.py": {
        "language": ".py",
        "functions": [
            "default",
            "__init__",
            "_find_valid_files",
            "_detect_encoding",
            "_save_results"
        ],
        "classes": {
            "PathEncoder": {
                "methods": [
                    "default"
                ],
                "docstring": "Custom JSON encoder that handles Path objects.",
                "base_classes": [
                    "json.JSONEncoder"
                ]
            },
            "Scanner": {
                "methods": [
                    "__init__",
                    "_find_valid_files",
                    "_detect_encoding",
                    "_save_results"
                ],
                "docstring": "Main scanner class that orchestrates the analysis process.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\scanner\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\analyzers\\ast_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "_reset_state",
            "_analyze_tree",
            "_analyze_function",
            "_analyze_class",
            "_extract_base_classes"
        ],
        "classes": {
            "ASTAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze",
                    "_reset_state",
                    "_analyze_tree",
                    "_analyze_function",
                    "_analyze_class",
                    "_extract_base_classes"
                ],
                "docstring": "Analyzes Python source code using AST.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agent_tools\\scanner\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\models\\analysis.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "ClassInfo": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Information about a class in the codebase.",
                "base_classes": []
            },
            "FileAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Analysis results for a single file.",
                "base_classes": []
            },
            "ProjectAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Complete project analysis results.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agent_tools\\scanner\\analyzers\\quality_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file_quality",
            "_calculate_cyclomatic_complexity",
            "_calculate_code_duplication",
            "analyze_test_coverage"
        ],
        "classes": {
            "QualityAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file_quality",
                    "_calculate_cyclomatic_complexity",
                    "_calculate_code_duplication",
                    "analyze_test_coverage"
                ],
                "docstring": "Analyzes code quality metrics including complexity and duplication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\scanner\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\tests\\test_models.py": {
        "language": ".py",
        "functions": [
            "test_class_info_initialization",
            "test_file_analysis_initialization",
            "test_project_analysis_initialization",
            "test_project_analysis_to_dict"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\utils\\init_mailbox.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_initial_state",
            "_write_mailbox_files",
            "reset",
            "initialize"
        ],
        "classes": {
            "AgentMailbox": {
                "methods": [
                    "__init__",
                    "_get_initial_state",
                    "_write_mailbox_files",
                    "reset",
                    "initialize"
                ],
                "docstring": "A class to manage agent mailboxes, including initialization and reset operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "agent_tools\\scanner\\tests\\test_utils.py": {
        "language": ".py",
        "functions": [
            "test_is_valid_file",
            "test_is_test_file",
            "test_get_file_extension",
            "test_normalize_path",
            "test_create_directory",
            "test_create_directory_existing",
            "test_create_directory_with_parents",
            "test_create_directory_permission_error",
            "test_create_directory_invalid_path",
            "test_create_directory_max_length",
            "test_create_directory_concurrent",
            "create_dir"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\scanner\\tests\\test_analyzers.py": {
        "language": ".py",
        "functions": [
            "sample_files",
            "test_dependency_analyzer_initialization",
            "test_analyze_dependencies",
            "test_identify_core_components",
            "test_group_into_modules",
            "test_quality_analyzer_initialization",
            "test_analyze_file_quality",
            "test_analyze_test_coverage"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "agent_tools\\scanner\\tests\\test_models_edge_cases.py": {
        "language": ".py",
        "functions": [
            "test_class_info_edge_cases",
            "test_file_analysis_edge_cases",
            "test_project_analysis_edge_cases",
            "test_serialization_edge_cases"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\scanner\\tests\\test_scanner_edge_cases.py": {
        "language": ".py",
        "functions": [
            "complex_project"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "crime_report_generator\\main.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "collect_data",
            "process_data",
            "generate_visualizations",
            "generate_report",
            "run_pipeline"
        ],
        "classes": {
            "CrimeReportGenerator": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "process_data",
                    "generate_visualizations",
                    "generate_report",
                    "run_pipeline"
                ],
                "docstring": "Main class for orchestrating the crime report generation pipeline.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agent_tools\\scanner\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\data_sources\\austin_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "AustinScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Austin Police Department crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "crime_report_generator\\agents\\report_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_data",
            "generate_report",
            "schedule_report",
            "distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportAgent": {
                "methods": [
                    "__init__",
                    "process_data",
                    "generate_report",
                    "schedule_report",
                    "distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Agent for managing crime report generation and distribution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "agent_tools\\scanner\\tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "temp_project_dir",
            "sample_file_analysis",
            "sample_project_analysis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "agent_tools\\scanner\\tests\\test_scanner.py": {
        "language": ".py",
        "functions": [
            "temp_project",
            "test_save_results"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\scanner\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "is_valid_file",
            "is_test_file",
            "get_file_extension",
            "normalize_path",
            "create_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "crime_report_generator\\processors\\aggregator.py": {
        "language": ".py",
        "functions": [
            "aggregate_by_type",
            "aggregate_by_district",
            "top_locations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\data_sources\\houston_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "HoustonScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Houston Police Department crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agent_tools\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\scanner\\tests\\test_analyzers_edge_cases.py": {
        "language": ".py",
        "functions": [
            "complex_code",
            "complex_dependencies",
            "test_quality_analyzer_complex_nesting",
            "test_quality_analyzer_duplicate_detection",
            "test_dependency_analyzer_complex_imports",
            "test_dependency_analyzer_circular_deps",
            "test_dependency_analyzer_core_components",
            "test_dependency_analyzer_module_grouping",
            "test_quality_analyzer_class_inheritance",
            "test_quality_analyzer_empty_file",
            "test_dependency_analyzer_empty_file",
            "test_quality_analyzer_invalid_syntax",
            "test_dependency_analyzer_invalid_syntax"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "crime_report_generator\\processors\\cleaner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clean",
            "_clean_date",
            "_clean_crime_type",
            "_clean_count",
            "_clean_location",
            "_clean_status"
        ],
        "classes": {
            "DataCleaner": {
                "methods": [
                    "__init__",
                    "clean",
                    "_clean_date",
                    "_clean_crime_type",
                    "_clean_count",
                    "_clean_location",
                    "_clean_status"
                ],
                "docstring": "Class for cleaning and standardizing crime data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\processors\\categorizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "categorize_offense",
            "categorize_description",
            "categorize_dataframe",
            "_categorize_row",
            "categorize_crime"
        ],
        "classes": {
            "CrimeCategory": {
                "methods": [],
                "docstring": "Enumeration of crime categories.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CrimeCategorizer": {
                "methods": [
                    "__init__",
                    "categorize_offense",
                    "categorize_description",
                    "categorize_dataframe",
                    "_categorize_row",
                    "categorize_crime"
                ],
                "docstring": "Class for categorizing crime data into standardized categories.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "crime_report_generator\\reports\\arcgis_fetcher.py": {
        "language": ".py",
        "functions": [
            "get_bounding_box",
            "fetch_montgomery_arcgis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "crime_report_generator\\reports\\crime_report_pipeline.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "generate_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\reports\\crimegrade_scraper.py": {
        "language": ".py",
        "functions": [
            "fetch_crimegrade_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "crime_report_generator\\tests\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\tests\\processors\\test_aggregator.py": {
        "language": ".py",
        "functions": [
            "sample_df",
            "test_aggregate_by_type",
            "test_aggregate_by_district",
            "test_top_locations",
            "test_empty_dataframe",
            "test_missing_columns",
            "test_lowest_activity_locations",
            "test_top_locations_with_min_count"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "crime_report_generator\\tests\\processors\\test_categorizer.py": {
        "language": ".py",
        "functions": [
            "sample_raw_data",
            "categorizer",
            "test_categorize_offense",
            "test_categorize_description",
            "test_categorize_dataframe",
            "test_unknown_offense",
            "test_empty_dataframe",
            "test_missing_columns",
            "test_case_insensitivity"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "crime_report_generator\\reports\\summarizer.py": {
        "language": ".py",
        "functions": [
            "normalize_crime_types",
            "summarize_arcgis_data",
            "summarize_crimegrade_data",
            "compare_sources"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "crime_report_generator\\reports\\report_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_markdown_report",
            "generate_html_report",
            "generate_pdf_report",
            "generate_summary_statistics",
            "_validate_dataframe"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "generate_markdown_report",
                    "generate_html_report",
                    "generate_pdf_report",
                    "generate_summary_statistics",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime reports in various formats.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "crime_report_generator\\reports\\report_formatter.py": {
        "language": ".py",
        "functions": [
            "format_markdown_report",
            "format_discord_report",
            "format_instagram_report",
            "format_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "crime_report_generator\\tests\\agents\\test_report_agent.py": {
        "language": ".py",
        "functions": [
            "mock_distributor",
            "sample_crime_data",
            "mock_data_source",
            "mock_social_config",
            "agent",
            "test_process_data",
            "test_generate_report",
            "test_schedule_report",
            "test_distribute_report",
            "test_remove_job",
            "test_shutdown",
            "test_invalid_social_platform",
            "test_data_processing_error",
            "test_report_generation_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\reports\\zip_mapper.py": {
        "language": ".py",
        "functions": [
            "get_zip_info",
            "format_location",
            "get_zip_details"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\scheduler\\report_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_report",
            "generate_report",
            "generate_and_distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportScheduler": {
                "methods": [
                    "__init__",
                    "schedule_report",
                    "generate_report",
                    "generate_and_distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Class for scheduling and automating crime report generation and distribution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\tests\\reports\\test_report_generator.py": {
        "language": ".py",
        "functions": [
            "sample_crime_data",
            "report_generator",
            "test_generate_markdown_report",
            "test_generate_html_report",
            "test_generate_pdf_report",
            "test_report_summary_statistics",
            "test_empty_dataframe",
            "test_missing_required_columns",
            "test_custom_template"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "crime_report_generator\\tests\\visualizations\\test_crime_visualizer.py": {
        "language": ".py",
        "functions": [
            "sample_crime_data",
            "visualizer",
            "test_create_category_pie_chart",
            "test_create_trend_line_chart",
            "test_create_location_bar_chart",
            "test_create_category_trend_chart",
            "test_empty_dataframe",
            "test_missing_required_columns",
            "test_save_visualization",
            "test_custom_styling"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "crime_report_generator\\tests\\processors\\test_cleaner.py": {
        "language": ".py",
        "functions": [
            "sample_raw_data",
            "sample_messy_data",
            "test_clean_dates",
            "test_clean_crime_types",
            "test_clean_counts",
            "test_clean_locations",
            "test_clean_status",
            "test_clean_complete_dataset",
            "test_handle_missing_data",
            "test_handle_invalid_data"
        ],
        "classes": {
            "TestDataCleaner": {
                "methods": [
                    "test_clean_dates",
                    "test_clean_crime_types",
                    "test_clean_counts",
                    "test_clean_locations",
                    "test_clean_status",
                    "test_clean_complete_dataset",
                    "test_handle_missing_data",
                    "test_handle_invalid_data"
                ],
                "docstring": "Test cases for the DataCleaner class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "crime_report_generator\\visualizations\\crime_visualizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_category_pie_chart",
            "create_trend_line_chart",
            "create_location_bar_chart",
            "create_category_trend_chart",
            "save_visualization",
            "_validate_dataframe"
        ],
        "classes": {
            "CrimeVisualizer": {
                "methods": [
                    "__init__",
                    "create_category_pie_chart",
                    "create_trend_line_chart",
                    "create_location_bar_chart",
                    "create_category_trend_chart",
                    "save_visualization",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime data visualizations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\tests\\scheduler\\test_report_scheduler.py": {
        "language": ".py",
        "functions": [
            "sample_crime_data",
            "mock_data_source",
            "mock_distributor",
            "scheduler",
            "test_schedule_report",
            "test_generate_scheduled_report",
            "test_distribute_report",
            "test_invalid_report_type",
            "test_invalid_format",
            "test_data_source_error",
            "test_distributor_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "discord_bot\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages"
        ],
        "classes": {
            "AgentInterface": {
                "methods": [
                    "__init__",
                    "send_command",
                    "broadcast_command",
                    "get_agent_status",
                    "clear_agent_messages"
                ],
                "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "discord_bot\\bot.py": {
        "language": ".py",
        "functions": [
            "run_bot"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "discord_bot\\commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_pages",
            "setup_buttons",
            "add_category_buttons",
            "add_navigation_buttons",
            "__init__",
            "__init__",
            "__init__",
            "cog_unload"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__",
                    "setup_pages",
                    "setup_buttons",
                    "add_category_buttons",
                    "add_navigation_buttons"
                ],
                "docstring": "Help menu view for displaying command documentation.",
                "base_classes": [
                    "discord.ui.View"
                ]
            },
            "CommandSearchModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for searching commands with enhanced UI.",
                "base_classes": [
                    "discord.ui.Modal"
                ]
            },
            "DevLogManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages agent development logs and Discord notifications.",
                "base_classes": []
            },
            "AgentCommands": {
                "methods": [
                    "__init__",
                    "cog_unload"
                ],
                "docstring": "Handles agent-related commands.",
                "base_classes": [
                    "commands.Cog"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "discord_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "discord_bot\\voice_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "discord_bot\\tts.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TTSManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages text-to-speech generation using multiple engines.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "_create_inbox_message",
            "get_log",
            "clear_log"
        ],
        "classes": {
            "AgentLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "_create_inbox_message",
                    "get_log",
                    "clear_log"
                ],
                "docstring": "Handles agent development logging and Discord notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "start_agent_loops",
            "__init__",
            "_load_inbox",
            "_process_inbox",
            "run"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__",
                    "_load_inbox",
                    "_process_inbox",
                    "run"
                ],
                "docstring": "Monitors agent inboxes and processes incoming prompts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\cli.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "validate_priority",
            "cli_main",
            "__init__",
            "send_message",
            "get_status",
            "clear_messages",
            "shutdown"
        ],
        "classes": {
            "MessageCLI": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_status",
                    "clear_messages",
                    "shutdown"
                ],
                "docstring": "Command-line interface for agent communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages",
            "cleanup"
        ],
        "classes": {
            "AgentInterface": {
                "methods": [
                    "__init__",
                    "send_command",
                    "broadcast_command",
                    "get_agent_status",
                    "clear_agent_messages",
                    "cleanup"
                ],
                "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\cell_phone.py": {
        "language": ".py",
        "functions": [
            "send_message",
            "parse_args",
            "validate_priority",
            "cli_main",
            "__new__",
            "reset_singleton",
            "__init__",
            "send_message",
            "get_message_status",
            "get_message_history",
            "get_status",
            "clear_messages",
            "shutdown",
            "__init__",
            "send_message",
            "_monitor_response",
            "_save_response",
            "set_response_timeout",
            "get_saved_responses",
            "clear_saved_responses",
            "broadcast_message",
            "list_agents",
            "get_agent_status",
            "update_agent_status"
        ],
        "classes": {
            "CellPhone": {
                "methods": [
                    "__new__",
                    "reset_singleton",
                    "__init__",
                    "send_message",
                    "get_message_status",
                    "get_message_history",
                    "get_status",
                    "clear_messages",
                    "shutdown"
                ],
                "docstring": "Base class for cell phone communication between agents.",
                "base_classes": []
            },
            "CaptainPhone": {
                "methods": [
                    "__init__",
                    "send_message",
                    "_monitor_response",
                    "_save_response",
                    "set_response_timeout",
                    "get_saved_responses",
                    "clear_saved_responses",
                    "broadcast_message",
                    "list_agents",
                    "get_agent_status",
                    "update_agent_status"
                ],
                "docstring": "Special phone interface for the captain to communicate with agents.",
                "base_classes": [
                    "CellPhone"
                ]
            }
        },
        "routes": [],
        "complexity": 44
    },
    "discord_bot\\voicebot.py": {
        "language": ".py",
        "functions": [
            "run_voicebot",
            "__init__",
            "on_created",
            "__init__",
            "_after_playback"
        ],
        "classes": {
            "VoiceQueueHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file system events for the voice queue directory.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "VoiceBot": {
                "methods": [
                    "__init__",
                    "_after_playback"
                ],
                "docstring": "Voice-enabled Discord bot for swarm audio output.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "get_coordinates",
            "list_agents"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "get_coordinates",
                    "list_agents"
                ],
                "docstring": "Manages cursor coordinates for agent UI interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\coordinate_utils.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "validate_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\config.py": {
        "language": ".py",
        "functions": [
            "load_agent_config",
            "setup_test_environment",
            "cleanup_test_environment",
            "get_test_config"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "load_agent_config",
                    "setup_test_environment",
                    "cleanup_test_environment",
                    "get_test_config"
                ],
                "docstring": "Manages configuration loading and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "press_ctrl_enter",
            "press_ctrl_n",
            "press_ctrl_v",
            "press_ctrl_a"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "press_ctrl_enter",
                    "press_ctrl_n",
                    "press_ctrl_v",
                    "press_ctrl_a"
                ],
                "docstring": "Controls cursor movement and input for agent interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\devlog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_event",
            "get_logs",
            "clear_logs"
        ],
        "classes": {
            "DevLogManager": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_logs",
                    "clear_logs"
                ],
                "docstring": "Manages development logs for agents and system components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_command",
            "get_command_stats",
            "reset_stats",
            "save_metrics",
            "load_metrics"
        ],
        "classes": {
            "CommandMetrics": {
                "methods": [
                    "__init__",
                    "track_command",
                    "get_command_stats",
                    "reset_stats",
                    "save_metrics",
                    "load_metrics"
                ],
                "docstring": "Track and report command usage metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\menu.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_theme_colors",
            "_get_theme_fonts",
            "__init__",
            "setup_ui",
            "__init__",
            "setup_ui",
            "__init__",
            "setup_ui",
            "__new__",
            "__init__",
            "setup_ui",
            "add_item",
            "handle_item_click",
            "_handle_agent_selection",
            "show",
            "run",
            "_cleanup",
            "closeEvent",
            "__del__",
            "set_controller",
            "__init__",
            "add_item",
            "add_items",
            "build",
            "display_menu",
            "close_menu"
        ],
        "classes": {
            "MenuStyle": {
                "methods": [],
                "docstring": "Available menu styles.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MenuItemType": {
                "methods": [],
                "docstring": "Types of menu items.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MenuItem": {
                "methods": [],
                "docstring": "Represents a menu item with its properties.",
                "base_classes": []
            },
            "MenuTheme": {
                "methods": [
                    "__init__",
                    "_get_theme_colors",
                    "_get_theme_fonts"
                ],
                "docstring": "Handles menu theming and styling.",
                "base_classes": []
            },
            "MenuButton": {
                "methods": [
                    "__init__",
                    "setup_ui"
                ],
                "docstring": "Custom button widget for menu items.",
                "base_classes": [
                    "QPushButton"
                ]
            },
            "MenuHeader": {
                "methods": [
                    "__init__",
                    "setup_ui"
                ],
                "docstring": "Header widget for the menu.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "MenuFooter": {
                "methods": [
                    "__init__",
                    "setup_ui"
                ],
                "docstring": "Footer widget for the menu.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "MenuSignals": {
                "methods": [],
                "docstring": "Signal handler for menu events.",
                "base_classes": [
                    "QObject"
                ]
            },
            "Menu": {
                "methods": [
                    "__new__",
                    "__init__",
                    "setup_ui",
                    "add_item",
                    "handle_item_click",
                    "_handle_agent_selection",
                    "show",
                    "run",
                    "_cleanup",
                    "closeEvent",
                    "__del__",
                    "set_controller"
                ],
                "docstring": "Main menu window class.",
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "add_item",
                    "add_items",
                    "build",
                    "display_menu",
                    "close_menu"
                ],
                "docstring": "Builds and manages menu instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 55
    },
    "dreamos\\core\\message_loop.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageLoop": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Asynchronous message loop for processing messages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\message_processor.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "process_message",
            "get_status",
            "clear_messages",
            "shutdown",
            "process_queue",
            "_process_message",
            "send_message",
            "send_to_all_agents"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "process_message",
                    "get_status",
                    "clear_messages",
                    "shutdown",
                    "process_queue",
                    "_process_message",
                    "send_message",
                    "send_to_all_agents"
                ],
                "docstring": "Processes and routes messages between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\core\\message.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "Message": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Message data class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent_control\\agent_control.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_load_coordinates",
            "move_to_agent",
            "click_input_box",
            "click_copy_button",
            "get_response_region"
        ],
        "classes": {
            "AgentControl": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button",
                    "get_response_region"
                ],
                "docstring": "Handles agent control operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\persistent_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_acquire_lock",
            "_release_lock",
            "_read_queue",
            "_write_queue",
            "_check_rate_limit",
            "get_queue_size",
            "get_message",
            "clear_queue",
            "enqueue",
            "put",
            "get",
            "get_status",
            "add_message",
            "clear_agent",
            "shutdown",
            "get_message_history",
            "clear_history",
            "set_test_mode"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_acquire_lock",
                    "_release_lock",
                    "_read_queue",
                    "_write_queue",
                    "_check_rate_limit",
                    "get_queue_size",
                    "get_message",
                    "clear_queue",
                    "enqueue",
                    "put",
                    "get",
                    "get_status",
                    "add_message",
                    "clear_agent",
                    "shutdown",
                    "get_message_history",
                    "clear_history",
                    "set_test_mode"
                ],
                "docstring": "A file-based persistent queue with file locking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "dreamos\\core\\messaging.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message modes for different types of communication.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Message": {
                "methods": [],
                "docstring": "Represents a message with metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\region_finder.py": {
        "language": ".py",
        "functions": [
            "find_cursor_regions",
            "__init__",
            "_load_regions",
            "_save_regions",
            "start_finding",
            "_set_start",
            "_set_end",
            "_quit",
            "get_region"
        ],
        "classes": {
            "RegionFinder": {
                "methods": [
                    "__init__",
                    "_load_regions",
                    "_save_regions",
                    "start_finding",
                    "_set_start",
                    "_set_end",
                    "_quit",
                    "get_region"
                ],
                "docstring": "Helps find screen coordinates for UI regions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "dreamos\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\agent_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_agent_change",
            "resume_agent",
            "verify_agent",
            "cleanup_agent"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "_handle_agent_change",
                    "resume_agent",
                    "verify_agent",
                    "cleanup_agent"
                ],
                "docstring": "Controls agent operations and UI interactions",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\response_collector.py": {
        "language": ".py",
        "functions": [
            "collect_response",
            "__init__",
            "load_template",
            "detect_copy_button",
            "click_copy_button",
            "__init__",
            "capture",
            "is_stable",
            "try_copy_response",
            "__init__",
            "_load_agent_regions",
            "_find_cursor_windows",
            "_get_cursor_text",
            "start_collecting",
            "_save_response",
            "get_saved_responses",
            "get_latest_response",
            "clear_responses"
        ],
        "classes": {
            "CopyButtonDetector": {
                "methods": [
                    "__init__",
                    "load_template",
                    "detect_copy_button",
                    "click_copy_button"
                ],
                "docstring": "Detects and interacts with the copy button in Cursor.",
                "base_classes": []
            },
            "AgentRegion": {
                "methods": [
                    "__init__",
                    "capture",
                    "is_stable",
                    "try_copy_response"
                ],
                "docstring": "Defines a region for monitoring agent responses.",
                "base_classes": []
            },
            "ResponseCollector": {
                "methods": [
                    "__init__",
                    "_load_agent_regions",
                    "_find_cursor_windows",
                    "_get_cursor_text",
                    "start_collecting",
                    "_save_response",
                    "get_saved_responses",
                    "get_latest_response",
                    "clear_responses"
                ],
                "docstring": "Collects and saves Cursor agent responses for SWARM.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "dreamos\\core\\system_init.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "initialize_core_systems",
            "establish_communication_channels",
            "begin_monitoring",
            "report_status"
        ],
        "classes": {
            "SystemInitializer": {
                "methods": [
                    "__init__",
                    "initialize_core_systems",
                    "establish_communication_channels",
                    "begin_monitoring",
                    "report_status"
                ],
                "docstring": "Handles system initialization and communication setup.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\agent_control\\agent_selection_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "_handle_selection"
        ],
        "classes": {
            "AgentSelectionDialog": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "_handle_selection"
                ],
                "docstring": "Dialog for selecting one or more agents.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent_control\\agent_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "list_agents",
            "onboard_agent",
            "_onboard_single_agent",
            "resume_agent",
            "verify_agent",
            "repair_agent",
            "_repair_single_agent",
            "backup_agent",
            "_backup_single_agent",
            "restore_agent",
            "_restore_single_agent",
            "send_message",
            "_send_single_message",
            "cleanup"
        ],
        "classes": {
            "AgentOperations": {
                "methods": [
                    "__init__",
                    "list_agents",
                    "onboard_agent",
                    "_onboard_single_agent",
                    "resume_agent",
                    "verify_agent",
                    "repair_agent",
                    "_repair_single_agent",
                    "backup_agent",
                    "_backup_single_agent",
                    "restore_agent",
                    "_restore_single_agent",
                    "send_message",
                    "_send_single_message",
                    "cleanup"
                ],
                "docstring": "Handles agent-specific operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\core\\agent_control\\controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_menu_builder",
            "_handle_menu_action",
            "_handle_list_agents",
            "cleanup",
            "run",
            "list_agents",
            "onboard_agent",
            "resume_agent",
            "verify_agent",
            "repair_agent",
            "backup_agent",
            "restore_agent",
            "send_message"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "set_menu_builder",
                    "_handle_menu_action",
                    "_handle_list_agents",
                    "cleanup",
                    "run",
                    "list_agents",
                    "onboard_agent",
                    "resume_agent",
                    "verify_agent",
                    "repair_agent",
                    "backup_agent",
                    "restore_agent",
                    "send_message"
                ],
                "docstring": "Main controller for agent operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\agent_control\\coordinate_calibrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_coordinates",
            "save_coordinates",
            "get_coordinates",
            "update_coordinates",
            "calibrate_agent"
        ],
        "classes": {
            "CoordinateCalibrator": {
                "methods": [
                    "__init__",
                    "load_coordinates",
                    "save_coordinates",
                    "get_coordinates",
                    "update_coordinates",
                    "calibrate_agent"
                ],
                "docstring": "Manages UI coordinate calibration for agent interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\coordinate_transformer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_monitors",
            "transform_coordinates",
            "transform_coordinate_dict"
        ],
        "classes": {
            "CoordinateTransformer": {
                "methods": [
                    "__init__",
                    "_get_monitors",
                    "transform_coordinates",
                    "transform_coordinate_dict"
                ],
                "docstring": "Transforms coordinates between monitor and screen space.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent_control\\screenshot_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture",
            "get_screenshots",
            "get_latest_screenshot",
            "compare_screenshots",
            "cleanup"
        ],
        "classes": {
            "ScreenshotLogger": {
                "methods": [
                    "__init__",
                    "capture",
                    "get_screenshots",
                    "get_latest_screenshot",
                    "compare_screenshots",
                    "cleanup"
                ],
                "docstring": "Tracks and manages debug screenshots for UI automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\message.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "format_content",
            "to_dict",
            "from_dict",
            "validate"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message delivery modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Message": {
                "methods": [
                    "__post_init__",
                    "format_content",
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Represents a message in the Dream.OS system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\agent_control\\timing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_focus",
            "wait_click",
            "wait_typing",
            "wait_capture",
            "wait_screenshot",
            "wait_move",
            "wait_scroll",
            "wait_load",
            "wait_refresh"
        ],
        "classes": {
            "Timing": {
                "methods": [
                    "__init__",
                    "wait_focus",
                    "wait_click",
                    "wait_typing",
                    "wait_capture",
                    "wait_screenshot",
                    "wait_move",
                    "wait_scroll",
                    "wait_load",
                    "wait_refresh"
                ],
                "docstring": "Minimal Timing stub for UI/automation flow compatibility.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent_control\\menu_builder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_controller",
            "_handle_menu_action",
            "cleanup",
            "_build_menu",
            "_handle_list_agents",
            "_handle_agent_selection",
            "display_menu",
            "connect_signals",
            "disconnect_signals"
        ],
        "classes": {
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "set_controller",
                    "_handle_menu_action",
                    "cleanup",
                    "_build_menu",
                    "_handle_list_agents",
                    "_handle_agent_selection",
                    "display_menu",
                    "connect_signals",
                    "disconnect_signals"
                ],
                "docstring": "Builds the agent control menu.",
                "base_classes": [
                    "BaseMenuBuilder"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent_control\\ui_automation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_monitors",
            "_load_config",
            "_setup_signal_handlers",
            "_handle_interrupt",
            "_calibration_context",
            "_cleanup_calibration",
            "_calibration_loop",
            "start_calibration",
            "_get_screenshot_logger",
            "_validate_window_title",
            "_capture_debug_screenshot",
            "_transform_coordinates",
            "_transform_coordinate_dict",
            "get_agent_coordinates",
            "_validate_coordinates",
            "_load_coordinates",
            "_get_default_coordinates",
            "_click_focus",
            "send_message",
            "_load_onboarding_prompt",
            "perform_onboarding_sequence",
            "_split_message",
            "cleanup",
            "move_to",
            "click",
            "type_text",
            "press_key",
            "hotkey",
            "screenshot",
            "_get_response",
            "move_to_agent",
            "click_input_box",
            "click_copy_button",
            "get_response_region",
            "_has_duplicate_coordinates",
            "_has_out_of_bounds_coordinates"
        ],
        "classes": {
            "UIAutomation": {
                "methods": [
                    "__init__",
                    "_initialize_monitors",
                    "_load_config",
                    "_setup_signal_handlers",
                    "_handle_interrupt",
                    "_calibration_context",
                    "_cleanup_calibration",
                    "_calibration_loop",
                    "start_calibration",
                    "_get_screenshot_logger",
                    "_validate_window_title",
                    "_capture_debug_screenshot",
                    "_transform_coordinates",
                    "_transform_coordinate_dict",
                    "get_agent_coordinates",
                    "_validate_coordinates",
                    "_load_coordinates",
                    "_get_default_coordinates",
                    "_click_focus",
                    "send_message",
                    "_load_onboarding_prompt",
                    "perform_onboarding_sequence",
                    "_split_message",
                    "cleanup",
                    "move_to",
                    "click",
                    "type_text",
                    "press_key",
                    "hotkey",
                    "screenshot",
                    "_get_response",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button",
                    "get_response_region",
                    "_has_duplicate_coordinates",
                    "_has_out_of_bounds_coordinates"
                ],
                "docstring": "Handles UI automation for agent control.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 74
    },
    "dreamos\\core\\messaging\\queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "enqueue",
            "dequeue",
            "get_status",
            "clear",
            "_save_queue",
            "_load_queue",
            "shutdown"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "enqueue",
                    "dequeue",
                    "get_status",
                    "clear",
                    "_save_queue",
                    "_load_queue",
                    "shutdown"
                ],
                "docstring": "Manages message queuing and persistence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\agent_control\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\agent_bus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history",
            "subscribe",
            "unsubscribe",
            "get_subscriber_count",
            "cleanup"
        ],
        "classes": {
            "MessagePriority": {
                "methods": [],
                "docstring": "Message priority levels for swarm coordination.",
                "base_classes": [
                    "Enum"
                ]
            },
            "BusMessage": {
                "methods": [],
                "docstring": "Represents a message in the agent bus system.",
                "base_classes": []
            },
            "AgentBus": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "subscribe",
                    "unsubscribe",
                    "get_subscriber_count",
                    "cleanup"
                ],
                "docstring": "A message bus implementation for agent communication with swarm support.\n\nThis class provides a centralized message bus that allows agents to:\n- Publish messages to specific topics\n- Subscribe to topics and receive messages\n- Unsubscribe from topics\n- Query message history\n- Route messages based on patterns\n- Handle message priorities\n- Coordinate swarm behavior",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\ui.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "shutdown",
            "send_message",
            "get_status",
            "_handle_resume",
            "_handle_sync",
            "_handle_verify",
            "_handle_repair",
            "_handle_backup",
            "_handle_restore",
            "_handle_cleanup",
            "_handle_captain",
            "_handle_task",
            "_handle_integrate"
        ],
        "classes": {
            "MessageUI": {
                "methods": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "send_message",
                    "get_status",
                    "_handle_resume",
                    "_handle_sync",
                    "_handle_verify",
                    "_handle_repair",
                    "_handle_backup",
                    "_handle_restore",
                    "_handle_cleanup",
                    "_handle_captain",
                    "_handle_task",
                    "_handle_integrate"
                ],
                "docstring": "Handles message display and interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\core\\messaging\\message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_message",
            "get_status",
            "clear_queue",
            "_process_messages",
            "_deliver_message",
            "_format_message",
            "_chunk_message",
            "verify_chunk"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message delivery modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_message",
                    "get_status",
                    "clear_queue",
                    "_process_messages",
                    "_deliver_message",
                    "_format_message",
                    "_chunk_message",
                    "verify_chunk"
                ],
                "docstring": "Handles message processing and delivery for the cell phone interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\agent_control\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_config"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "set_config"
                ],
                "docstring": "Stubbed config manager for test unblocking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\response_capture.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "capture_response",
            "wait_for_copy_button"
        ],
        "classes": {
            "ResponseCapture": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "capture_response",
                    "wait_for_copy_button"
                ],
                "docstring": "Handles capturing and processing UI responses.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\shared\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_coordinates",
            "save_coordinates",
            "get_coordinates",
            "set_coordinates",
            "validate_coordinates",
            "get_global_ui_coords",
            "set_global_ui_coords",
            "clear_coordinates",
            "get_message_coordinates",
            "get_agent_coordinates"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "load_coordinates",
                    "save_coordinates",
                    "get_coordinates",
                    "set_coordinates",
                    "validate_coordinates",
                    "get_global_ui_coords",
                    "set_global_ui_coords",
                    "clear_coordinates",
                    "get_message_coordinates",
                    "get_agent_coordinates"
                ],
                "docstring": "Manages agent coordinates and positions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\agent_control\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "get_position",
            "wait",
            "move_to_agent",
            "click_input_box",
            "click_copy_button"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "get_position",
                    "wait",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button"
                ],
                "docstring": "Controls cursor movement and interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\ui\\agent_status_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "update_status"
        ],
        "classes": {
            "AgentStatusPanel": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_status"
                ],
                "docstring": "Panel for displaying agent status information.",
                "base_classes": [
                    "QFrame"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\shared\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\ui\\theme_manager.py": {
        "language": ".py",
        "functions": [
            "get_dialog_stylesheet",
            "apply_dialog_theme",
            "is_dark_theme"
        ],
        "classes": {
            "ThemeManager": {
                "methods": [
                    "get_dialog_stylesheet",
                    "apply_dialog_theme",
                    "is_dark_theme"
                ],
                "docstring": "Manages application-wide UI theming.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\ui\\log_console.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "log"
        ],
        "classes": {
            "LogConsole": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "log"
                ],
                "docstring": "Console widget for displaying log messages.",
                "base_classes": [
                    "QFrame"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\utils\\coords.py": {
        "language": ".py",
        "functions": [
            "transform_coordinates",
            "is_valid_coordinate"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\community\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_logging",
            "_create_default_config",
            "_save_config",
            "_load_config",
            "_update_metrics"
        ],
        "classes": {
            "CommunityBase": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "_create_default_config",
                    "_save_config",
                    "_load_config",
                    "_update_metrics"
                ],
                "docstring": "Base class for community management modules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\types.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "format_content",
            "to_dict",
            "from_dict",
            "validate"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message modes for different types of communication.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Message": {
                "methods": [
                    "__post_init__",
                    "format_content",
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Represents a message in the Dream.OS system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\ui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\community\\content_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_default_config",
            "_validate_platform",
            "_validate_content",
            "_validate_scheduled_time",
            "_check_rate_limit",
            "schedule_post",
            "get_schedule",
            "optimize_timing",
            "analyze_performance",
            "_get_optimal_time"
        ],
        "classes": {
            "ContentScheduler": {
                "methods": [
                    "__init__",
                    "_create_default_config",
                    "_validate_platform",
                    "_validate_content",
                    "_validate_scheduled_time",
                    "_check_rate_limit",
                    "schedule_post",
                    "get_schedule",
                    "optimize_timing",
                    "analyze_performance",
                    "_get_optimal_time"
                ],
                "docstring": "Manages content scheduling and optimization across platforms.",
                "base_classes": [
                    "CommunityBase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\community\\audience_analytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_default_config",
            "track_growth",
            "analyze_demographics",
            "generate_insights",
            "export_report",
            "get_audience_metrics",
            "_get_audience_metrics"
        ],
        "classes": {
            "AudienceAnalytics": {
                "methods": [
                    "__init__",
                    "_create_default_config",
                    "track_growth",
                    "analyze_demographics",
                    "generate_insights",
                    "export_report",
                    "get_audience_metrics",
                    "_get_audience_metrics"
                ],
                "docstring": "Analyzes audience engagement and demographics across platforms.",
                "base_classes": [
                    "CommunityBase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\community\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\reorganize_social.py": {
        "language": ".py",
        "functions": [
            "move_directory",
            "update_imports",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "social\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\config\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__repr__",
            "load_config",
            "save_config",
            "__init__",
            "get_platform",
            "_update_memory",
            "get_memory_updates"
        ],
        "classes": {
            "Platform": {
                "methods": [],
                "docstring": "Supported social media platforms.",
                "base_classes": [
                    "Enum"
                ]
            },
            "PlatformConfig": {
                "methods": [
                    "__init__",
                    "__repr__",
                    "load_config",
                    "save_config"
                ],
                "docstring": "Platform-specific configuration and asset management.",
                "base_classes": []
            },
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "get_platform",
                    "_update_memory",
                    "get_memory_updates"
                ],
                "docstring": "Global social media configuration manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "reports\\zip_resolver.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "__init__",
            "resolve",
            "resolve_batch",
            "get_stats",
            "reset",
            "warm_cache",
            "get_circuit_breaker_status"
        ],
        "classes": {
            "ZipResolverConfig": {
                "methods": [],
                "docstring": "Configuration for ZIP code resolution service.",
                "base_classes": []
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute"
                ],
                "docstring": "Circuit breaker pattern implementation.",
                "base_classes": []
            },
            "ZipResolver": {
                "methods": [
                    "__init__",
                    "resolve",
                    "resolve_batch",
                    "get_stats",
                    "reset",
                    "warm_cache",
                    "get_circuit_breaker_status"
                ],
                "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\constants\\platform_constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_platform",
            "__new__",
            "__init__",
            "reset_singleton",
            "write_log",
            "get_logs",
            "clear_logs",
            "cleanup"
        ],
        "classes": {
            "LogConfig": {
                "methods": [
                    "__init__",
                    "add_platform"
                ],
                "docstring": "Configuration for log management.",
                "base_classes": []
            },
            "LogManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "write_log",
                    "get_logs",
                    "clear_logs",
                    "cleanup"
                ],
                "docstring": "Manages logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\core\\driver_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "get_multi_driver_sessions",
            "close_driver",
            "shutdown_all_drivers"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_multi_driver_sessions",
                    "close_driver",
                    "shutdown_all_drivers"
                ],
                "docstring": "Manages browser driver instances for social media platforms.\nThis is a stub implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\core\\dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "dispatch_all",
            "_process_platform",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_shutdown_all_drivers"
                ],
                "docstring": "Main dispatcher for handling social media operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "social\\driver\\driver_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "now",
            "__init__",
            "check_limit",
            "record_usage",
            "get_usage"
        ],
        "classes": {
            "TimeProvider": {
                "methods": [
                    "now"
                ],
                "docstring": "Time provider for rate limiter.",
                "base_classes": []
            },
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_limit",
                    "record_usage",
                    "get_usage"
                ],
                "docstring": "Rate limiter implementation for social media platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\driver\\proxy_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_proxy",
            "remove_proxy",
            "get_proxy",
            "rotate_proxy"
        ],
        "classes": {
            "ProxyManager": {
                "methods": [
                    "__init__",
                    "add_proxy",
                    "remove_proxy",
                    "get_proxy",
                    "rotate_proxy"
                ],
                "docstring": "Manages proxy rotation and selection for social media platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\constants\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\driver\\session_state.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\driver\\performance_metrics.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "LinkedInStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_logged_in",
            "login",
            "post"
        ],
        "classes": {
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Enhanced Facebook platform strategy with media support and robust error handling.",
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "StockTwitsStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\platform_strategy_base.py": {
        "language": ".py",
        "functions": [
            "retry_with_recovery",
            "decorator",
            "__init__",
            "_calculate_retry_delay",
            "_log_error_with_trace",
            "_track_operation_time",
            "_update_memory",
            "_log_action",
            "_handle_media_upload",
            "_validate_media",
            "get_memory_updates",
            "get_operation_stats",
            "is_logged_in",
            "login",
            "post",
            "create_post",
            "_create_post_impl",
            "_find_element",
            "_click_element",
            "_send_keys",
            "wrapper"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "_calculate_retry_delay",
                    "_log_error_with_trace",
                    "_track_operation_time",
                    "_update_memory",
                    "_log_action",
                    "_handle_media_upload",
                    "_validate_media",
                    "get_memory_updates",
                    "get_operation_stats",
                    "is_logged_in",
                    "login",
                    "post",
                    "create_post",
                    "_create_post_impl",
                    "_find_element",
                    "_click_element",
                    "_send_keys"
                ],
                "docstring": "Base class for all social media platform strategies.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 39
    },
    "social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_media",
            "create_post",
            "post",
            "is_logged_in",
            "login",
            "comment"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "_validate_media",
                    "create_post",
                    "post",
                    "is_logged_in",
                    "login",
                    "comment"
                ],
                "docstring": "Strategy for interacting with Reddit.",
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\strategies\\reddit\\handlers\\comment_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_comment",
            "_verify_comment_success"
        ],
        "classes": {
            "CommentHandler": {
                "methods": [
                    "__init__",
                    "add_comment",
                    "_verify_comment_success"
                ],
                "docstring": "Handles all comment-related operations for Reddit.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_media",
            "is_logged_in",
            "login",
            "post",
            "comment"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "_validate_media",
                    "is_logged_in",
                    "login",
                    "post",
                    "comment"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\strategies\\reddit\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\handlers\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "_verify_login_success"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "login",
                    "_verify_login_success"
                ],
                "docstring": "Handles all login-related operations for Reddit.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\rate_limiting\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "rate_limit",
            "__init__",
            "set_rate_limit",
            "get_rate_limit",
            "check_rate_limit",
            "reset_rate_limit",
            "get_remaining_calls",
            "rate_limit",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "set_rate_limit",
                    "get_rate_limit",
                    "check_rate_limit",
                    "reset_rate_limit",
                    "get_remaining_calls",
                    "rate_limit"
                ],
                "docstring": "Rate limiter for API calls.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "social\\strategies\\reddit\\rate_limiting\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\handlers\\post_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "_handle_media_upload",
            "_verify_post_success"
        ],
        "classes": {
            "PostHandler": {
                "methods": [
                    "__init__",
                    "create_post",
                    "_handle_media_upload",
                    "_verify_post_success"
                ],
                "docstring": "Handles all post-related operations for Reddit.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\reddit\\validators\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_media"
                ],
                "docstring": "Validates media files for Reddit posts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\utils\\base_log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "debug",
            "info",
            "warning",
            "error",
            "critical"
        ],
        "classes": {
            "BaseLogManager": {
                "methods": [
                    "__init__",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical"
                ],
                "docstring": "Base class for log managers with minimal functionality.",
                "base_classes": []
            },
            "LogLevel": {
                "methods": [],
                "docstring": "Standard log levels for consistent logging across the application.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_config",
            "save_config",
            "get",
            "set",
            "update",
            "get_platform_config",
            "get_memory_updates",
            "_update_memory"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "load_config",
                    "save_config",
                    "get",
                    "set",
                    "update",
                    "get_platform_config",
                    "get_memory_updates",
                    "_update_memory"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\utils\\log_writer.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "__init__",
            "write_log"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels for entries.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogEntry": {
                "methods": [],
                "docstring": "Represents a single log entry.",
                "base_classes": []
            },
            "LogWriter": {
                "methods": [
                    "__init__",
                    "write_log"
                ],
                "docstring": "Handles writing log entries to files.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "social\\utils\\log_config.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "__init__"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Logging levels as an enum for type safety.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for logging setup.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "social\\utils\\log_batcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add",
            "get_entries",
            "is_empty",
            "should_flush",
            "flush"
        ],
        "classes": {
            "LogBatcher": {
                "methods": [
                    "__init__",
                    "add",
                    "get_entries",
                    "is_empty",
                    "should_flush",
                    "flush"
                ],
                "docstring": "Batches log entries for efficient writing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\core\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment_logs",
            "record_error",
            "record_rotation",
            "get_metrics",
            "reset",
            "get_uptime"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "increment_logs",
                    "record_error",
                    "record_rotation",
                    "get_metrics",
                    "reset",
                    "get_uptime"
                ],
                "docstring": "Tracks metrics for logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\utils\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment",
            "increment_logs",
            "record_error",
            "record_rotation",
            "get_metric",
            "get_all_metrics",
            "reset",
            "get_uptime"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "increment",
                    "increment_logs",
                    "record_error",
                    "record_rotation",
                    "get_metric",
                    "get_all_metrics",
                    "reset",
                    "get_uptime"
                ],
                "docstring": "Tracks and aggregates logging metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\utils\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "reset_singleton",
            "info",
            "warning",
            "error",
            "debug",
            "_get_extra"
        ],
        "classes": {
            "LogManager": {
                "methods": [
                    "__init__",
                    "reset_singleton",
                    "info",
                    "warning",
                    "error",
                    "debug",
                    "_get_extra"
                ],
                "docstring": "Simple wrapper around Python's logging module.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\utils\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_files",
            "validate",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_files",
                    "validate",
                    "validate_media"
                ],
                "docstring": "Validates media files for upload.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\utils\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_rate_limit"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_rate_limit"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\utils\\social_common.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_for_element",
            "wait_for_clickable",
            "retry_click",
            "handle_login",
            "post_content",
            "verify_post_success",
            "validate_media",
            "upload_media"
        ],
        "classes": {
            "SocialMediaUtils": {
                "methods": [
                    "__init__",
                    "wait_for_element",
                    "wait_for_clickable",
                    "retry_click",
                    "handle_login",
                    "post_content",
                    "verify_post_success",
                    "validate_media",
                    "upload_media"
                ],
                "docstring": "Common utilities for social media operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_attempt_login",
            "login",
            "logout",
            "verify_session",
            "refresh_token",
            "cleanup_expired_sessions",
            "login_operation"
        ],
        "classes": {
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_attempt_login",
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token",
                    "cleanup_expired_sessions"
                ],
                "docstring": "Authentication manager implementing the platform-agnostic interface.",
                "base_classes": [
                    "AbstractAuthInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tests\\cleanup_test_artifacts.py": {
        "language": ".py",
        "functions": [
            "cleanup_test_artifacts"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "setup_test_dirs",
            "clean_test_dirs",
            "setup_logging",
            "mock_pyautogui",
            "temp_dir",
            "temp_log_dir",
            "mock_config",
            "log_config",
            "setup_test_env",
            "pytest_configure",
            "pytest_collection_modifyitems",
            "test_data_dir",
            "mock_agent_registry",
            "test_messages",
            "clean_runtime_dir",
            "voice_queue",
            "bot",
            "temp_config_dir",
            "temp_runtime_dir",
            "message_processor",
            "agent_operations",
            "temp_voice_dir",
            "mock_driver_manager",
            "mock_dispatcher",
            "mock_rate_limiter",
            "mock_platform_strategy",
            "gui_test_env",
            "mock_agent_config",
            "test_log_dir",
            "mock_log_data",
            "mock_log_file",
            "mock_old_log_file",
            "mock_compressed_log_file",
            "setup_and_cleanup",
            "temp_log_dir"
        ],
        "classes": {},
        "routes": [],
        "complexity": 35
    },
    "tests\\run_tests.py": {
        "language": ".py",
        "functions": [
            "run_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining",
            "extend",
            "__init__",
            "start_cleanup",
            "stop_cleanup",
            "create_session",
            "get_session",
            "invalidate_session",
            "cleanup_expired",
            "_generate_session_id",
            "cleanup_loop"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining",
                    "extend"
                ],
                "docstring": "Represents an active user session.",
                "base_classes": []
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "start_cleanup",
                    "stop_cleanup",
                    "create_session",
                    "get_session",
                    "invalidate_session",
                    "cleanup_expired",
                    "_generate_session_id"
                ],
                "docstring": "Manages user sessions with automatic cleanup.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "tests\\test_response_collector.py": {
        "language": ".py",
        "functions": [
            "test_collector",
            "test_collector_mock",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "social\\strategies\\reddit\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining",
            "__init__",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": []
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\agent_control\\test_captain.py": {
        "language": ".py",
        "functions": [
            "temp_runtime_dir",
            "mock_message_processor",
            "mock_agent_operations",
            "mock_ui_automation",
            "controller",
            "test_agent_controller_initialization",
            "test_agent_controller_onboarding",
            "make_menu_builder_mock",
            "test_agent_controller_message_sending",
            "test_agent_controller_error_handling",
            "test_agent_controller_cleanup"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "social\\utils\\log_rotator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "should_rotate",
            "rotate"
        ],
        "classes": {
            "RotationConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for log rotation.",
                "base_classes": []
            },
            "LogRotator": {
                "methods": [
                    "__init__",
                    "should_rotate",
                    "rotate"
                ],
                "docstring": "Handles rotation of log files.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\agent_control\\test_control.py": {
        "language": ".py",
        "functions": [
            "setup_test_env",
            "mock_coords",
            "mock_config_file",
            "mock_pyautogui",
            "agent_control",
            "transformer",
            "test_agent_control_initialization",
            "test_load_coordinates",
            "test_load_coordinates_missing_file",
            "test_move_to_agent",
            "test_click_input_box",
            "test_click_copy_button",
            "test_get_response_region",
            "test_get_response_region_missing_agent",
            "test_coordinate_transformer_initialization",
            "test_coordinate_transformer_screen_size",
            "test_transform_coordinates",
            "test_transform_coordinate_dict"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "tests\\agent_control\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\agent_control\\test_tasks.py": {
        "language": ".py",
        "functions": [
            "agent_control",
            "is_headless_or_mocked",
            "test_window_focus_verification",
            "test_screenshot_quality"
        ],
        "classes": {
            "TestAgent1Tasks": {
                "methods": [
                    "agent_control",
                    "is_headless_or_mocked",
                    "test_window_focus_verification",
                    "test_screenshot_quality"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\auth\\test_auth_interface.py": {
        "language": ".py",
        "functions": [
            "test_auth_interface_contract",
            "test_auth_interface_methods",
            "test_auth_interface_method_signatures",
            "test_auth_interface_implementation",
            "login",
            "logout",
            "verify_session",
            "refresh_token",
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ]
            },
            "IncompleteAuth": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "AbstractAuthInterface"
                ]
            },
            "TestAuth": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": null,
                "base_classes": [
                    "AbstractAuthInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\auth\\test_auth_manager.py": {
        "language": ".py",
        "functions": [
            "test_auth_manager_initialization",
            "test_auth_manager_default_config",
            "test_auth_manager_login_flow",
            "test_auth_manager_login_max_retries",
            "test_auth_manager_session_management",
            "test_auth_manager_session_expiration",
            "__init__",
            "_attempt_login",
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_attempt_login",
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Authentication manager implementing the platform-agnostic interface.",
                "base_classes": [
                    "AbstractAuthInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_config.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "cleanup_test_environment",
            "test_cleanup",
            "test_config_file_creation",
            "test_test_directories_creation",
            "setup_teardown"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\auth\\test_retry_mechanism.py": {
        "language": ".py",
        "functions": [
            "test_exponential_backoff",
            "test_retry_with_success",
            "test_retry_with_failure",
            "test_retry_delay_timing",
            "test_retry_with_custom_error",
            "test_retry_with_mock",
            "__init__",
            "calculate_delay",
            "execute",
            "operation",
            "operation",
            "operation",
            "operation"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\auth\\test_token.py": {
        "language": ".py",
        "functions": [
            "test_token_info_creation",
            "test_token_info_expiration",
            "test_token_handler_initialization",
            "test_token_generation",
            "test_token_validation",
            "test_token_refresh",
            "test_token_invalidation",
            "test_token_cleanup",
            "test_token_custom_ttl",
            "test_token_custom_scope",
            "test_token_custom_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\cli\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\cli\\test_cellphone_cli.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "run_cli_command",
            "test_cli_help",
            "test_cli_required_args",
            "test_cli_welcome_message",
            "test_cli_custom_message",
            "test_cli_invalid_priority",
            "test_cli_invalid_mode",
            "test_cli_message_with_mode",
            "test_cli_concurrent_messages"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\community\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\test_init_mailbox.py": {
        "language": ".py",
        "functions": [
            "test_imports",
            "temp_mailbox_dir",
            "test_agent_id",
            "mailbox",
            "test_get_initial_state",
            "test_init_mailbox_creates_files",
            "test_init_mailbox_file_contents",
            "test_init_mailbox_duplicate",
            "test_reset_mailbox_creates_backup",
            "test_reset_mailbox_restores_state",
            "test_reset_nonexistent_mailbox",
            "test_init_mailbox_invalid_agent_id",
            "test_init_mailbox_invalid_directory",
            "test_reset_mailbox_permission_error",
            "test_concurrent_mailbox_operations",
            "test_mailbox_file_permissions",
            "test_mailbox_file_encoding",
            "test_mailbox_file_corruption",
            "test_mailbox_directory_cleanup",
            "raise_oserror",
            "mock_copytree",
            "init_operation",
            "reset_operation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 23
    },
    "tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\community\\test_base.py": {
        "language": ".py",
        "functions": [
            "temp_config_dir",
            "temp_log_dir",
            "base_instance",
            "test_init",
            "test_create_default_config",
            "test_save_config",
            "test_save_config_permission_error",
            "test_load_config",
            "test_load_nonexistent_config",
            "test_load_invalid_config",
            "test_update_metrics",
            "test_update_metrics_invalid_type",
            "test_update_metrics_nested"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tests\\core\\test_response_collector.py": {
        "language": ".py",
        "functions": [
            "test_collector",
            "test_collector_mock",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\core\\test_special_chars.py": {
        "language": ".py",
        "functions": [
            "test_multiline_text"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\core\\test_queue.py": {
        "language": ".py",
        "functions": [
            "queue",
            "test_queue_initialization",
            "test_add_message",
            "test_get_message",
            "test_clear_queue",
            "test_persistent_storage",
            "test_message_priority",
            "test_queue_size_limit",
            "test_invalid_message",
            "test_empty_queue",
            "test_message_history",
            "test_clear_history",
            "test_queue_status",
            "test_queue_shutdown"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "tests\\core\\test_utils.py": {
        "language": ".py",
        "functions": [
            "create_mock_embed",
            "mock_discord_file",
            "test_mock_guild",
            "test_mock_channel",
            "test_mock_member",
            "test_mock_message",
            "test_mock_context",
            "test_mock_bot",
            "test_create_mock_embed",
            "test_mock_discord_file",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MockGuild": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord guild for testing.",
                "base_classes": []
            },
            "MockChannel": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord channel for testing.",
                "base_classes": []
            },
            "MockMember": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord member for testing.",
                "base_classes": []
            },
            "MockMessage": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord message for testing.",
                "base_classes": []
            },
            "MockContext": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord context for testing.",
                "base_classes": []
            },
            "MockBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord bot for testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\core\\test_coordinates.py": {
        "language": ".py",
        "functions": [
            "move_to_coords",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\core\\test_message_loop.py": {
        "language": ".py",
        "functions": [
            "mock_agent_control",
            "mock_message_processor",
            "gui_test_env",
            "test_full_message_loop",
            "test_message_loop_error_handling",
            "test_message_loop_invalid_agent",
            "test_real_agent_messages",
            "test_real_ui_automation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tests\\discord\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\test_log_manager.py": {
        "language": ".py",
        "functions": [
            "reset_log_manager",
            "clean_temp_log_dir",
            "test_write_log",
            "test_read_logs",
            "test_log_rotation",
            "test_cleanup",
            "test_singleton",
            "test_metrics",
            "test_get_all_logs",
            "test_log_manager_initialization"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\helpers\\discord_test_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\dreamos\\test_cli.py": {
        "language": ".py",
        "functions": [
            "test_cli_script_exists",
            "test_cli_help",
            "test_cli_version",
            "test_cli_invalid_command"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "social\\strategies\\reddit\\post_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post"
        ],
        "classes": {
            "PostHandler": {
                "methods": [
                    "__init__",
                    "create_post"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tests\\discord\\test_discord_commands.py": {
        "language": ".py",
        "functions": [
            "test_command_execution",
            "__init__",
            "__init__"
        ],
        "classes": {
            "TestHelpMenu": {
                "methods": [],
                "docstring": "Test the HelpMenu class functionality.",
                "base_classes": []
            },
            "TestAgentCommands": {
                "methods": [],
                "docstring": "Test the agent command functionality.",
                "base_classes": []
            },
            "MockContext": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord context.",
                "base_classes": []
            },
            "MockMessage": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord message.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "tests\\messaging\\test_cell_phone.py": {
        "language": ".py",
        "functions": [
            "reset_singleton",
            "cell_phone",
            "test_basic_message_sending",
            "test_message_priorities",
            "test_message_modes",
            "test_rate_limiting",
            "test_empty_message",
            "test_invalid_priority",
            "test_invalid_message_mode",
            "test_invalid_agent_name",
            "test_status_tracking",
            "test_concurrent_messages",
            "test_message_history",
            "test_message_validation",
            "test_send_message_validation",
            "test_message_queue_operations",
            "test_shutdown",
            "test_singleton_behavior"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "tests\\messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\reports\\test_report_formatter.py": {
        "language": ".py",
        "functions": [
            "sample_data",
            "test_format_markdown_report",
            "test_format_discord_report",
            "test_format_instagram_report",
            "test_format_report_invalid_format",
            "test_format_report_missing_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\social\\core\\test_dispatcher.py": {
        "language": ".py",
        "functions": [
            "setup_test_directories",
            "mock_driver",
            "mock_config",
            "mock_memory_update",
            "mock_strategy",
            "test_retry_on_login_failure",
            "test_max_retries_exceeded",
            "test_rate_limit_respect",
            "test_rate_limit_persistent",
            "test_valid_media_processing",
            "test_invalid_media_rejection",
            "login_side_effect",
            "is_logged_in_side_effect",
            "rate_limit_side_effect"
        ],
        "classes": {
            "TestDispatcherRetryLogic": {
                "methods": [
                    "test_retry_on_login_failure",
                    "test_max_retries_exceeded"
                ],
                "docstring": "Test suite for dispatcher retry functionality.",
                "base_classes": []
            },
            "TestDispatcherRateLimiting": {
                "methods": [
                    "test_rate_limit_respect",
                    "test_rate_limit_persistent"
                ],
                "docstring": "Test suite for dispatcher rate limiting functionality.",
                "base_classes": []
            },
            "TestDispatcherMediaValidation": {
                "methods": [
                    "test_valid_media_processing",
                    "test_invalid_media_rejection"
                ],
                "docstring": "Test suite for dispatcher media validation functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\social\\core\\test_log_writer.py": {
        "language": ".py",
        "functions": [
            "test_log_dir",
            "log_writer",
            "sample_log_entry",
            "test_initialization",
            "test_write_log_json",
            "test_write_log_text",
            "test_write_log_error_handling",
            "test_write_log_encoding",
            "test_write_log_file_creation",
            "test_write_multiple_entries",
            "test_write_entry_with_metadata",
            "test_write_entry_permission_error"
        ],
        "classes": {
            "TestLogWriter": {
                "methods": [
                    "test_initialization",
                    "test_write_log_json",
                    "test_write_log_text",
                    "test_write_log_error_handling",
                    "test_write_log_encoding",
                    "test_write_log_file_creation",
                    "test_write_multiple_entries",
                    "test_write_entry_with_metadata",
                    "test_write_entry_permission_error"
                ],
                "docstring": "Test suite for LogWriter functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "tests\\reports\\test_crime_report_pipeline.py": {
        "language": ".py",
        "functions": [
            "mock_data",
            "test_generate_report_both_sources",
            "test_generate_report_arcgis_only",
            "test_generate_report_json_format",
            "test_main_stdout",
            "test_main_file_output",
            "test_main_invalid_year",
            "test_main_multiple_zips"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tests\\auth\\test_session.py": {
        "language": ".py",
        "functions": [
            "test_session_creation",
            "test_session_expiration",
            "test_session_extension",
            "test_session_manager_initialization",
            "test_session_manager_creation",
            "test_session_manager_retrieval",
            "test_session_manager_invalidation",
            "test_session_manager_cleanup",
            "test_session_manager_max_sessions"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "tests\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\test_content_scheduler.py": {
        "language": ".py",
        "functions": [
            "scheduler_instance",
            "test_init",
            "test_create_default_config",
            "test_schedule_post",
            "test_schedule_post_invalid_data",
            "test_schedule_post_rate_limit",
            "test_get_schedule",
            "test_get_schedule_invalid_platform",
            "test_optimize_timing",
            "test_optimize_timing_invalid_platform",
            "test_analyze_performance",
            "test_analyze_performance_no_data",
            "test_get_optimal_time",
            "test_get_optimal_time_invalid_platform",
            "test_save_config_permission_error",
            "test_load_config_invalid_format",
            "test_save_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "tests\\social\\core\\test_log_manager.py": {
        "language": ".py",
        "functions": [
            "test_log_dir",
            "log_config",
            "mock_writer",
            "mock_rotator",
            "mock_batcher",
            "log_manager",
            "test_log_manager_initialization",
            "test_log_manager_singleton",
            "test_log_manager_reset",
            "test_log_manager_shutdown",
            "test_log_manager_flush",
            "test_write_log",
            "test_write_batch"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tests\\reports\\test_zip_mapper.py": {
        "language": ".py",
        "functions": [
            "test_get_zip_info_local_cache",
            "test_get_zip_info_api_fallback",
            "test_get_zip_info_api_error",
            "test_format_location",
            "test_get_zip_details",
            "test_montgomery_zips_completeness"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\social\\test_audience_analytics.py": {
        "language": ".py",
        "functions": [
            "analytics_instance",
            "test_init",
            "test_create_default_config",
            "test_track_growth",
            "test_track_growth_invalid_data",
            "test_analyze_demographics",
            "test_analyze_demographics_invalid_data",
            "test_generate_insights",
            "test_generate_insights_invalid_data",
            "test_export_report",
            "test_export_report_invalid_format",
            "test_export_report_permission_error",
            "test_get_audience_metrics",
            "test_get_audience_metrics_invalid_platform",
            "raise_permission_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "tests\\social\\strategies\\test_reddit_media.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_utils",
            "mock_logger",
            "media_handler",
            "temp_image_file",
            "temp_video_file",
            "test_validate_media_empty_list",
            "test_validate_media_too_many_images",
            "test_validate_media_too_many_videos",
            "test_validate_media_unsupported_format",
            "test_validate_media_file_not_found",
            "test_validate_media_success",
            "test_upload_media_missing_button",
            "test_upload_media_button_click_failure",
            "test_upload_media_missing_file_input",
            "test_upload_media_upload_timeout",
            "test_upload_media_success",
            "test_upload_media_multiple_files",
            "test_handle_upload_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 19
    },
    "tests\\social\\strategies\\test_reddit_auth.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_utils",
            "mock_logger",
            "mock_memory",
            "auth_handler",
            "test_initialization",
            "test_is_logged_in_when_logged_in",
            "test_is_logged_in_when_not_logged_in",
            "test_login_success",
            "test_login_missing_credentials",
            "test_login_form_not_found",
            "test_login_click_intercepted",
            "test_login_verification_failed",
            "test_is_logged_in_when_login_form_present",
            "test_is_logged_in_when_user_menu_present",
            "test_is_logged_in_when_neither_present",
            "test_login_failure_missing_form",
            "test_login_failure_missing_button",
            "test_login_retry_click_failure",
            "test_login_already_logged_in",
            "test_login_unexpected_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 21
    },
    "tests\\social\\strategies\\test_content_management.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_content",
            "validate_content",
            "schedule_content",
            "publish_content",
            "_get_content_by_id",
            "content_manager",
            "test_content_creation",
            "test_content_validation",
            "test_content_scheduling",
            "test_content_publishing"
        ],
        "classes": {
            "ContentManager": {
                "methods": [
                    "__init__",
                    "create_content",
                    "validate_content",
                    "schedule_content",
                    "publish_content",
                    "_get_content_by_id"
                ],
                "docstring": "Content management system for social media platforms.",
                "base_classes": []
            },
            "TestContentManager": {
                "methods": [
                    "content_manager",
                    "test_content_creation",
                    "test_content_validation",
                    "test_content_scheduling",
                    "test_content_publishing"
                ],
                "docstring": "Test suite for content management system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\social\\strategies\\test_reddit_rate_limiter.py": {
        "language": ".py",
        "functions": [
            "rate_limiter",
            "test_initialization",
            "test_get_rate_limit",
            "test_custom_limits",
            "test_rate_limit_exhaustion",
            "test_rate_limit_reset",
            "test_rate_limit_window"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\social\\core\\test_log_metrics.py": {
        "language": ".py",
        "functions": [
            "metrics",
            "test_metrics_initialization",
            "test_metrics_increment_logs",
            "test_metrics_record_error",
            "test_metrics_record_rotation",
            "test_metrics_reset"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\social\\strategies\\test_platform_interface.py": {
        "language": ".py",
        "functions": [
            "initialize",
            "login",
            "post_content",
            "get_rate_limits",
            "get_session_state",
            "mock_platform",
            "test_platform_interface_contract",
            "test_platform_initialization",
            "test_platform_state_management",
            "test_platform_error_handling",
            "__init__",
            "initialize",
            "login",
            "post_content",
            "get_rate_limits",
            "get_session_state"
        ],
        "classes": {
            "SocialPlatform": {
                "methods": [
                    "initialize",
                    "login",
                    "post_content",
                    "get_rate_limits",
                    "get_session_state"
                ],
                "docstring": "Abstract base class defining the interface for social media platforms.",
                "base_classes": [
                    "ABC"
                ]
            },
            "TestPlatformInterface": {
                "methods": [
                    "mock_platform",
                    "test_platform_interface_contract",
                    "test_platform_initialization",
                    "test_platform_state_management",
                    "test_platform_error_handling"
                ],
                "docstring": "Test suite for platform interface implementation.",
                "base_classes": []
            },
            "MockPlatform": {
                "methods": [
                    "__init__",
                    "initialize",
                    "login",
                    "post_content",
                    "get_rate_limits",
                    "get_session_state"
                ],
                "docstring": null,
                "base_classes": [
                    "SocialPlatform"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "tests\\social\\strategies\\test_rate_limiter.py": {
        "language": ".py",
        "functions": [
            "now",
            "__init__",
            "check_limit",
            "record_usage",
            "get_usage",
            "rate_limiter",
            "test_rate_limiter_initialization",
            "test_rate_limit_checking",
            "test_rate_limit_recording",
            "test_rate_limit_reset",
            "test_multiple_endpoints",
            "test_edge_cases",
            "time_provider"
        ],
        "classes": {
            "TimeProvider": {
                "methods": [
                    "now"
                ],
                "docstring": "Time provider for rate limiter.",
                "base_classes": []
            },
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_limit",
                    "record_usage",
                    "get_usage"
                ],
                "docstring": "Rate limiter implementation for social media platforms.",
                "base_classes": []
            },
            "TestRateLimiter": {
                "methods": [
                    "rate_limiter",
                    "test_rate_limiter_initialization",
                    "test_rate_limit_checking",
                    "test_rate_limit_recording",
                    "test_rate_limit_reset",
                    "test_multiple_endpoints",
                    "test_edge_cases"
                ],
                "docstring": "Test suite for rate limiter implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "tests\\social\\strategies\\test_analytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_engagement",
            "get_content_metrics",
            "get_platform_metrics",
            "calculate_engagement_rate",
            "analytics_manager",
            "test_engagement_tracking",
            "test_content_metrics",
            "test_platform_metrics",
            "test_engagement_rate"
        ],
        "classes": {
            "AnalyticsManager": {
                "methods": [
                    "__init__",
                    "track_engagement",
                    "get_content_metrics",
                    "get_platform_metrics",
                    "calculate_engagement_rate"
                ],
                "docstring": "Analytics management system for social media content.",
                "base_classes": []
            },
            "TestAnalyticsManager": {
                "methods": [
                    "analytics_manager",
                    "test_engagement_tracking",
                    "test_content_metrics",
                    "test_platform_metrics",
                    "test_engagement_rate"
                ],
                "docstring": "Test suite for analytics management system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\social\\strategies\\reddit\\test_post_handler.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_config",
            "mock_memory_update",
            "post_handler",
            "test_initialization",
            "test_create_post_success",
            "test_create_post_timeout",
            "test_create_post_click_intercepted",
            "test_create_post_with_media"
        ],
        "classes": {
            "TestPostHandler": {
                "methods": [
                    "test_initialization",
                    "test_create_post_success",
                    "test_create_post_timeout",
                    "test_create_post_click_intercepted",
                    "test_create_post_with_media"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\social\\strategies\\test_reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_config",
            "mock_memory_update",
            "strategy",
            "reddit_strategy_fixture",
            "test_initialization",
            "test_is_logged_in",
            "test_validate_media",
            "test_validate_media_edge_cases",
            "test_validate_media_real_files",
            "test_memory_error_tracking",
            "test_post_and_comment_flow",
            "test_rate_limiting_flow",
            "test_validate_media_single_image",
            "test_validate_media_empty",
            "test_validate_media_unsupported_format",
            "test_validate_media_too_many_images",
            "test_validate_media_invalid_format",
            "mock_splitext",
            "mock_splitext"
        ],
        "classes": {
            "TestRedditStrategy": {
                "methods": [
                    "test_initialization",
                    "test_is_logged_in",
                    "test_validate_media",
                    "test_validate_media_edge_cases",
                    "test_validate_media_real_files",
                    "test_memory_error_tracking",
                    "test_post_and_comment_flow",
                    "test_rate_limiting_flow",
                    "test_validate_media_single_image",
                    "test_validate_media_empty",
                    "test_validate_media_unsupported_format",
                    "test_validate_media_too_many_images",
                    "test_validate_media_invalid_format"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 33
    },
    "tests\\social\\utils\\test_log_batcher.py": {
        "language": ".py",
        "functions": [
            "test_batcher_initialization",
            "test_add_entry",
            "test_add_entry_after_timeout",
            "test_get_entries",
            "test_add_entries_until_full",
            "test_concurrent_access",
            "add_entries"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\social\\strategies\\reddit\\test_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_config",
            "mock_memory_update",
            "strategy",
            "test_initialization",
            "test_is_logged_in",
            "test_login",
            "test_post_success",
            "test_post_with_media",
            "test_post_not_logged_in",
            "test_comment_success",
            "test_comment_not_logged_in"
        ],
        "classes": {
            "TestRedditStrategy": {
                "methods": [
                    "test_initialization",
                    "test_is_logged_in",
                    "test_login",
                    "test_post_success",
                    "test_post_with_media",
                    "test_post_not_logged_in",
                    "test_comment_success",
                    "test_comment_not_logged_in"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\social\\utils\\test_log_rotator.py": {
        "language": ".py",
        "functions": [
            "test_log_dir",
            "rotation_config",
            "log_rotator",
            "test_log_rotator_initialization",
            "test_rotate_large_file",
            "test_compress_old_file",
            "test_cleanup_old_files",
            "test_do_not_rotate_small_file",
            "test_do_not_compress_new_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "tests\\social\\utils\\test_media_validator.py": {
        "language": ".py",
        "functions": [
            "test_validate_empty_files",
            "test_validate_single_image",
            "test_validate_missing_file",
            "test_validate_unsupported_format",
            "test_validate_file_too_large",
            "test_validate_too_many_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\social\\strategies\\test_strategy_base.py": {
        "language": ".py",
        "functions": [
            "patch_sqlite_and_rate_limiter",
            "patch_social_media_utils",
            "mock_sqlite",
            "mock_driver",
            "specific_strategy_mock_config",
            "mock_memory_update",
            "mock_utils",
            "mock_log_manager",
            "strategy",
            "test_init",
            "test_calculate_retry_delay",
            "test_validate_media_single_image",
            "test_validate_media_empty",
            "test_validate_media_unsupported_format",
            "test_login_success",
            "test_login_missing_credentials",
            "test_login_failure",
            "test_login_verification_failed",
            "test_login_input_not_found",
            "test_login_button_click_failed",
            "test_is_logged_in_true",
            "test_is_logged_in_false",
            "test_post_success",
            "test_post_failure",
            "test_post_verification_failed",
            "test_post_button_not_found",
            "test_post_not_logged_in",
            "test_post_media_validation_failed",
            "test_post_media_upload_failed",
            "test_upload_media_success",
            "test_upload_media_button_not_found",
            "test_upload_media_click_failed",
            "test_validate_media_too_many_files",
            "test_validate_media_file_too_large",
            "test_validate_media_file_not_found",
            "test_validate_media_valid_image",
            "test_validate_media_invalid_format",
            "test_validate_media_too_many_images",
            "test_validate_media_video_unsupported",
            "test_validate_media_valid_video_when_specified"
        ],
        "classes": {},
        "routes": [],
        "complexity": 40
    },
    "tests\\utils\\gui_test_utils.py": {
        "language": ".py",
        "functions": [
            "is_headless_environment",
            "get_display_info",
            "should_skip_gui_test"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\social\\strategies\\reddit\\test_reddit_platform_rate_limiter.py": {
        "language": ".py",
        "functions": [
            "rate_limiter",
            "test_initialization",
            "test_get_rate_limit",
            "test_set_rate_limit",
            "test_check_rate_limit_default",
            "test_check_rate_limit_exceeded",
            "test_check_rate_limit_window_reset",
            "test_rate_limit_decorator",
            "__init__",
            "test_method"
        ],
        "classes": {
            "TestRateLimiter": {
                "methods": [
                    "test_initialization",
                    "test_get_rate_limit",
                    "test_set_rate_limit",
                    "test_check_rate_limit_default",
                    "test_check_rate_limit_exceeded",
                    "test_check_rate_limit_window_reset",
                    "test_rate_limit_decorator"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestClass": {
                "methods": [
                    "__init__",
                    "test_method"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "tests\\utils\\__init__.py": {
        "language": ".py",
        "functions": [
            "create_temp_config",
            "cleanup_temp_file",
            "mock_config",
            "create_mock_embed",
            "run_async_test",
            "mock_discord_file",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MockMessage": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Minimal mock for discord.Message.",
                "base_classes": []
            },
            "MockMember": {
                "methods": [],
                "docstring": "Minimal mock for discord.Member.",
                "base_classes": []
            },
            "MockChannel": {
                "methods": [],
                "docstring": "Minimal mock for discord.TextChannel.",
                "base_classes": []
            },
            "MockGuild": {
                "methods": [],
                "docstring": "Minimal mock for discord.Guild.",
                "base_classes": []
            },
            "MockContext": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Minimal mock for discord.ext.commands.Context.",
                "base_classes": []
            },
            "MockBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Minimal mock for discord.ext.commands.Bot.",
                "base_classes": []
            },
            "DummyEmbed": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "DummyFile": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\voice\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\voice\\test_tts.py": {
        "language": ".py",
        "functions": [
            "output_dir",
            "tts_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\utils\\mock_discord.py": {
        "language": ".py",
        "functions": [
            "create_mock_context",
            "create_mock_embed",
            "run_async_test",
            "mock_discord_file",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MockMessage": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord message object.",
                "base_classes": []
            },
            "MockChannel": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord channel object.",
                "base_classes": []
            },
            "MockGuild": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord guild object.",
                "base_classes": []
            },
            "MockUser": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord user object.",
                "base_classes": []
            },
            "MockMember": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord member object.",
                "base_classes": []
            },
            "MockContext": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord command context.",
                "base_classes": []
            },
            "MockBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord bot object.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools\\coordinate_utils.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "validate_coordinates",
            "regions_overlap",
            "calculate_overlap",
            "highlight_overlap_regions",
            "compare_layouts"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tools\\check_cursor_coords.py": {
        "language": ".py",
        "functions": [
            "on_click",
            "on_press"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\run_menu.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\utils\\test_utils.py": {
        "language": ".py",
        "functions": [
            "safe_remove",
            "ensure_test_dirs",
            "setup_test_environment",
            "cleanup_test_environment"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\social\\utils\\test_log_config.py": {
        "language": ".py",
        "functions": [
            "test_config_initialization",
            "test_config_defaults",
            "test_config_custom_values",
            "test_config_invalid_level",
            "test_config_custom_format",
            "test_config_custom_date_format"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tools\\recalibrate_coords.py": {
        "language": ".py",
        "functions": [
            "get_window_info",
            "capture_point",
            "validate_unique_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\layout_snapshot.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_screen_info",
            "_compute_hash",
            "create_snapshot",
            "_save_snapshot",
            "load_snapshot",
            "list_snapshots",
            "compare_snapshots"
        ],
        "classes": {
            "LayoutSnapshot": {
                "methods": [],
                "docstring": "Represents a snapshot of agent layouts.",
                "base_classes": []
            },
            "LayoutSnapshotManager": {
                "methods": [
                    "__init__",
                    "_get_screen_info",
                    "_compute_hash",
                    "create_snapshot",
                    "_save_snapshot",
                    "load_snapshot",
                    "list_snapshots",
                    "compare_snapshots"
                ],
                "docstring": "Manages layout snapshots.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\capture_copy_button.py": {
        "language": ".py",
        "functions": [
            "capture_template",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\overlap_heatmap.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_create_density_map",
            "generate_heatmap",
            "analyze_overlaps"
        ],
        "classes": {
            "OverlapHeatmapGenerator": {
                "methods": [
                    "__init__",
                    "_create_density_map",
                    "generate_heatmap",
                    "analyze_overlaps"
                ],
                "docstring": "Generates heatmaps of agent region overlaps.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tools\\send_task.py": {
        "language": ".py",
        "functions": [
            "send_optimization_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\test_regions.py": {
        "language": ".py",
        "functions": [
            "get_all_screens",
            "load_regions",
            "capture_new_region",
            "highlight_region",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools\\visualize_agent_layout.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_draw_point",
            "_draw_region",
            "visualize_agent",
            "visualize_all_agents",
            "analyze_layout"
        ],
        "classes": {
            "AgentLayoutVisualizer": {
                "methods": [
                    "__init__",
                    "_draw_point",
                    "_draw_region",
                    "visualize_agent",
                    "visualize_all_agents",
                    "analyze_layout"
                ],
                "docstring": "Visualizes agent positions and regions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "tests\\voice\\test_voicebot.py": {
        "language": ".py",
        "functions": [
            "voice_queue_dir",
            "mock_voice_client",
            "voice_bot"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    }
}