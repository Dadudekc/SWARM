{
    "send_task.py": {
        "language": ".py",
        "functions": [
            "send_optimization_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\utils\\test_init_mailbox.py": {
        "language": ".py",
        "functions": [
            "test_imports",
            "temp_mailbox_dir",
            "test_agent_id",
            "test_get_initial_state",
            "test_init_mailbox_creates_files",
            "test_init_mailbox_file_contents",
            "test_init_mailbox_duplicate",
            "test_reset_mailbox_creates_backup",
            "test_reset_mailbox_restores_state",
            "test_reset_nonexistent_mailbox",
            "test_init_mailbox_invalid_agent_id",
            "test_init_mailbox_invalid_directory",
            "test_reset_mailbox_permission_error",
            "test_concurrent_mailbox_operations",
            "mock_copytree",
            "init_operation",
            "reset_operation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "agent_tools\\agent_cellphone.py": {
        "language": ".py",
        "functions": [
            "get_welcome_message",
            "send_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "run_menu.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\utils\\init_mailbox.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_initial_state",
            "_write_mailbox_files",
            "reset",
            "initialize"
        ],
        "classes": {
            "AgentMailbox": {
                "methods": [
                    "__init__",
                    "_get_initial_state",
                    "_write_mailbox_files",
                    "reset",
                    "initialize"
                ],
                "docstring": "A class to manage agent mailboxes, including initialization and reset operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_cell_phone.py": {
        "language": ".py",
        "functions": [
            "test_basic_messages",
            "test_system_messages",
            "test_task_messages",
            "test_maintenance_messages",
            "test_rate_limiting",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "core\\utils\\init_mailbox.py": {
        "language": ".py",
        "functions": [
            "get_initial_state",
            "reset_agent_mailbox",
            "init_agent_mailbox",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "discord_bot\\bot.py": {
        "language": ".py",
        "functions": [
            "run_bot"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "mock_pyautogui",
            "test_data_dir",
            "mock_agent_registry",
            "test_messages",
            "test_config",
            "bot",
            "pytest_configure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tests\\run_tests.py": {
        "language": ".py",
        "functions": [
            "run_async_test",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_message",
            "get_status",
            "clear_queue",
            "_process_messages",
            "_deliver_message",
            "_format_message",
            "_chunk_message",
            "verify_chunk"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message delivery modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_message",
                    "get_status",
                    "clear_queue",
                    "_process_messages",
                    "_deliver_message",
                    "_format_message",
                    "_chunk_message",
                    "verify_chunk"
                ],
                "docstring": "Handles message processing and delivery for the cell phone interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "discord_bot\\commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_category_buttons",
            "__init__",
            "__init__",
            "get_devlog",
            "clear_devlog",
            "__init__",
            "execute_gui_command"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__",
                    "add_category_buttons"
                ],
                "docstring": "Interactive help menu with buttons and visual effects.",
                "base_classes": [
                    "discord.ui.View"
                ]
            },
            "CommandSearchModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for searching commands.",
                "base_classes": [
                    "discord.ui.Modal"
                ]
            },
            "DevLogManager": {
                "methods": [
                    "__init__",
                    "get_devlog",
                    "clear_devlog"
                ],
                "docstring": "Manages agent development logs and Discord notifications.",
                "base_classes": []
            },
            "AgentCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Commands for controlling agents.",
                "base_classes": [
                    "commands.Cog"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "agent_resume_main.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "press_ctrl_enter",
            "press_ctrl_n",
            "press_ctrl_v",
            "press_ctrl_a",
            "__init__",
            "_load_coordinates",
            "show_menu",
            "list_agents",
            "get_agent_selection",
            "send_to_all_agents",
            "send_message",
            "menu_onboard_agent",
            "onboard_single_agent",
            "split_message",
            "menu_resume_agent",
            "menu_verify_agent",
            "menu_repair_agent",
            "menu_backup_agent",
            "menu_restore_agent",
            "menu_send_message",
            "menu_send_to_all",
            "run"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message modes for agent communication.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "press_ctrl_enter",
                    "press_ctrl_n",
                    "press_ctrl_v",
                    "press_ctrl_a"
                ],
                "docstring": null,
                "base_classes": []
            },
            "AgentResume": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "show_menu",
                    "list_agents",
                    "get_agent_selection",
                    "send_to_all_agents",
                    "send_message",
                    "menu_onboard_agent",
                    "onboard_single_agent",
                    "split_message",
                    "menu_resume_agent",
                    "menu_verify_agent",
                    "menu_repair_agent",
                    "menu_backup_agent",
                    "menu_restore_agent",
                    "menu_send_message",
                    "menu_send_to_all",
                    "run"
                ],
                "docstring": "Main agent control interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 55
    },
    "dreamos\\core\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "start_agent_loops",
            "__init__",
            "_load_inbox",
            "_process_inbox",
            "run"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__",
                    "_load_inbox",
                    "_process_inbox",
                    "run"
                ],
                "docstring": "Monitors agent inboxes and processes incoming prompts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\agent_captain.py": {
        "language": ".py",
        "functions": [
            "move_to_captainstools",
            "main",
            "__init__",
            "_load_coordinates",
            "onboard_agent",
            "onboard_agents",
            "send_message",
            "_split_message",
            "get_agent_status",
            "get_all_agent_statuses"
        ],
        "classes": {
            "AgentCaptain": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "onboard_agent",
                    "onboard_agents",
                    "send_message",
                    "_split_message",
                    "get_agent_status",
                    "get_all_agent_statuses"
                ],
                "docstring": "Captain agent interface for managing and onboarding other agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\cell_phone.py": {
        "language": ".py",
        "functions": [
            "send_message",
            "parse_args",
            "validate_priority",
            "cli_main",
            "__new__",
            "__init__",
            "send_message",
            "get_status",
            "clear_messages",
            "shutdown"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message modes for different types of communication.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Message": {
                "methods": [],
                "docstring": "Represents a cell phone message with metadata.",
                "base_classes": []
            },
            "CellPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "send_message",
                    "get_status",
                    "clear_messages",
                    "shutdown"
                ],
                "docstring": "Singleton class managing cell phone communication between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tests\\test_agent_captain.py": {
        "language": ".py",
        "functions": [
            "test_agent_controller_initialization",
            "test_agent_controller_onboarding",
            "test_agent_controller_message_sending"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\core\\agent_menu.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "show_menu",
            "list_agents",
            "get_agent_selection",
            "send_to_all_agents",
            "menu_onboard_agent",
            "menu_resume_agent",
            "menu_verify_agent",
            "menu_repair_agent",
            "menu_backup_agent",
            "menu_restore_agent",
            "menu_send_message",
            "menu_send_to_all",
            "run"
        ],
        "classes": {
            "AgentMenu": {
                "methods": [
                    "__init__",
                    "show_menu",
                    "list_agents",
                    "get_agent_selection",
                    "send_to_all_agents",
                    "menu_onboard_agent",
                    "menu_resume_agent",
                    "menu_verify_agent",
                    "menu_repair_agent",
                    "menu_backup_agent",
                    "menu_restore_agent",
                    "menu_send_message",
                    "menu_send_to_all",
                    "run"
                ],
                "docstring": "Main agent menu interface class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 29
    },
    "dreamos\\core\\menu.py": {
        "language": ".py",
        "functions": [
            "create_agent_menu",
            "__init__",
            "add_item",
            "remove_item",
            "get_item",
            "display",
            "handle_input",
            "_handle_agent_selection",
            "run"
        ],
        "classes": {
            "MenuItemType": {
                "methods": [],
                "docstring": "Types of menu items.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MenuItem": {
                "methods": [],
                "docstring": "Represents a menu item with its properties.",
                "base_classes": []
            },
            "Menu": {
                "methods": [
                    "__init__",
                    "add_item",
                    "remove_item",
                    "get_item",
                    "display",
                    "handle_input",
                    "_handle_agent_selection",
                    "run"
                ],
                "docstring": "Main menu interface class.\n\nProvides methods for creating and managing menu items, handling user input,\nand displaying the menu interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "dreamos\\core\\message_processor.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "process_queue",
            "_process_message",
            "send_message",
            "send_to_all_agents"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "process_queue",
                    "_process_message",
                    "send_message",
                    "send_to_all_agents"
                ],
                "docstring": "Processes queued messages and sends them to the UI.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\persistent_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_acquire_lock",
            "_release_lock",
            "_read_queue",
            "_write_queue",
            "enqueue",
            "dequeue",
            "get_status",
            "clear",
            "shutdown"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_acquire_lock",
                    "_release_lock",
                    "_read_queue",
                    "_write_queue",
                    "enqueue",
                    "dequeue",
                    "get_status",
                    "clear",
                    "shutdown"
                ],
                "docstring": "A file-based persistent queue with file locking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\test_agent_cellphone_cli.py": {
        "language": ".py",
        "functions": [
            "run_cli_command",
            "test_cli_help",
            "test_cli_required_args",
            "test_cli_welcome_message",
            "test_cli_custom_message",
            "test_cli_invalid_priority",
            "test_cli_invalid_mode",
            "test_cli_message_with_mode",
            "test_cli_concurrent_messages",
            "send_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\test_config.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "cleanup_test_environment"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\test_cell_phone.py": {
        "language": ".py",
        "functions": [
            "cell_phone",
            "test_basic_message_sending",
            "test_message_priorities",
            "test_message_modes",
            "test_rate_limiting",
            "test_invalid_priority",
            "test_empty_message",
            "test_status_tracking",
            "test_concurrent_messages",
            "test_message_history"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\test_discord_commands.py": {
        "language": ".py",
        "functions": [
            "event_loop",
            "mock_bot",
            "mock_ctx"
        ],
        "classes": {
            "TestHelpMenu": {
                "methods": [],
                "docstring": "Test the HelpMenu class functionality.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestAgentCommands": {
                "methods": [],
                "docstring": "Test the agent command functionality.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 3
    },
    "tests\\test_message_processor.py": {
        "language": ".py",
        "functions": [
            "message_processor",
            "test_process_message",
            "test_load_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "Trading_\\basicbot\\agent_api.py": {
        "language": ".py",
        "functions": [
            "run_backtest",
            "generate_trading_signals",
            "get_strategy_info",
            "agent_query"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\test_utils.py": {
        "language": ".py",
        "functions": [
            "create_mock_embed",
            "mock_discord_file",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MockGuild": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord guild for testing.",
                "base_classes": []
            },
            "MockChannel": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord channel for testing.",
                "base_classes": []
            },
            "MockMember": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord member for testing.",
                "base_classes": []
            },
            "MockMessage": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord message for testing.",
                "base_classes": []
            },
            "MockContext": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord context for testing.",
                "base_classes": []
            },
            "MockBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mock Discord bot for testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "Trading_\\basicbot\\backtester.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_backtest",
            "_prepare_multitimeframe_data",
            "_calculate_indicators",
            "_generate_signals",
            "_simulate_trading",
            "_calculate_returns",
            "_calculate_performance_metrics",
            "_save_results",
            "plot_results"
        ],
        "classes": {
            "Backtester": {
                "methods": [
                    "__init__",
                    "run_backtest",
                    "_prepare_multitimeframe_data",
                    "_calculate_indicators",
                    "_generate_signals",
                    "_simulate_trading",
                    "_calculate_returns",
                    "_calculate_performance_metrics",
                    "_save_results",
                    "plot_results"
                ],
                "docstring": "Implements a backtesting engine for evaluating trading strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "Trading_\\basicbot\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "run_cli_interface",
            "__init__",
            "execute_command",
            "_start_trading",
            "_stop_trading",
            "_get_status",
            "_execute_single_trade",
            "_get_trade_history",
            "_get_performance_metrics"
        ],
        "classes": {
            "AgentTrader": {
                "methods": [
                    "__init__",
                    "execute_command",
                    "_start_trading",
                    "_stop_trading",
                    "_get_status",
                    "_execute_single_trade",
                    "_get_trade_history",
                    "_get_performance_metrics"
                ],
                "docstring": "Interface between Dream.OS agents and BasicBot trading system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "Trading_\\basicbot\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_env",
            "validate"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "get_env",
                    "validate"
                ],
                "docstring": "Configuration class for BasicBot with environment variable support.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "Trading_\\basicbot\\discord_alerts.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "send_trade_alert",
            "send_system_status",
            "send_performance_report",
            "send_error_alert"
        ],
        "classes": {
            "DiscordAlerts": {
                "methods": [
                    "__init__",
                    "send_message",
                    "send_trade_alert",
                    "send_system_status",
                    "send_performance_report",
                    "send_error_alert"
                ],
                "docstring": "Discord webhook integration for BasicBot trading alerts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "Trading_\\basicbot\\db_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_table",
            "save_posts",
            "fetch_posts",
            "close"
        ],
        "classes": {
            "DatabaseHandler": {
                "methods": [
                    "__init__",
                    "_initialize_table",
                    "save_posts",
                    "fetch_posts",
                    "close"
                ],
                "docstring": "Unified database handler for storing scraped posts.\nSupports PostgreSQL and MySQL based on the DB_TYPE configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "Trading_\\basicbot\\dreamos_integration.py": {
        "language": ".py",
        "functions": [
            "run_dream_agent_demo",
            "__init__",
            "analyze_market_conditions",
            "get_trading_recommendations",
            "auto_start_trading",
            "execute_recommended_trades",
            "monitor_portfolio_performance",
            "daily_trading_routine"
        ],
        "classes": {
            "DreamOSAgent": {
                "methods": [
                    "__init__",
                    "analyze_market_conditions",
                    "get_trading_recommendations",
                    "auto_start_trading",
                    "execute_recommended_trades",
                    "monitor_portfolio_performance",
                    "daily_trading_routine"
                ],
                "docstring": "Example Dream.OS agent interface for trading automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "Trading_\\basicbot\\logger.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "get_all_loggers"
        ],
        "classes": {
            "MockConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "Trading_\\basicbot\\main_trader.py": {
        "language": ".py",
        "functions": [
            "parse_arguments",
            "setup_signal_handlers",
            "setup_discord_alerts",
            "setup_trade_executor",
            "start_agent_interface",
            "main",
            "run_trading_loop",
            "signal_handler",
            "__init__",
            "check_for_trade_events"
        ],
        "classes": {
            "TradeMonitor": {
                "methods": [
                    "__init__",
                    "check_for_trade_events"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "Trading_\\basicbot\\model_training_utils.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_model_save_dir",
            "save_model",
            "load_model",
            "_create_version_directory",
            "get_model_directory",
            "_get_latest_version_dir",
            "_save_metadata",
            "_load_latest_file",
            "save_model",
            "load_model",
            "save_model",
            "load_model",
            "__init__",
            "save_model",
            "load_model",
            "validate_model",
            "load_metadata",
            "create_lstm_model"
        ],
        "classes": {
            "BaseModelIO": {
                "methods": [
                    "__init__",
                    "_get_model_save_dir",
                    "save_model",
                    "load_model",
                    "_create_version_directory",
                    "get_model_directory",
                    "_get_latest_version_dir",
                    "_save_metadata",
                    "_load_latest_file"
                ],
                "docstring": "Abstract interface for saving/loading models, metadata, and scalers.\nSubclasses must implement the `save_model` and `load_model` methods.",
                "base_classes": [
                    "ABC"
                ]
            },
            "KerasModelIO": {
                "methods": [
                    "save_model",
                    "load_model"
                ],
                "docstring": "Specialized logic for saving and loading Keras (e.g., LSTM, Neural Network) models.",
                "base_classes": [
                    "BaseModelIO"
                ]
            },
            "JoblibModelIO": {
                "methods": [
                    "save_model",
                    "load_model"
                ],
                "docstring": "Specialized logic for saving and loading models that can be serialized via joblib.\n(e.g., scikit-learn, XGBoost, LightGBM).",
                "base_classes": [
                    "BaseModelIO"
                ]
            },
            "ModelManager": {
                "methods": [
                    "__init__",
                    "save_model",
                    "load_model",
                    "validate_model",
                    "load_metadata"
                ],
                "docstring": "High-level manager that selects the appropriate I/O strategy based on model type.\nProvides unified methods for saving, loading, and validating models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 37
    },
    "Trading_\\basicbot\\risk_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_reset_daily_tracking",
            "update_account_metrics",
            "_check_drawdown",
            "can_place_trade",
            "calculate_position_size",
            "record_trade",
            "validate_trade"
        ],
        "classes": {
            "RiskManager": {
                "methods": [
                    "__init__",
                    "_reset_daily_tracking",
                    "update_account_metrics",
                    "_check_drawdown",
                    "can_place_trade",
                    "calculate_position_size",
                    "record_trade",
                    "validate_trade"
                ],
                "docstring": "Risk management system for controlling trade size and exposure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\start_paper_trading.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "check_dependencies",
            "check_api_keys",
            "check_discord_webhook",
            "start_paper_trading"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "Trading_\\basicbot\\tbow_charts.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_data",
            "paintEvent",
            "__init__",
            "update_data",
            "paintEvent",
            "_draw_winrate",
            "_draw_compliance",
            "_draw_emotion",
            "__init__",
            "add_chart",
            "get_chart",
            "update_chart"
        ],
        "classes": {
            "SparklineChart": {
                "methods": [
                    "__init__",
                    "update_data",
                    "paintEvent"
                ],
                "docstring": "Custom sparkline chart widget for PyQt5.\n\nFeatures:\n- Compact price visualization\n- Color-coded trend\n- Optional volume overlay\n- Customizable time range",
                "base_classes": [
                    "QWidget"
                ]
            },
            "PerformanceChart": {
                "methods": [
                    "__init__",
                    "update_data",
                    "paintEvent",
                    "_draw_winrate",
                    "_draw_compliance",
                    "_draw_emotion"
                ],
                "docstring": "Performance tracking chart widget.\n\nFeatures:\n- Win rate visualization\n- Checklist compliance tracking\n- Emotion profile analysis\n- Customizable metrics",
                "base_classes": [
                    "QWidget"
                ]
            },
            "ChartContainer": {
                "methods": [
                    "__init__",
                    "add_chart",
                    "get_chart",
                    "update_chart"
                ],
                "docstring": "Container widget for organizing multiple charts.\n\nFeatures:\n- Flexible layout management\n- Chart grouping\n- Title and legend support",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "Trading_\\basicbot\\strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "calculate_indicators",
            "generate_signals",
            "fetch_historical_data",
            "_calculate_sma",
            "_calculate_rsi",
            "_calculate_macd",
            "_calculate_atr"
        ],
        "classes": {
            "Strategy": {
                "methods": [
                    "__init__",
                    "calculate_indicators",
                    "generate_signals",
                    "fetch_historical_data",
                    "_calculate_sma",
                    "_calculate_rsi",
                    "_calculate_macd",
                    "_calculate_atr"
                ],
                "docstring": "Base class for implementing trading strategies.\n\nThis class provides the framework for calculating technical indicators\nand generating trading signals based on configurable parameters.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\tbow_replay.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_historical_data",
            "step_forward",
            "step_backward",
            "jump_to",
            "analyze_setup",
            "_analyze_confluence",
            "_calculate_setup_score",
            "export_analysis"
        ],
        "classes": {
            "TBOWReplay": {
                "methods": [
                    "__init__",
                    "load_historical_data",
                    "step_forward",
                    "step_backward",
                    "jump_to",
                    "analyze_setup",
                    "_analyze_confluence",
                    "_calculate_setup_score",
                    "export_analysis"
                ],
                "docstring": "TBOW Tactics replay system for historical analysis.\n\nThis class allows traders to:\n- Replay historical market data\n- Analyze trading decisions\n- Validate checklist effectiveness\n- Train on past scenarios",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "Trading_\\basicbot\\tbow_dashboard.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "update_price",
            "__init__",
            "update_volume",
            "__init__",
            "setup_ui",
            "create_top_bar",
            "create_market_tab",
            "create_indicators_tab",
            "create_bias_tab",
            "create_checklist_tab",
            "create_journal_tab",
            "create_analytics_tab",
            "create_replay_tab",
            "create_risk_panel",
            "upload_screenshot",
            "on_symbol_changed",
            "on_timeframe_changed",
            "initialize_tbow",
            "refresh_data",
            "update_market_tab",
            "update_indicators_tab",
            "update_bias_tab",
            "update_checklist_tab",
            "load_replay",
            "replay_next",
            "replay_prev",
            "update_replay_display",
            "export_replay",
            "calculate_position",
            "update_risk_stats",
            "update_analytics_tab"
        ],
        "classes": {
            "PriceBox": {
                "methods": [
                    "__init__",
                    "update_price"
                ],
                "docstring": "Custom widget for displaying price information.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "VolumePulseMeter": {
                "methods": [
                    "__init__",
                    "update_volume"
                ],
                "docstring": "Custom widget for displaying volume pulse.",
                "base_classes": [
                    "QProgressBar"
                ]
            },
            "TBOWDashboard": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "create_top_bar",
                    "create_market_tab",
                    "create_indicators_tab",
                    "create_bias_tab",
                    "create_checklist_tab",
                    "create_journal_tab",
                    "create_analytics_tab",
                    "create_replay_tab",
                    "create_risk_panel",
                    "upload_screenshot",
                    "on_symbol_changed",
                    "on_timeframe_changed",
                    "initialize_tbow",
                    "refresh_data",
                    "update_market_tab",
                    "update_indicators_tab",
                    "update_bias_tab",
                    "update_checklist_tab",
                    "load_replay",
                    "replay_next",
                    "replay_prev",
                    "update_replay_display",
                    "export_replay",
                    "calculate_position",
                    "update_risk_stats",
                    "update_analytics_tab"
                ],
                "docstring": "Main dashboard window for TBOW Tactics.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 65
    },
    "Trading_\\basicbot\\tbow_risk.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "calculate_position_size",
            "calculate_rr_ratio",
            "adjust_for_volatility",
            "update_pnl",
            "check_red_zone",
            "reset_daily",
            "update_account_equity"
        ],
        "classes": {
            "TBOWRisk": {
                "methods": [
                    "__init__",
                    "calculate_position_size",
                    "calculate_rr_ratio",
                    "adjust_for_volatility",
                    "update_pnl",
                    "check_red_zone",
                    "reset_daily",
                    "update_account_equity"
                ],
                "docstring": "TBOW Tactics risk management system.\n\nThis class handles:\n- Position sizing\n- Risk-reward calculations\n- Volatility adjustments\n- Drawdown monitoring",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\tbow_discord.py": {
        "language": ".py",
        "functions": [
            "macd_curl_down",
            "macd_curl_up",
            "rsi_below",
            "rsi_above",
            "price_below",
            "price_above",
            "vwap_above",
            "vwap_below",
            "parse_conditions",
            "__init__",
            "update",
            "get_price_after",
            "get_price_range",
            "__init__",
            "_ensure_log_file",
            "log_alert",
            "get_todays_alerts",
            "__init__",
            "_analyze_time_of_day",
            "_analyze_condition_effectiveness",
            "_analyze_market_context",
            "_analyze_condition_correlations",
            "_analyze_price_action",
            "_analyze_market_impact",
            "__post_init__",
            "to_dict",
            "from_dict",
            "can_trigger",
            "__init__",
            "_load_rules",
            "_save_rules",
            "add_rule",
            "remove_rule",
            "modify_rule",
            "get_rule",
            "get_user_rules",
            "get_alert_channels",
            "_all_conditions_met",
            "__init__",
            "run_bot"
        ],
        "classes": {
            "PriceCache": {
                "methods": [
                    "__init__",
                    "update",
                    "get_price_after",
                    "get_price_range"
                ],
                "docstring": "In-memory price cache for post-alert analysis.",
                "base_classes": []
            },
            "AlertLogger": {
                "methods": [
                    "__init__",
                    "_ensure_log_file",
                    "log_alert",
                    "get_todays_alerts"
                ],
                "docstring": "Logs alert triggers for daily digest.",
                "base_classes": []
            },
            "DigestManager": {
                "methods": [
                    "__init__",
                    "_analyze_time_of_day",
                    "_analyze_condition_effectiveness",
                    "_analyze_market_context",
                    "_analyze_condition_correlations",
                    "_analyze_price_action",
                    "_analyze_market_impact"
                ],
                "docstring": "Manages daily digest generation and scheduling.",
                "base_classes": []
            },
            "AlertRule": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict",
                    "can_trigger"
                ],
                "docstring": "Alert rule configuration.",
                "base_classes": []
            },
            "AlertManager": {
                "methods": [
                    "__init__",
                    "_load_rules",
                    "_save_rules",
                    "add_rule",
                    "remove_rule",
                    "modify_rule",
                    "get_rule",
                    "get_user_rules",
                    "get_alert_channels",
                    "_all_conditions_met"
                ],
                "docstring": "Manages alert rules and triggers.",
                "base_classes": []
            },
            "TBOWDiscord": {
                "methods": [
                    "__init__",
                    "run_bot"
                ],
                "docstring": "Discord bot for TBOW Tactics integration.\n\nFeatures:\n- Command processing\n- Trade plan formatting\n- Real-time updates\n- Summary cards\n- Alert management with composite rules\n- Daily digest analytics\n- Historical backtesting with alert conditions",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 71
    },
    "Trading_\\basicbot\\tbow_tactics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_market_context",
            "analyze_indicators",
            "generate_bias",
            "check_compliance",
            "log_trade",
            "_detect_trend",
            "_analyze_gaps",
            "_analyze_volatility",
            "_analyze_volume_strength",
            "_detect_bb_squeeze",
            "_get_bb_position",
            "_check_market_alignment",
            "_check_indicator_confluence",
            "_check_volatility",
            "_check_risk_management"
        ],
        "classes": {
            "TBOWTactics": {
                "methods": [
                    "__init__",
                    "scan_market_context",
                    "analyze_indicators",
                    "generate_bias",
                    "check_compliance",
                    "log_trade",
                    "_detect_trend",
                    "_analyze_gaps",
                    "_analyze_volatility",
                    "_analyze_volume_strength",
                    "_detect_bb_squeeze",
                    "_get_bb_position",
                    "_check_market_alignment",
                    "_check_indicator_confluence",
                    "_check_volatility",
                    "_check_risk_management"
                ],
                "docstring": "TBOW Tactics trading intelligence system.\n\nThis class provides a comprehensive trading decision support system that:\n1. Scans market context (trends, gaps, volatility)\n2. Analyzes technical indicators\n3. Generates trading bias\n4. Enforces checklist compliance\n5. Integrates with trade journal",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "Trading_\\basicbot\\trade_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_journal",
            "add_to_journal",
            "start",
            "stop",
            "_update_account_info",
            "_process_symbol",
            "_get_market_data",
            "_execute_order",
            "run_backtest_comparison"
        ],
        "classes": {
            "TradeExecutor": {
                "methods": [
                    "__init__",
                    "_setup_journal",
                    "add_to_journal",
                    "start",
                    "stop",
                    "_update_account_info",
                    "_process_symbol",
                    "_get_market_data",
                    "_execute_order",
                    "run_backtest_comparison"
                ],
                "docstring": "Live trading execution engine for the BasicBot system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "Trading_\\basicbot\\trading_api_alpaca.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "place_order",
            "get_account",
            "get_position",
            "logout"
        ],
        "classes": {
            "TradingAPI": {
                "methods": [
                    "__init__",
                    "place_order",
                    "get_account",
                    "get_position",
                    "logout"
                ],
                "docstring": "A wrapper for the Alpaca API.\nUses API credentials from config.py for authentication and trading.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "Trading_\\basicbot\\analysis\\strategy_performance.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_backtest",
            "_calculate_metrics",
            "plot_performance",
            "generate_report"
        ],
        "classes": {
            "StrategyPerformance": {
                "methods": [
                    "__init__",
                    "analyze_backtest",
                    "_calculate_metrics",
                    "plot_performance",
                    "generate_report"
                ],
                "docstring": "Analyze and visualize trading strategy performance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "Trading_\\basicbot\\archive\\test_backtest.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "setUp",
            "test_run_backtest",
            "test_empty_dataframe"
        ],
        "classes": {
            "TestBacktester": {
                "methods": [
                    "setUpClass",
                    "setUp",
                    "test_run_backtest",
                    "test_empty_dataframe"
                ],
                "docstring": "Unit tests for the Backtester class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "Trading_\\basicbot\\archive\\test_data_fetcher.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "setUp",
            "test_normalize_columns"
        ],
        "classes": {
            "TestDataFetchUtils": {
                "methods": [
                    "setUpClass",
                    "setUp",
                    "test_normalize_columns"
                ],
                "docstring": "Unit tests for the DataFetchUtils class.",
                "base_classes": [
                    "unittest.IsolatedAsyncioTestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "Trading_\\basicbot\\archive\\test_trading_api_alpaca.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_login_success",
            "test_login_failure_missing_credentials",
            "test_place_buy_order",
            "test_place_sell_order",
            "test_get_account",
            "test_logout"
        ],
        "classes": {
            "TestTradingAPI": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_login_success",
                    "test_login_failure_missing_credentials",
                    "test_place_buy_order",
                    "test_place_sell_order",
                    "test_get_account",
                    "test_logout"
                ],
                "docstring": "Unit tests for the TradingAPI class integrated with Alpaca.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\archive\\trading_api_robinhood.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_endpoints",
            "login",
            "_handle_sms_verification",
            "_finalize_login",
            "_log_response",
            "logout"
        ],
        "classes": {
            "CustomRobinhoodAPI": {
                "methods": [
                    "__init__",
                    "update_endpoints",
                    "login",
                    "_handle_sms_verification",
                    "_finalize_login",
                    "_log_response",
                    "logout"
                ],
                "docstring": "Custom implementation for Robinhood login with SMS-based MFA handling.\nThis version dynamically updates its endpoint URLs by scraping a specified page.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "Trading_\\basicbot\\ml_models\\model_trainer.py": {
        "language": ".py",
        "functions": [
            "download_data",
            "prepare_data",
            "train_regime_model",
            "train_models",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "Trading_\\basicbot\\ml_models\\regime_detector.py": {
        "language": ".py",
        "functions": [
            "download_sample_data",
            "__init__",
            "_load_model",
            "_save_model",
            "extract_features",
            "label_regimes",
            "prepare_training_data",
            "train",
            "predict",
            "get_regime_strategy",
            "setup_logging"
        ],
        "classes": {
            "RegimeDetector": {
                "methods": [
                    "__init__",
                    "_load_model",
                    "_save_model",
                    "extract_features",
                    "label_regimes",
                    "prepare_training_data",
                    "train",
                    "predict",
                    "get_regime_strategy"
                ],
                "docstring": "Market regime detection model that classifies market conditions.\n\nRegimes:\n- 0: Mean-reverting (range-bound/oscillating)\n- 1: Trending up\n- 2: Trending down\n- 3: High volatility/uncertain",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "Trading_\\basicbot\\ml_models\\trading_ai.py": {
        "language": ".py",
        "functions": [
            "create_sample_data",
            "__init__",
            "_load_models",
            "detect_market_regime",
            "adapt_strategy",
            "enhance_signals",
            "_enhance_mean_reversion_signals",
            "_enhance_momentum_signals",
            "_reduce_signal_frequency",
            "calculate_position_size",
            "mock_regime_predict",
            "mock_get_strategy",
            "setup_logging"
        ],
        "classes": {
            "TradingAI": {
                "methods": [
                    "__init__",
                    "_load_models",
                    "detect_market_regime",
                    "adapt_strategy",
                    "enhance_signals",
                    "_enhance_mean_reversion_signals",
                    "_enhance_momentum_signals",
                    "_reduce_signal_frequency",
                    "calculate_position_size"
                ],
                "docstring": "AI-enhanced trading logic that integrates machine learning models\nwith BasicBot's trading strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "Trading_\\basicbot\\ml_models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "Trading_\\basicbot\\strategies\\adaptive_momentum.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "calculate_indicators",
            "generate_signals",
            "_calculate_vwap",
            "_calculate_signal_strength",
            "_is_buy_signal",
            "_is_sell_signal",
            "adjust_risk_parameters"
        ],
        "classes": {
            "AdaptiveMomentumStrategy": {
                "methods": [
                    "__init__",
                    "calculate_indicators",
                    "generate_signals",
                    "_calculate_vwap",
                    "_calculate_signal_strength",
                    "_is_buy_signal",
                    "_is_sell_signal",
                    "adjust_risk_parameters"
                ],
                "docstring": "Adaptive Momentum Strategy that adjusts to market conditions.",
                "base_classes": [
                    "Strategy"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\tests\\test_adaptive_momentum.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "_generate_test_data",
            "test_calculate_indicators",
            "test_generate_signals",
            "test_signal_strength",
            "test_buy_signal_conditions",
            "test_sell_signal_conditions",
            "test_risk_parameter_adjustment"
        ],
        "classes": {
            "TestAdaptiveMomentumStrategy": {
                "methods": [
                    "setUpClass",
                    "_generate_test_data",
                    "test_calculate_indicators",
                    "test_generate_signals",
                    "test_signal_strength",
                    "test_buy_signal_conditions",
                    "test_sell_signal_conditions",
                    "test_risk_parameter_adjustment"
                ],
                "docstring": "Test cases for AdaptiveMomentumStrategy.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "Trading_\\basicbot\\tests\\test_trading_api.py": {
        "language": ".py",
        "functions": [
            "test_api_keys_exist",
            "test_symbol_defined",
            "test_trading_mode_valid",
            "setUpClass",
            "test_account_info",
            "test_get_position",
            "test_place_order",
            "setUpClass",
            "test_indicator_calculation",
            "test_signal_generation",
            "setUpClass",
            "test_backtest_execution",
            "test_live_trading",
            "test_backtest_execution"
        ],
        "classes": {
            "TestConfig": {
                "methods": [
                    "test_api_keys_exist",
                    "test_symbol_defined",
                    "test_trading_mode_valid"
                ],
                "docstring": "\u2705 Test Suite for Config Validation",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestTradingAPI": {
                "methods": [
                    "setUpClass",
                    "test_account_info",
                    "test_get_position",
                    "test_place_order"
                ],
                "docstring": "\u2705 Test Suite for Alpaca API Wrapper",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestStrategy": {
                "methods": [
                    "setUpClass",
                    "test_indicator_calculation",
                    "test_signal_generation"
                ],
                "docstring": "\u2705 Test Suite for Trading Strategy",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestBacktester": {
                "methods": [
                    "setUpClass",
                    "test_backtest_execution"
                ],
                "docstring": "\u2705 Test Suite for Backtesting Engine",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestTradingBot": {
                "methods": [
                    "test_live_trading",
                    "test_backtest_execution"
                ],
                "docstring": "\u2705 Full System Test (Live/Backtest Modes)",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "Trading_\\basicbot\\tsla_trader\\core.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "ensure_journal",
            "add_trade",
            "import_from_yaml",
            "summarize_trades"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agent_tools\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "_create_menu",
            "list_agents",
            "onboard_agent",
            "_onboard_single_agent",
            "_split_message",
            "resume_agent",
            "_resume_single_agent",
            "_send_message_with_ui",
            "verify_agent",
            "_verify_single_agent",
            "repair_agent",
            "_repair_single_agent",
            "backup_agent",
            "_backup_single_agent",
            "restore_agent",
            "_restore_single_agent",
            "send_message",
            "_send_single_message",
            "run"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "_create_menu",
                    "list_agents",
                    "onboard_agent",
                    "_onboard_single_agent",
                    "_split_message",
                    "resume_agent",
                    "_resume_single_agent",
                    "_send_message_with_ui",
                    "verify_agent",
                    "_verify_single_agent",
                    "repair_agent",
                    "_repair_single_agent",
                    "backup_agent",
                    "_backup_single_agent",
                    "restore_agent",
                    "_restore_single_agent",
                    "send_message",
                    "_send_single_message",
                    "run"
                ],
                "docstring": "Main interface for controlling agents with both menu and UI automation capabilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 42
    },
    "dreamos\\core\\agent_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "_create_inbox_message",
            "get_log",
            "clear_log"
        ],
        "classes": {
            "AgentLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "_create_inbox_message",
                    "get_log",
                    "clear_log"
                ],
                "docstring": "Handles agent development logging and Discord notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "get_coordinates",
            "list_agents"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "get_coordinates",
                    "list_agents"
                ],
                "docstring": "Manages cursor coordinates for agent UI interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "press_ctrl_enter",
            "press_ctrl_n",
            "press_ctrl_v",
            "press_ctrl_a"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "press_ctrl_enter",
                    "press_ctrl_n",
                    "press_ctrl_v",
                    "press_ctrl_a"
                ],
                "docstring": "Controls cursor movement and input for agent interaction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_init_mailbox.py": {
        "language": ".py",
        "functions": [
            "test_imports",
            "temp_mailbox_dir",
            "test_agent_id",
            "mailbox",
            "test_get_initial_state",
            "test_init_mailbox_creates_files",
            "test_init_mailbox_file_contents",
            "test_init_mailbox_duplicate",
            "test_reset_mailbox_creates_backup",
            "test_reset_mailbox_restores_state",
            "test_reset_nonexistent_mailbox",
            "test_init_mailbox_invalid_agent_id",
            "test_init_mailbox_invalid_directory",
            "test_reset_mailbox_permission_error",
            "test_concurrent_mailbox_operations",
            "mock_copytree",
            "init_operation",
            "reset_operation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    }
}