{
    "pygetwindow.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "pyautogui.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_overnight.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\agent_restart.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "restart_agent",
            "send_initial_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\agent_resumer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_files",
            "_write_json",
            "_read_json",
            "activate_test_debug_mode",
            "increment_cycle",
            "reset_cycle_count",
            "add_test_fix_task",
            "add_blocker_task",
            "log_test_debug",
            "get_test_debug_status"
        ],
        "classes": {
            "AgentResumer": {
                "methods": [
                    "__init__",
                    "_init_files",
                    "_write_json",
                    "_read_json",
                    "activate_test_debug_mode",
                    "increment_cycle",
                    "reset_cycle_count",
                    "add_test_fix_task",
                    "add_blocker_task",
                    "log_test_debug",
                    "get_test_debug_status"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "agent_tools\\captain_prompt.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_sequence_data",
            "_format_waiting_messages",
            "_get_agent_prompt",
            "run"
        ],
        "classes": {
            "CaptainPrompt": {
                "methods": [
                    "__init__",
                    "_get_sequence_data",
                    "_format_waiting_messages",
                    "_get_agent_prompt",
                    "run"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\autonomy\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\config\\utils.py": {
        "language": ".py",
        "functions": [
            "load_yaml",
            "load_json",
            "save_yaml",
            "format_path",
            "validate_log_level",
            "validate_mode",
            "validate_path",
            "merge_configs",
            "validate_webhook_url",
            "validate_ip"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\mailbox\\message_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_sequence",
            "_get_sequence_data",
            "_update_sequence",
            "get_next_agent",
            "send_message",
            "broadcast_message",
            "get_messages",
            "mark_as_processed",
            "cleanup_old_messages",
            "acknowledge_message",
            "save_response",
            "clear_messages",
            "update_message_status"
        ],
        "classes": {
            "MessageHandler": {
                "methods": [
                    "__init__",
                    "_initialize_sequence",
                    "_get_sequence_data",
                    "_update_sequence",
                    "get_next_agent",
                    "send_message",
                    "broadcast_message",
                    "get_messages",
                    "mark_as_processed",
                    "cleanup_old_messages",
                    "acknowledge_message",
                    "save_response",
                    "clear_messages",
                    "update_message_status"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "agent_tools\\autonomy\\loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_shutdown",
            "load_tasks",
            "save_devlog",
            "paste_to_cursor"
        ],
        "classes": {
            "AutonomyLoop": {
                "methods": [
                    "__init__",
                    "_handle_shutdown",
                    "load_tasks",
                    "save_devlog",
                    "paste_to_cursor"
                ],
                "docstring": "Main autonomy loop for Dream.OS.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\autonomy\\task_completion.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_extract_mentioned_agents",
            "_generate_tags",
            "_format_task_summary",
            "__init__",
            "_load_config"
        ],
        "classes": {
            "TaskCompletionHook": {
                "methods": [
                    "__init__",
                    "_extract_mentioned_agents",
                    "_generate_tags",
                    "_format_task_summary"
                ],
                "docstring": "Hook for handling task completion events.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskCompletionManager": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Manage task completion hooks for multiple agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\mailbox\\standardize.py": {
        "language": ".py",
        "functions": [
            "create_standard_structure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\mailbox\\task_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_task"
        ],
        "classes": {
            "TaskHandler": {
                "methods": [
                    "__init__",
                    "get_agent_task"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agent_tools\\cursor_chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "main",
            "__init__",
            "_load_memory",
            "_save_memory",
            "parse_and_update_memory",
            "_merge_memory_updates",
            "get_prompt",
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory",
            "__init__",
            "setup",
            "quit",
            "__init__",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow",
            "load_chat",
            "archive_chat",
            "shutdown",
            "__init__",
            "get_prompt",
            "send_prompt_and_wait",
            "__init__",
            "_load_config",
            "_default_output_callback",
            "append_output",
            "start",
            "_process_pending_requests",
            "_handle_request",
            "_save_response",
            "_send_error",
            "shutdown"
        ],
        "classes": {
            "AletheiaPromptManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "parse_and_update_memory",
                    "_merge_memory_updates",
                    "get_prompt"
                ],
                "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            },
            "DriverManager": {
                "methods": [
                    "__init__",
                    "setup",
                    "quit"
                ],
                "docstring": "Manages the Chrome WebDriver instance.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow",
                    "load_chat",
                    "archive_chat",
                    "shutdown"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PromptExecutionService": {
                "methods": [
                    "__init__",
                    "get_prompt",
                    "send_prompt_and_wait"
                ],
                "docstring": "Handles prompt execution and response retrieval.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "_process_pending_requests",
                    "_handle_request",
                    "_save_response",
                    "_send_error",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 90
    },
    "agent_tools\\mailbox\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\config\\config_loader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_config",
            "_load_yaml",
            "_merge_configs",
            "_format_paths"
        ],
        "classes": {
            "ConfigLoader": {
                "methods": [
                    "__init__",
                    "load_config",
                    "_load_yaml",
                    "_merge_configs",
                    "_format_paths"
                ],
                "docstring": "Loads and validates configuration files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\config\\migrator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "migrate_file",
            "_load_ini",
            "_transform_config",
            "_format_paths",
            "save_migration_report"
        ],
        "classes": {
            "ConfigMigrator": {
                "methods": [
                    "__init__",
                    "migrate_file",
                    "_load_ini",
                    "_transform_config",
                    "_format_paths",
                    "save_migration_report"
                ],
                "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agent_tools\\config\\schema.py": {
        "language": ".py",
        "functions": [
            "validate_url",
            "validate_path_exists",
            "validate_command",
            "validate_ip",
            "__init__",
            "validate",
            "_validate_paths",
            "_validate_webhook_url",
            "_validate_command_paths",
            "_validate_ips",
            "get_default_config"
        ],
        "classes": {
            "ConfigValidator": {
                "methods": [
                    "__init__",
                    "validate",
                    "_validate_paths",
                    "_validate_webhook_url",
                    "_validate_command_paths",
                    "_validate_ips",
                    "get_default_config"
                ],
                "docstring": "Validates configuration against schema and performs additional checks.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "agent_tools\\security\\security_overlay_generator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "generate_markdown",
            "_format_risks",
            "_format_validation_checks",
            "_format_attack_surfaces",
            "_format_mitigation_steps",
            "_format_dependencies",
            "_format_monitoring",
            "save_overlay",
            "load_template",
            "create_overlay_from_template"
        ],
        "classes": {
            "SecurityRisk": {
                "methods": [],
                "docstring": "Represents a potential security risk in a task.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationCheck": {
                "methods": [],
                "docstring": "Represents a security validation check.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AttackSurface": {
                "methods": [],
                "docstring": "Represents a potential attack surface in a task.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MitigationStep": {
                "methods": [],
                "docstring": "Represents a security mitigation step.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SecurityOverlay": {
                "methods": [],
                "docstring": "Represents a complete security overlay for a task.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SecurityOverlayGenerator": {
                "methods": [
                    "__init__",
                    "generate_markdown",
                    "_format_risks",
                    "_format_validation_checks",
                    "_format_attack_surfaces",
                    "_format_mitigation_steps",
                    "_format_dependencies",
                    "_format_monitoring",
                    "save_overlay",
                    "load_template",
                    "create_overlay_from_template"
                ],
                "docstring": "Generates security overlays for tasks.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "agent_tools\\mailbox\\agent-1\\workspace\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\devlog_watcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_extract_tags",
            "_parse_entry",
            "on_modified",
            "__init__",
            "_load_config",
            "start",
            "stop"
        ],
        "classes": {
            "DevLogHandler": {
                "methods": [
                    "__init__",
                    "_extract_tags",
                    "_parse_entry",
                    "on_modified"
                ],
                "docstring": "Handle devlog file changes.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DevLogWatcher": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "start",
                    "stop"
                ],
                "docstring": "Watch and sync devlogs to Discord.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "agent_tools\\security\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\discord_devlog.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DiscordDevlog": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Generalized tool for any agent to update their Discord devlog with narrative and interaction updates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\swarm_tools\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\scanner.py": {
        "language": ".py",
        "functions": [
            "default",
            "__init__",
            "_find_valid_files",
            "_detect_encoding",
            "_save_results"
        ],
        "classes": {
            "PathEncoder": {
                "methods": [
                    "default"
                ],
                "docstring": "Custom JSON encoder that handles Path objects.",
                "base_classes": [
                    "json.JSONEncoder"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Scanner": {
                "methods": [
                    "__init__",
                    "_find_valid_files",
                    "_detect_encoding",
                    "_save_results"
                ],
                "docstring": "Main scanner class that orchestrates the analysis process.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\swarm_tools\\weekly_digest.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_parse_content",
            "__init__",
            "_load_agent_logs",
            "_generate_agent_stats",
            "_generate_insights",
            "_format_insights",
            "_format_digest"
        ],
        "classes": {
            "DevlogEntry": {
                "methods": [
                    "__init__",
                    "_parse_content"
                ],
                "docstring": "Represents a single devlog entry with metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "WeeklyDigest": {
                "methods": [
                    "__init__",
                    "_load_agent_logs",
                    "_generate_agent_stats",
                    "_generate_insights",
                    "_format_insights",
                    "_format_digest"
                ],
                "docstring": "Generates weekly summaries of swarm activity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "agent_tools\\swarm_tools\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agent_tools\\swarm_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\analyzers\\analyze_logs.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "parse_log_file",
            "summarize",
            "export",
            "clear_logs",
            "rotate_logs",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "agent_tools\\swarm_tools\\analyzers\\ast_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "_reset_state",
            "_analyze_tree",
            "_analyze_function",
            "_analyze_class",
            "_extract_base_classes"
        ],
        "classes": {
            "ASTAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze",
                    "_reset_state",
                    "_analyze_tree",
                    "_analyze_function",
                    "_analyze_class",
                    "_extract_base_classes"
                ],
                "docstring": "Analyzes Python source code using AST.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "SignalAgent"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agent_tools\\swarm_tools\\analyzers\\performance_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_metrics",
            "collect_system_metrics",
            "update_metrics",
            "get_optimization_recommendations",
            "run_monitoring_loop"
        ],
        "classes": {
            "PerformanceMonitor": {
                "methods": [
                    "__init__",
                    "initialize_metrics",
                    "collect_system_metrics",
                    "update_metrics",
                    "get_optimization_recommendations",
                    "run_monitoring_loop"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\swarm_tools\\analyzers\\dependency_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_dependencies",
            "analyze_file_dependencies",
            "identify_core_components",
            "group_into_modules"
        ],
        "classes": {
            "DependencyAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_dependencies",
                    "analyze_file_dependencies",
                    "identify_core_components",
                    "group_into_modules"
                ],
                "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\swarm_tools\\analyzers\\quality_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file_quality",
            "_calculate_cyclomatic_complexity",
            "_calculate_code_duplication",
            "analyze_test_coverage"
        ],
        "classes": {
            "QualityAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file_quality",
                    "_calculate_cyclomatic_complexity",
                    "_calculate_code_duplication",
                    "analyze_test_coverage"
                ],
                "docstring": "Analyzes code quality metrics including complexity and duplication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_tools\\swarm_tools\\analyzers\\print_metrics_summary.py": {
        "language": ".py",
        "functions": [
            "format_duration",
            "print_metrics_summary",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "agent_tools\\swarm_tools\\analyzers\\visualize_agent_layout.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_draw_point",
            "_draw_region",
            "visualize_agent",
            "visualize_all_agents",
            "analyze_layout"
        ],
        "classes": {
            "AgentLayoutVisualizer": {
                "methods": [
                    "__init__",
                    "_draw_point",
                    "_draw_region",
                    "visualize_agent",
                    "visualize_all_agents",
                    "analyze_layout"
                ],
                "docstring": "Visualizes agent positions and regions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agent_tools\\swarm_tools\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\browser\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\browser\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_driver",
            "save_cookies",
            "load_cookies"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "set_driver",
                    "save_cookies",
                    "load_cookies"
                ],
                "docstring": "Handles saving and loading of browser cookies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agent_tools\\swarm_tools\\browser\\debug_helper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "print_page_info",
            "print_form_elements",
            "print_element_info",
            "wait_for_hotkey",
            "find_element_by_attributes"
        ],
        "classes": {
            "BrowserDebugger": {
                "methods": [
                    "__init__",
                    "print_page_info",
                    "print_form_elements",
                    "print_element_info",
                    "wait_for_hotkey",
                    "find_element_by_attributes"
                ],
                "docstring": "Helper class for debugging browser automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\swarm_tools\\browser\\example_bridge.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\browser\\integration.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "StealthBrowserBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\swarm_tools\\browser\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "click_initial_login",
            "click_secondary_login",
            "wait_for_email_input",
            "wait_for_continue_button",
            "wait_for_password_input",
            "input_email",
            "input_password",
            "find_element",
            "find_element_by_text",
            "wait_for_verification_code",
            "check_login_status",
            "handle_verification_code",
            "verify_login",
            "input_codex_message",
            "wait_for_codex_response"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "click_initial_login",
                    "click_secondary_login",
                    "wait_for_email_input",
                    "wait_for_continue_button",
                    "wait_for_password_input",
                    "input_email",
                    "input_password",
                    "find_element",
                    "find_element_by_text",
                    "wait_for_verification_code",
                    "check_login_status",
                    "handle_verification_code",
                    "verify_login",
                    "input_codex_message",
                    "wait_for_codex_response"
                ],
                "docstring": "Handles login-related operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "agent_tools\\swarm_tools\\browser\\stealth_browser.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "navigate_to",
            "check_login_status",
            "print_element_info"
        ],
        "classes": {
            "StealthBrowser": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate_to",
                    "check_login_status",
                    "print_element_info"
                ],
                "docstring": "Codex-compatible synchronous stealth browser.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\swarm_tools\\browser\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\browser\\__main__.py": {
        "language": ".py",
        "functions": [
            "keep_browser_open",
            "handle_login_flow",
            "try_cookie_login",
            "send_codex_message",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agent_tools\\swarm_tools\\general_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\models\\analysis.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "ClassInfo": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Information about a class in the codebase.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Analysis results for a single file.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ProjectAnalysis": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Complete project analysis results.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agent_tools\\swarm_tools\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\scanner\\dry_scanner.py": {
        "language": ".py",
        "functions": [
            "generate_report",
            "main",
            "__init__",
            "hash_code",
            "normalize",
            "__init__",
            "analyze_file",
            "collect_definitions",
            "__init__",
            "analyze_test_file",
            "collect_test_patterns"
        ],
        "classes": {
            "CodeLocation": {
                "methods": [],
                "docstring": "Represents a location of code in the codebase.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DuplicateGroup": {
                "methods": [],
                "docstring": "Represents a group of duplicate code elements.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CodeHasher": {
                "methods": [
                    "__init__",
                    "hash_code"
                ],
                "docstring": "Handles code normalization and hashing for duplicate detection.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CodeNormalizer": {
                "methods": [
                    "normalize"
                ],
                "docstring": "Normalizes code for comparison by removing whitespace and comments.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ASTAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "collect_definitions"
                ],
                "docstring": "Analyzes Python AST for code patterns and duplicates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TestAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_test_file",
                    "collect_test_patterns"
                ],
                "docstring": "Analyzes test files for patterns and duplicates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "agent_tools\\swarm_tools\\scanner\\scanner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Scanner": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Scanner for analyzing project structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\swarm_tools\\scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\swarm_tools\\utils\\backup_restore.py": {
        "language": ".py",
        "functions": [
            "add_path",
            "write_metadata",
            "backup_runtime",
            "safe_extract",
            "restore",
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "agent_tools\\swarm_tools\\utils\\cleanup_project.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "analyze_project",
            "generate_report",
            "consolidate_test_files",
            "clean_temp_files"
        ],
        "classes": {
            "ProjectCleaner": {
                "methods": [
                    "__init__",
                    "analyze_project",
                    "generate_report",
                    "consolidate_test_files",
                    "clean_temp_files"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "agent_tools\\swarm_tools\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "is_valid_file",
            "is_test_file",
            "get_file_extension",
            "normalize_path",
            "create_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agent_tools\\swarm_tools\\utils\\find_large_modules.py": {
        "language": ".py",
        "functions": [
            "scan_modules",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\swarm_tools\\utils\\list_large_files.py": {
        "language": ".py",
        "functions": [
            "find_large_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agent_tools\\swarm_tools\\utils\\zip_resolver.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "__init__",
            "resolve",
            "resolve_batch",
            "get_stats",
            "reset",
            "warm_cache",
            "get_circuit_breaker_status"
        ],
        "classes": {
            "ZipResolverConfig": {
                "methods": [],
                "docstring": "Configuration for ZIP code resolution service.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute"
                ],
                "docstring": "Circuit breaker pattern implementation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ZipResolver": {
                "methods": [
                    "__init__",
                    "resolve",
                    "resolve_batch",
                    "get_stats",
                    "reset",
                    "warm_cache",
                    "get_circuit_breaker_status"
                ],
                "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "agent_tools\\swarm_tools\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_tools\\utils\\init_mailbox.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_inbox",
            "get_outbox",
            "send_message",
            "receive_message",
            "archive_message"
        ],
        "classes": {
            "AgentMailbox": {
                "methods": [
                    "__init__",
                    "get_inbox",
                    "get_outbox",
                    "send_message",
                    "receive_message",
                    "archive_message"
                ],
                "docstring": "Agent mailbox for message handling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agent_tools\\utils\\retry_utils.py": {
        "language": ".py",
        "functions": [
            "retry",
            "with_retry",
            "decorator",
            "sync_wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "archive\\cursor_chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "load_pending_requests",
            "save_responses",
            "process_requests",
            "main_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "backups\\auth_backup_20250605_161813\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "backups\\auth_backup_20250605_161813\\auth\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining"
        ],
        "classes": {
            "ExpirableMixin": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Mixin providing expiration-related functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "backups\\auth_backup_20250605_161813\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_attempt_login",
            "login",
            "logout",
            "verify_session",
            "refresh_token",
            "cleanup_expired_sessions",
            "login_operation"
        ],
        "classes": {
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_attempt_login",
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token",
                    "cleanup_expired_sessions"
                ],
                "docstring": "Authentication manager implementing the platform-agnostic interface.",
                "base_classes": [
                    "AbstractAuthInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "backups\\auth_backup_20250605_161813\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "backups\\auth_backup_20250605_161813\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "extend",
            "is_valid",
            "time_remaining",
            "__init__",
            "start_cleanup",
            "stop_cleanup",
            "create_session",
            "get_session",
            "invalidate_session",
            "cleanup_expired",
            "_generate_session_id",
            "cleanup_loop"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "extend",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents an active user session.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "start_cleanup",
                    "stop_cleanup",
                    "create_session",
                    "get_session",
                    "invalidate_session",
                    "cleanup_expired",
                    "_generate_session_id"
                ],
                "docstring": "Manages user sessions with automatic cleanup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "backups\\auth_backup_20250605_161813\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "is_valid",
            "time_remaining",
            "__init__",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "backups\\auth_backup_20250605_161813\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "backups\\auth_backup_20250605_162224\\auth\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining"
        ],
        "classes": {
            "ExpirableMixin": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Mixin providing expiration-related functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "backups\\auth_backup_20250605_162224\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "backups\\auth_backup_20250605_162224\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_attempt_login",
            "login",
            "logout",
            "verify_session",
            "refresh_token",
            "cleanup_expired_sessions",
            "login_operation"
        ],
        "classes": {
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_attempt_login",
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token",
                    "cleanup_expired_sessions"
                ],
                "docstring": "Authentication manager implementing the platform-agnostic interface.",
                "base_classes": [
                    "AbstractAuthInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "backups\\auth_backup_20250605_162224\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "backups\\auth_backup_20250605_162224\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "backups\\auth_backup_20250605_162224\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "is_valid",
            "time_remaining",
            "__init__",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "backups\\auth_backup_20250605_162744\\auth\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining"
        ],
        "classes": {
            "ExpirableMixin": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Mixin providing expiration-related functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "backups\\auth_backup_20250605_162224\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "extend",
            "is_valid",
            "time_remaining",
            "__init__",
            "start_cleanup",
            "stop_cleanup",
            "create_session",
            "get_session",
            "invalidate_session",
            "cleanup_expired",
            "_generate_session_id",
            "cleanup_loop"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "extend",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents an active user session.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "start_cleanup",
                    "stop_cleanup",
                    "create_session",
                    "get_session",
                    "invalidate_session",
                    "cleanup_expired",
                    "_generate_session_id"
                ],
                "docstring": "Manages user sessions with automatic cleanup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "backups\\auth_backup_20250605_162744\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "backups\\auth_backup_20250605_162744\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_attempt_login",
            "login",
            "logout",
            "verify_session",
            "refresh_token",
            "cleanup_expired_sessions",
            "login_operation"
        ],
        "classes": {
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_attempt_login",
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token",
                    "cleanup_expired_sessions"
                ],
                "docstring": "Authentication manager implementing the platform-agnostic interface.",
                "base_classes": [
                    "AbstractAuthInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "backups\\auth_backup_20250605_162744\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "backups\\auth_backup_20250605_162744\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "is_valid",
            "time_remaining",
            "__init__",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "backups\\auth_backup_20250605_162744\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "extend",
            "is_valid",
            "time_remaining",
            "__init__",
            "start_cleanup",
            "stop_cleanup",
            "create_session",
            "get_session",
            "invalidate_session",
            "cleanup_expired",
            "_generate_session_id",
            "cleanup_loop"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "extend",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents an active user session.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "start_cleanup",
                    "stop_cleanup",
                    "create_session",
                    "get_session",
                    "invalidate_session",
                    "cleanup_expired",
                    "_generate_session_id"
                ],
                "docstring": "Manages user sessions with automatic cleanup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "backups\\auth_backup_20250605_162744\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\bridge_response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_response_processor",
            "_get_response_files",
            "__init__",
            "on_created"
        ],
        "classes": {
            "BridgeResponseLoopDaemon": {
                "methods": [
                    "__init__",
                    "_create_response_processor",
                    "_get_response_files"
                ],
                "docstring": "Bridge response loop daemon implementation.",
                "base_classes": [
                    "BaseResponseLoopDaemon"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentMailboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file creation events in agent mailbox.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "bridge\\bridge_response_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_template",
            "_generate_prompt",
            "_write_prompt",
            "_archive_response"
        ],
        "classes": {
            "BridgeResponseProcessor": {
                "methods": [
                    "__init__",
                    "_get_template",
                    "_generate_prompt",
                    "_write_prompt",
                    "_archive_response"
                ],
                "docstring": "Processes responses for the bridge response loop.",
                "base_classes": [
                    "ResponseProcessor"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "bridge\\chatgpt_bridge_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_load_coords",
            "_init_browser",
            "_wait_for_element",
            "_submit_prompt",
            "_write_to_inbox",
            "_inject_to_cursor",
            "_process_outbox",
            "run"
        ],
        "classes": {
            "ChatGPTBridgeLoop": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_load_coords",
                    "_init_browser",
                    "_wait_for_element",
                    "_submit_prompt",
                    "_write_to_inbox",
                    "_inject_to_cursor",
                    "_process_outbox",
                    "run"
                ],
                "docstring": "Handles the autonomous ChatGPT \u2194 Agent \u2194 Cursor relay loop.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "bridge\\discord_hook.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_message",
            "_get_title",
            "_get_color",
            "send_event",
            "send_health_update",
            "send_prompt_status"
        ],
        "classes": {
            "EventType": {
                "methods": [],
                "docstring": "Types of bridge events.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DiscordHook": {
                "methods": [
                    "__init__",
                    "_format_message",
                    "_get_title",
                    "_get_color",
                    "send_event",
                    "send_health_update",
                    "send_prompt_status"
                ],
                "docstring": "Handles Discord notifications for bridge events.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "bridge\\monitoring.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_metrics",
            "_save_metrics",
            "update_metrics",
            "record_prompt_processed",
            "get_status_summary",
            "check_health"
        ],
        "classes": {
            "BridgeMetrics": {
                "methods": [],
                "docstring": "Bridge system metrics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BridgeMonitor": {
                "methods": [
                    "__init__",
                    "_load_metrics",
                    "_save_metrics",
                    "update_metrics",
                    "record_prompt_processed",
                    "get_status_summary",
                    "check_health"
                ],
                "docstring": "Monitors bridge system health and metrics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "bridge\\response_loop_daemon.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\main.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "collect_data",
            "process_data",
            "generate_visualizations",
            "generate_report",
            "run_pipeline",
            "run_range"
        ],
        "classes": {
            "CrimeReportGenerator": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "process_data",
                    "generate_visualizations",
                    "generate_report",
                    "run_pipeline",
                    "run_range"
                ],
                "docstring": "Main class for orchestrating the crime report generation pipeline.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "crime_report_generator\\agents\\report_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_data",
            "generate_report",
            "schedule_report",
            "distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportAgent": {
                "methods": [
                    "__init__",
                    "process_data",
                    "generate_report",
                    "schedule_report",
                    "distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Agent for managing crime report generation and distribution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "crime_report_generator\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\data_sources\\austin_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "AustinScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Austin Police Department crime data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "crime_report_generator\\data_sources\\houston_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_data",
            "_save_raw_data",
            "_parse_crime_type"
        ],
        "classes": {
            "HoustonScraper": {
                "methods": [
                    "__init__",
                    "collect_data",
                    "_save_raw_data",
                    "_parse_crime_type"
                ],
                "docstring": "Scraper for Houston Police Department crime data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "crime_report_generator\\data_sources\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\processors\\aggregator.py": {
        "language": ".py",
        "functions": [
            "aggregate_by_type",
            "aggregate_by_district",
            "top_locations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\processors\\cleaner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clean",
            "_clean_date",
            "_clean_crime_type",
            "_clean_count",
            "_clean_location",
            "_clean_status"
        ],
        "classes": {
            "DataCleaner": {
                "methods": [
                    "__init__",
                    "clean",
                    "_clean_date",
                    "_clean_crime_type",
                    "_clean_count",
                    "_clean_location",
                    "_clean_status"
                ],
                "docstring": "Class for cleaning and standardizing crime data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\processors\\categorizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "categorize_offense",
            "categorize_description",
            "categorize_dataframe",
            "_categorize_row",
            "categorize_crime"
        ],
        "classes": {
            "CrimeCategory": {
                "methods": [],
                "docstring": "Enumeration of crime categories.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CrimeCategorizer": {
                "methods": [
                    "__init__",
                    "categorize_offense",
                    "categorize_description",
                    "categorize_dataframe",
                    "_categorize_row",
                    "categorize_crime"
                ],
                "docstring": "Class for categorizing crime data into standardized categories.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "crime_report_generator\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\reports\\arcgis_fetcher.py": {
        "language": ".py",
        "functions": [
            "get_bounding_box",
            "fetch_montgomery_arcgis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "crime_report_generator\\reports\\crimegrade_scraper.py": {
        "language": ".py",
        "functions": [
            "fetch_crimegrade_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "crime_report_generator\\reports\\crime_report_pipeline.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "generate_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\reports\\report_formatter.py": {
        "language": ".py",
        "functions": [
            "format_markdown_report",
            "format_discord_report",
            "format_instagram_report",
            "format_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "crime_report_generator\\reports\\report_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_markdown_report",
            "generate_html_report",
            "generate_pdf_report",
            "generate_json_report",
            "generate_summary_statistics",
            "_validate_dataframe"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "generate_markdown_report",
                    "generate_html_report",
                    "generate_pdf_report",
                    "generate_json_report",
                    "generate_summary_statistics",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime reports in various formats.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\reports\\summarizer.py": {
        "language": ".py",
        "functions": [
            "normalize_crime_types",
            "summarize_arcgis_data",
            "summarize_crimegrade_data",
            "compare_sources"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "crime_report_generator\\reports\\zip_mapper.py": {
        "language": ".py",
        "functions": [
            "get_zip_info",
            "format_location",
            "get_zip_details"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "crime_report_generator\\reports\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\scheduler\\report_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_report",
            "generate_report",
            "generate_and_distribute_report",
            "get_scheduled_jobs",
            "remove_job",
            "shutdown"
        ],
        "classes": {
            "ReportScheduler": {
                "methods": [
                    "__init__",
                    "schedule_report",
                    "generate_report",
                    "generate_and_distribute_report",
                    "get_scheduled_jobs",
                    "remove_job",
                    "shutdown"
                ],
                "docstring": "Class for scheduling and automating crime report generation and distribution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\scheduler\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "crime_report_generator\\visualizations\\crime_visualizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_category_pie_chart",
            "create_trend_line_chart",
            "create_location_bar_chart",
            "create_category_trend_chart",
            "save_visualization",
            "_validate_dataframe"
        ],
        "classes": {
            "CrimeVisualizer": {
                "methods": [
                    "__init__",
                    "create_category_pie_chart",
                    "create_trend_line_chart",
                    "create_location_bar_chart",
                    "create_category_trend_chart",
                    "save_visualization",
                    "_validate_dataframe"
                ],
                "docstring": "Class for generating crime data visualizations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "crime_report_generator\\visualizations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "discord_bot\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages"
        ],
        "classes": {
            "AgentInterface": {
                "methods": [
                    "__init__",
                    "send_command",
                    "broadcast_command",
                    "get_agent_status",
                    "clear_agent_messages"
                ],
                "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "discord_bot\\bot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config"
        ],
        "classes": {
            "DreamOSBot": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Dream.OS Discord bot implementation.",
                "base_classes": [
                    "commands.Bot"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "discord_bot\\log_utils.py": {
        "language": ".py",
        "functions": [
            "get_logs_embed"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "discord_bot\\commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "cog_unload"
        ],
        "classes": {
            "AgentCommands": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "cog_unload"
                ],
                "docstring": "Commands for managing agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "discord_bot\\devlog_commands.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DevlogCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Commands for managing agent development logs.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "discord_bot\\discord_commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_pages",
            "setup_buttons",
            "add_category_buttons",
            "add_navigation_buttons",
            "__init__",
            "__init__",
            "_load_config"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__",
                    "setup_pages",
                    "setup_buttons",
                    "add_category_buttons",
                    "add_navigation_buttons"
                ],
                "docstring": "Help menu view for displaying command documentation.",
                "base_classes": [
                    "ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CommandSearchModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for searching commands with enhanced UI.",
                "base_classes": [
                    "ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentCommands": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Commands for managing agents.",
                "base_classes": [
                    "commands.Cog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "discord_bot\\help_menu.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_pages",
            "setup_buttons",
            "add_category_buttons",
            "add_navigation_buttons",
            "__init__"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__",
                    "setup_pages",
                    "setup_buttons",
                    "add_category_buttons",
                    "add_navigation_buttons"
                ],
                "docstring": "Help menu view for displaying command documentation.",
                "base_classes": [
                    "ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CommandSearchModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for searching commands with enhanced UI.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "discord_bot\\tts.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TTSManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages text-to-speech generation using multiple engines.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "discord_bot\\notifier.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_webhooks",
            "_create_embed"
        ],
        "classes": {
            "DiscordNotifier": {
                "methods": [
                    "__init__",
                    "_load_webhooks",
                    "_create_embed"
                ],
                "docstring": "Unified Discord notification system.\n\nThis class provides a centralized way to send notifications to Discord\nchannels and webhooks, with consistent error handling, logging, and\nperformance monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "discord_bot\\cogs\\help_menu.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "HelpMenu": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Help menu cog for Discord bot.",
                "base_classes": [
                    "commands.Cog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "discord_bot\\voicebot.py": {
        "language": ".py",
        "functions": [
            "run_voicebot",
            "__init__",
            "on_created",
            "__init__",
            "_after_playback"
        ],
        "classes": {
            "VoiceQueueHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file system events for the voice queue directory.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "VoiceBot": {
                "methods": [
                    "__init__",
                    "_after_playback"
                ],
                "docstring": "Voice-enabled Discord bot for swarm audio output.",
                "base_classes": [
                    "commands.Bot"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "discord_bot\\cogs\\basic.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BasicCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Basic commands cog for Discord bot.",
                "base_classes": [
                    "Cog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "discord_bot\\voice_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "discord_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "docs\\examples\\llm_agent_example.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "discord_bot\\cogs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "docs\\examples\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\bridge.py": {
        "language": ".py",
        "functions": [
            "parse_hybrid_response",
            "__init__",
            "_load_config",
            "_validate_config",
            "_find_chat_input",
            "_find_send_button",
            "_find_login_button",
            "_save_requests",
            "_save_health",
            "_is_logged_in"
        ],
        "classes": {
            "BridgeRequest": {
                "methods": [],
                "docstring": "A request to be processed by the bridge.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BridgeHealth": {
                "methods": [],
                "docstring": "Health status information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses hybrid responses containing both text and structured data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            },
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_validate_config",
                    "_find_chat_input",
                    "_find_send_button",
                    "_find_login_button",
                    "_save_requests",
                    "_save_health",
                    "_is_logged_in"
                ],
                "docstring": "Main bridge service for ChatGPT integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_interface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_command",
            "broadcast_command",
            "get_agent_status",
            "clear_agent_messages",
            "cleanup"
        ],
        "classes": {
            "AgentInterface": {
                "methods": [
                    "__init__",
                    "send_command",
                    "broadcast_command",
                    "get_agent_status",
                    "clear_agent_messages",
                    "cleanup"
                ],
                "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages an agent's processing loop.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\cli.py": {
        "language": ".py",
        "functions": [
            "direct_send_message",
            "bus_send_message",
            "parse_args",
            "validate_priority",
            "load_coordinates",
            "cli_main",
            "__init__",
            "send_message",
            "get_status",
            "clear_messages",
            "shutdown"
        ],
        "classes": {
            "MessageCLI": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_status",
                    "clear_messages",
                    "shutdown"
                ],
                "docstring": "Command-line interface for agent communication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_dir",
            "log_dir"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "log_dir",
                    "log_dir"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "press_ctrl_enter",
            "press_ctrl_n",
            "press_ctrl_v",
            "press_ctrl_a"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "press_ctrl_enter",
                    "press_ctrl_n",
                    "press_ctrl_v",
                    "press_ctrl_a"
                ],
                "docstring": "Controls cursor movement and input for agent interaction.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics"
        ],
        "classes": {
            "LogManager": {
                "methods": [
                    "__init__",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics"
                ],
                "docstring": "Manages logging operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\menu.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_theme",
            "get_font",
            "get_color",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "__init__",
            "_init_ui",
            "add_item",
            "clear",
            "__init__",
            "add_button",
            "add_header",
            "add_footer",
            "add_separator",
            "build",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MenuStyle": {
                "methods": [],
                "docstring": "Menu styles.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuItemType": {
                "methods": [],
                "docstring": "Menu item types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuItem": {
                "methods": [],
                "docstring": "Menu item.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuTheme": {
                "methods": [
                    "__init__",
                    "_init_theme",
                    "get_font",
                    "get_color"
                ],
                "docstring": "Menu theme.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuButton": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu button.",
                "base_classes": [
                    "QWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuHeader": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu header.",
                "base_classes": [
                    "QWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuFooter": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Menu footer.",
                "base_classes": [
                    "QWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuSignals": {
                "methods": [],
                "docstring": "Menu signals.",
                "base_classes": [
                    "QObject"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Menu": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "add_item",
                    "clear"
                ],
                "docstring": "Menu widget.",
                "base_classes": [
                    "QWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "add_button",
                    "add_header",
                    "add_footer",
                    "add_separator",
                    "build"
                ],
                "docstring": "Menu builder.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "QWidget": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "QVBoxLayout": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "QLabel": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "QFrame": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "Qt": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "pyqtSignal": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Kiddie Script",
                "agent_type": "Utility"
            },
            "QObject": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "QFont": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "QColor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "AlignmentFlag": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 57
    },
    "dreamos\\core\\message.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\metrics.py": {
        "language": ".py",
        "functions": [
            "save_metrics",
            "load_metrics",
            "__init__",
            "track_command",
            "get_command_stats",
            "reset_stats",
            "save_metrics",
            "load_metrics"
        ],
        "classes": {
            "CommandMetrics": {
                "methods": [
                    "__init__",
                    "track_command",
                    "get_command_stats",
                    "reset_stats",
                    "save_metrics",
                    "load_metrics"
                ],
                "docstring": "Track and report command usage metrics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\response_collector_new.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\system_init.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "initialize_core_systems",
            "establish_communication_channels",
            "begin_monitoring",
            "report_status"
        ],
        "classes": {
            "SystemInitializer": {
                "methods": [
                    "__init__",
                    "initialize_core_systems",
                    "establish_communication_channels",
                    "begin_monitoring",
                    "report_status"
                ],
                "docstring": "Handles system initialization and communication setup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "dreamos\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\agent_control.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_agent",
            "unregister_agent",
            "get_agent",
            "list_agents",
            "update_agent_config"
        ],
        "classes": {
            "AgentControl": {
                "methods": [
                    "__init__",
                    "register_agent",
                    "unregister_agent",
                    "get_agent",
                    "list_agents",
                    "update_agent_config"
                ],
                "docstring": "High-level agent control and management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\agent_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_agent",
            "stop_agent",
            "resume_agent",
            "verify_agent",
            "cleanup_agent",
            "get_agent_status"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "start_agent",
                    "stop_agent",
                    "resume_agent",
                    "verify_agent",
                    "cleanup_agent",
                    "get_agent_status"
                ],
                "docstring": "Controls agent lifecycle and coordination.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\agent_control\\agent_selection_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "_handle_selection"
        ],
        "classes": {
            "AgentSelectionDialog": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "_handle_selection"
                ],
                "docstring": "Dialog for selecting one or more agents.",
                "base_classes": [
                    "QDialog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent_control\\agent_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "list_agents",
            "cleanup"
        ],
        "classes": {
            "AgentOperations": {
                "methods": [
                    "__init__",
                    "list_agents",
                    "cleanup"
                ],
                "docstring": "Handles agent-specific operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent_control\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_outbox",
            "_save_outbox"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "_load_outbox",
                    "_save_outbox"
                ],
                "docstring": "Handles outbox operations for bridge communication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\agent_control\\captain.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Captain": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Central coordinator for agents.\n\nThe Captain assigns tasks and routes messages using the\n:class:`MessageSystem`. It also keeps track of tasks via\n:class:`TaskManager`.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\agent_control\\controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_menu_builder",
            "_handle_menu_action",
            "_handle_list_agents",
            "cleanup",
            "run",
            "list_agents",
            "onboard_agent",
            "resume_agent",
            "verify_agent",
            "repair_agent",
            "backup_agent",
            "restore_agent",
            "send_message"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "set_menu_builder",
                    "_handle_menu_action",
                    "_handle_list_agents",
                    "cleanup",
                    "run",
                    "list_agents",
                    "onboard_agent",
                    "resume_agent",
                    "verify_agent",
                    "repair_agent",
                    "backup_agent",
                    "restore_agent",
                    "send_message"
                ],
                "docstring": "Main controller for agent operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\agent_control\\coordinate_calibrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_coordinates",
            "save_coordinates",
            "get_coordinates",
            "update_coordinates",
            "calibrate_agent"
        ],
        "classes": {
            "CoordinateCalibrator": {
                "methods": [
                    "__init__",
                    "load_coordinates",
                    "save_coordinates",
                    "get_coordinates",
                    "update_coordinates",
                    "calibrate_agent"
                ],
                "docstring": "Manages UI coordinate calibration for agent interactions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\coordinate_transformer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_monitors",
            "transform_coordinates",
            "transform_coordinate_dict"
        ],
        "classes": {
            "CoordinateTransformer": {
                "methods": [
                    "__init__",
                    "_get_monitors",
                    "transform_coordinates",
                    "transform_coordinate_dict"
                ],
                "docstring": "Transforms coordinates between monitor and screen space.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent_control\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "move_to",
            "click",
            "type_text",
            "press_enter",
            "get_position",
            "wait",
            "move_to_agent",
            "click_input_box",
            "click_copy_button"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "move_to",
                    "click",
                    "type_text",
                    "press_enter",
                    "get_position",
                    "wait",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button"
                ],
                "docstring": "Controls cursor movement and interaction.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent_control\\devlog_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_event",
            "get_log",
            "clear_log",
            "send_embed",
            "shutdown"
        ],
        "classes": {
            "DevLogManager": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_log",
                    "clear_log",
                    "send_embed",
                    "shutdown"
                ],
                "docstring": "Manages development logs for agent control.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\main.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamos\\core\\agent_control\\response_capture.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coordinates",
            "capture_response",
            "wait_for_copy_button"
        ],
        "classes": {
            "ResponseCapture": {
                "methods": [
                    "__init__",
                    "_load_coordinates",
                    "capture_response",
                    "wait_for_copy_button"
                ],
                "docstring": "Handles capturing and processing UI responses.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\agent_control\\menu_builder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_controller",
            "_handle_menu_action",
            "cleanup",
            "_build_menu",
            "_handle_list_agents",
            "_handle_agent_selection",
            "display_menu",
            "connect_signals",
            "disconnect_signals"
        ],
        "classes": {
            "MenuBuilder": {
                "methods": [
                    "__init__",
                    "set_controller",
                    "_handle_menu_action",
                    "cleanup",
                    "_build_menu",
                    "_handle_list_agents",
                    "_handle_agent_selection",
                    "display_menu",
                    "connect_signals",
                    "disconnect_signals"
                ],
                "docstring": "Builds the agent control menu.",
                "base_classes": [
                    "BaseMenuBuilder"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent_control\\periodic_restart.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_agent_management",
            "stop_agent_management",
            "__init__",
            "start_resume_management",
            "stop_resume_management"
        ],
        "classes": {
            "AgentManager": {
                "methods": [
                    "__init__",
                    "start_agent_management",
                    "stop_agent_management"
                ],
                "docstring": "Manages agent periodic restarts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentResumeManager": {
                "methods": [
                    "__init__",
                    "start_resume_management",
                    "stop_resume_management"
                ],
                "docstring": "Manages agent resumption after restarts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\screenshot_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture",
            "get_screenshots",
            "get_latest_screenshot",
            "compare_screenshots",
            "cleanup"
        ],
        "classes": {
            "ScreenshotLogger": {
                "methods": [
                    "__init__",
                    "capture",
                    "get_screenshots",
                    "get_latest_screenshot",
                    "compare_screenshots",
                    "cleanup"
                ],
                "docstring": "Tracks and manages debug screenshots for UI automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\agent_control\\system_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__init__",
            "_load_message_history",
            "_save_message_history",
            "_connect_components",
            "_needs_captain_response"
        ],
        "classes": {
            "MessageRecord": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Record of a message between agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SystemOrchestrator": {
                "methods": [
                    "__init__",
                    "_load_message_history",
                    "_save_message_history",
                    "_connect_components",
                    "_needs_captain_response"
                ],
                "docstring": "Orchestrates all Dream.OS components.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\agent_control\\timing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_focus",
            "wait_click",
            "wait_typing",
            "wait_capture",
            "wait_screenshot",
            "wait_move",
            "wait_scroll",
            "wait_load",
            "wait_refresh"
        ],
        "classes": {
            "Timing": {
                "methods": [
                    "__init__",
                    "wait_focus",
                    "wait_click",
                    "wait_typing",
                    "wait_capture",
                    "wait_screenshot",
                    "wait_move",
                    "wait_scroll",
                    "wait_load",
                    "wait_refresh"
                ],
                "docstring": "Minimal Timing stub for UI/automation flow compatibility.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\agent_control\\task_manager.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "validate",
            "__init__",
            "_load_tasks",
            "_save_tasks",
            "create_task",
            "get_task",
            "update_task_status",
            "get_agent_tasks",
            "get_blocked_tasks",
            "get_high_priority_tasks",
            "get_task_context",
            "generate_task_summary",
            "cleanup_completed_tasks"
        ],
        "classes": {
            "Task": {
                "methods": [
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Task structure for agent operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskManager": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_save_tasks",
                    "create_task",
                    "get_task",
                    "update_task_status",
                    "get_agent_tasks",
                    "get_blocked_tasks",
                    "get_high_priority_tasks",
                    "get_task_context",
                    "generate_task_summary",
                    "cleanup_completed_tasks"
                ],
                "docstring": "Manages task distribution and tracking between agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\core\\agent_control\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\agent_control\\ui_automation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_monitors",
            "_load_config",
            "_setup_signal_handlers",
            "_handle_interrupt",
            "_calibration_context",
            "_cleanup_calibration",
            "_calibration_loop",
            "start_calibration",
            "_get_screenshot_logger",
            "_validate_window_title",
            "_capture_debug_screenshot",
            "_transform_coordinates",
            "_transform_coordinate_dict",
            "get_agent_coordinates",
            "_validate_coordinates",
            "_load_coordinates",
            "_get_default_coordinates",
            "_click_focus",
            "send_message",
            "_load_onboarding_prompt",
            "perform_onboarding_sequence",
            "_split_message",
            "cleanup",
            "move_to",
            "click",
            "type_text",
            "press_key",
            "hotkey",
            "screenshot",
            "_get_response",
            "move_to_agent",
            "click_input_box",
            "click_copy_button",
            "get_response_region",
            "_has_duplicate_coordinates",
            "_has_out_of_bounds_coordinates"
        ],
        "classes": {
            "UIAutomation": {
                "methods": [
                    "__init__",
                    "_initialize_monitors",
                    "_load_config",
                    "_setup_signal_handlers",
                    "_handle_interrupt",
                    "_calibration_context",
                    "_cleanup_calibration",
                    "_calibration_loop",
                    "start_calibration",
                    "_get_screenshot_logger",
                    "_validate_window_title",
                    "_capture_debug_screenshot",
                    "_transform_coordinates",
                    "_transform_coordinate_dict",
                    "get_agent_coordinates",
                    "_validate_coordinates",
                    "_load_coordinates",
                    "_get_default_coordinates",
                    "_click_focus",
                    "send_message",
                    "_load_onboarding_prompt",
                    "perform_onboarding_sequence",
                    "_split_message",
                    "cleanup",
                    "move_to",
                    "click",
                    "type_text",
                    "press_key",
                    "hotkey",
                    "screenshot",
                    "_get_response",
                    "move_to_agent",
                    "click_input_box",
                    "click_copy_button",
                    "get_response_region",
                    "_has_duplicate_coordinates",
                    "_has_out_of_bounds_coordinates"
                ],
                "docstring": "Handles UI automation for agent control.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 74
    },
    "dreamos\\core\\ai\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "format_message",
            "format_system_message",
            "format_user_message",
            "format_assistant_message"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "format_message",
                    "format_system_message",
                    "format_user_message",
                    "format_assistant_message"
                ],
                "docstring": "Simplified ChatGPT integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\ai\\dreamscribe.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory_corpus",
            "_load_threads",
            "_load_insight_patterns",
            "_save_memory_corpus",
            "_save_thread",
            "_save_insight_patterns",
            "_extract_insights",
            "_find_connections",
            "_update_narratives",
            "ingest_devlog",
            "get_memory",
            "get_thread",
            "get_system_insights"
        ],
        "classes": {
            "MemoryFragment": {
                "methods": [],
                "docstring": "A single memory fragment from a devlog or system event.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "NarrativeThread": {
                "methods": [],
                "docstring": "A connected sequence of memories forming a coherent story.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Dreamscribe": {
                "methods": [
                    "__init__",
                    "_load_memory_corpus",
                    "_load_threads",
                    "_load_insight_patterns",
                    "_save_memory_corpus",
                    "_save_thread",
                    "_save_insight_patterns",
                    "_extract_insights",
                    "_find_connections",
                    "_update_narratives",
                    "ingest_devlog",
                    "get_memory",
                    "get_thread",
                    "get_system_insights"
                ],
                "docstring": "The core memory and narrative system for Dream.OS.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\ai\\llm_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_history"
        ],
        "classes": {
            "LLMAgent": {
                "methods": [
                    "__init__",
                    "get_history"
                ],
                "docstring": "Agent that integrates ChatGPT with the messaging system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\ai\\memory_querier.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_recent_memory",
            "summarize_topic",
            "_calculate_memory_similarity",
            "find_similar_threads",
            "get_agent_insights",
            "get_task_history"
        ],
        "classes": {
            "MemoryQuerier": {
                "methods": [
                    "__init__",
                    "get_recent_memory",
                    "summarize_topic",
                    "_calculate_memory_similarity",
                    "find_similar_threads",
                    "get_agent_insights",
                    "get_task_history"
                ],
                "docstring": "Provides query interface for agent memory corpus.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\auth\\interface.py": {
        "language": ".py",
        "functions": [
            "login",
            "logout",
            "verify_session",
            "refresh_token"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AbstractAuthInterface": {
                "methods": [
                    "login",
                    "logout",
                    "verify_session",
                    "refresh_token"
                ],
                "docstring": "Abstract base class defining the authentication interface.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\auth\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "time_remaining"
        ],
        "classes": {
            "ExpirableMixin": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Mixin providing expiration-related functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\auth\\login_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\auth\\retry.py": {
        "language": ".py",
        "functions": [
            "retry",
            "__init__",
            "calculate_delay",
            "execute",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RetryError": {
                "methods": [],
                "docstring": "Base class for retry-related errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "calculate_delay",
                    "execute"
                ],
                "docstring": "Implements retry logic with exponential backoff.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\auth\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "authenticate",
            "validate_token",
            "refresh_token",
            "create_session",
            "get_session",
            "invalidate_session"
        ],
        "classes": {
            "AuthConfig": {
                "methods": [],
                "docstring": "Configuration for authentication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AuthManager": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "authenticate",
                    "validate_token",
                    "refresh_token",
                    "create_session",
                    "get_session",
                    "invalidate_session"
                ],
                "docstring": "Manages authentication and authorization.",
                "base_classes": [
                    "AbstractAuthInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\auth\\session.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Session": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Session class for managing user sessions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\auth\\token.py": {
        "language": ".py",
        "functions": [
            "is_valid",
            "time_remaining",
            "__init__",
            "_load_secret_key",
            "generate_token",
            "validate_token",
            "get_token_info",
            "refresh_token",
            "invalidate_token",
            "cleanup_expired",
            "_sign_token"
        ],
        "classes": {
            "TokenInfo": {
                "methods": [
                    "is_valid",
                    "time_remaining"
                ],
                "docstring": "Represents token metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TokenHandler": {
                "methods": [
                    "__init__",
                    "_load_secret_key",
                    "generate_token",
                    "validate_token",
                    "get_token_info",
                    "refresh_token",
                    "invalidate_token",
                    "cleanup_expired",
                    "_sign_token"
                ],
                "docstring": "Handles token generation, validation, and refresh.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\auth\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\automation\\browser_control.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "navigate_to",
            "wait_for_element",
            "send_keys",
            "click",
            "get_text"
        ],
        "classes": {
            "BrowserControl": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate_to",
                    "wait_for_element",
                    "send_keys",
                    "click",
                    "get_text"
                ],
                "docstring": "Controls browser automation for Dream.OS.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\agent_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_inbox",
            "load_inbox",
            "save_inbox"
        ],
        "classes": {
            "AgentLoop": {
                "methods": [
                    "__init__",
                    "_load_inbox",
                    "load_inbox",
                    "save_inbox"
                ],
                "docstring": "Monitors agent inboxes and processes incoming prompts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\agent_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_agent_state",
            "get_agent_state",
            "get_idle_agents",
            "is_agent_stuck",
            "get_agent_stats",
            "get_all_stats"
        ],
        "classes": {
            "AgentState": {
                "methods": [
                    "__init__",
                    "update_agent_state",
                    "get_agent_state",
                    "get_idle_agents",
                    "is_agent_stuck",
                    "get_agent_stats",
                    "get_all_stats"
                ],
                "docstring": "Manages agent states and provides auto-resume functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\autonomy\\autonomy_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_shutdown",
            "load_tasks",
            "save_devlog"
        ],
        "classes": {
            "AutonomyLoop": {
                "methods": [
                    "__init__",
                    "_handle_shutdown",
                    "load_tasks",
                    "save_devlog"
                ],
                "docstring": "Main autonomy loop for Dream.OS.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\autonomy_loop_runner.py": {
        "language": ".py",
        "functions": [
            "run_pytest",
            "__init__",
            "_load_agent_ownership",
            "_should_run_iteration",
            "_determine_responsible_agent",
            "generate_fix_prompt",
            "apply_code_patch",
            "commit_code"
        ],
        "classes": {
            "AutonomyLoopRunner": {
                "methods": [
                    "__init__",
                    "_load_agent_ownership",
                    "_should_run_iteration",
                    "_determine_responsible_agent",
                    "generate_fix_prompt",
                    "apply_code_patch",
                    "commit_code"
                ],
                "docstring": "Manages the autonomous test-fix loop.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\autonomy\\auto_trigger_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_should_trigger",
            "_determine_responsible_agent"
        ],
        "classes": {
            "AutoTriggerRunner": {
                "methods": [
                    "__init__",
                    "_should_trigger",
                    "_determine_responsible_agent"
                ],
                "docstring": "Manages automatic test failure handling and fix loops.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\bridge_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_status"
        ],
        "classes": {
            "BridgeWriter": {
                "methods": [
                    "__init__",
                    "get_status"
                ],
                "docstring": "Manages writing responses to the bridge.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\content_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_content_event",
            "log_task_completion",
            "log_insight",
            "get_content_history"
        ],
        "classes": {
            "ContentLoop": {
                "methods": [
                    "__init__",
                    "log_content_event",
                    "log_task_completion",
                    "log_insight",
                    "get_content_history"
                ],
                "docstring": "Manages content generation and memory integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\codex_patch_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_patch",
            "get_patch_status",
            "get_all_patches"
        ],
        "classes": {
            "CodexPatchTracker": {
                "methods": [
                    "__init__",
                    "track_patch",
                    "get_patch_status",
                    "get_all_patches"
                ],
                "docstring": "Tracks and manages code patches generated by Codex.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent",
            "register_agent",
            "unregister_agent"
        ],
        "classes": {
            "AgentController": {
                "methods": [
                    "__init__",
                    "get_agent",
                    "register_agent",
                    "unregister_agent"
                ],
                "docstring": "Manages agent lifecycle and coordination.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\core_response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_response_processor",
            "_get_response_files",
            "__init__",
            "on_created"
        ],
        "classes": {
            "CoreResponseLoopDaemon": {
                "methods": [
                    "__init__",
                    "_create_response_processor",
                    "_get_response_files"
                ],
                "docstring": "Core response loop daemon implementation.",
                "base_classes": [
                    "BaseResponseLoopDaemon"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file creation events in bridge outbox.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\core_response_processor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CoreResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes responses for the core response loop.",
                "base_classes": [
                    "ResponseProcessor"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\midnight_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MidnightRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages overnight operations and swarm maintenance.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\error_tracking.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "get_health_metrics",
            "manual_reset",
            "__init__",
            "record_error",
            "record_success",
            "can_execute",
            "get_error_summary",
            "get_agent_health",
            "get_critical_errors",
            "_archive_unfixable_error",
            "clear_errors",
            "manual_reset"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TrackedError": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Base class for tracked errors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ArchiveError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to archiving operations.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PromptFormatError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to prompt formatting.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentInactivityError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to agent inactivity.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DevlogWriteError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to devlog writing.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecoveryStrategy": {
                "methods": [],
                "docstring": "Recovery strategies for different error types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute",
                    "get_health_metrics",
                    "manual_reset"
                ],
                "docstring": "Circuit breaker for error rate monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "record_error",
                    "record_success",
                    "can_execute",
                    "get_error_summary",
                    "get_agent_health",
                    "get_critical_errors",
                    "_archive_unfixable_error",
                    "clear_errors",
                    "manual_reset"
                ],
                "docstring": "Tracks errors and provides error analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 42
    },
    "dreamos\\core\\autonomy\\processor_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create"
        ],
        "classes": {
            "ProcessorMode": {
                "methods": [],
                "docstring": "Processor operation modes.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseProcessorFactory": {
                "methods": [
                    "__init__",
                    "create"
                ],
                "docstring": "Factory for creating response processors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "current_state",
            "transition_history",
            "add_state_handler",
            "remove_state_handler",
            "clear_handlers",
            "get_transitions_since",
            "get_last_transition",
            "reset"
        ],
        "classes": {
            "State": {
                "methods": [],
                "docstring": "Possible states for autonomous components.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateTransition": {
                "methods": [],
                "docstring": "Record of a state transition.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateTransitionError": {
                "methods": [],
                "docstring": "Error raised when a state transition is invalid.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateManager": {
                "methods": [
                    "__init__",
                    "current_state",
                    "transition_history",
                    "add_state_handler",
                    "remove_state_handler",
                    "clear_handlers",
                    "get_transitions_since",
                    "get_last_transition",
                    "reset"
                ],
                "docstring": "Manages state transitions for autonomous components.\n\nThis class provides functionality to:\n- Track current state\n- Validate state transitions\n- Record transition history\n- Handle state-specific actions",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\autonomy\\startup.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config"
        ],
        "classes": {
            "AutonomySystem": {
                "methods": [
                    "__init__",
                    "_load_config"
                ],
                "docstring": "Coordinates all autonomy components.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\autonomy\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\base\\autonomy_loop_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AutonomyLoopRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Runner for executing autonomy loops.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\base\\file_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "on_modified",
            "on_deleted"
        ],
        "classes": {
            "BaseFileHandler": {
                "methods": [
                    "__init__",
                    "on_created",
                    "on_modified",
                    "on_deleted"
                ],
                "docstring": "Base class for file system event handlers.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\base\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\base\\response_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_response",
            "_validate_response",
            "__init__",
            "clear",
            "is_empty",
            "queue_size"
        ],
        "classes": {
            "ResponseLoopConfig": {
                "methods": [],
                "docstring": "Configuration protocol for response loops.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseMetadata": {
                "methods": [],
                "docstring": "Metadata for response processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseResponseLoop": {
                "methods": [
                    "__init__",
                    "_validate_response"
                ],
                "docstring": "Base class for all response loop daemons.\n\nProvides common functionality for:\n- File polling and response processing\n- State management and transitions\n- Error handling and recovery\n- Resource cleanup",
                "base_classes": [
                    null,
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseLoop": {
                "methods": [
                    "__init__",
                    "clear",
                    "is_empty",
                    "queue_size"
                ],
                "docstring": "Response loop for agent communication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dreamos\\core\\autonomy\\base\\response_loop_daemon.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "release",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "ResourceManager": {
                "methods": [
                    "__init__",
                    "release"
                ],
                "docstring": "Manages concurrent resource usage.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseErrorHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles response processing errors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for response processors.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseResponseLoopDaemon": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for response loop daemons.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\base\\runner_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "parse_test_failures"
        ],
        "classes": {
            "RunnerConfig": {
                "methods": [],
                "docstring": "Protocol for runner configuration.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RunnerCore": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "parse_test_failures"
                ],
                "docstring": "Base class for all runners with common functionality.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\base\\runner_lifecycle.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "RunnerConfig": {
                "methods": [],
                "docstring": "Configuration protocol for runners.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RunnerLifecycleMixin": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Mixin for managing runner lifecycle.\n\nThis mixin provides core functionality for:\n- Starting/stopping runners\n- Managing state transitions\n- Handling errors and retries\n- Resource cleanup",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\base\\state_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_metrics",
            "_setup_recovery",
            "_validate_backup",
            "get_recovery_events",
            "_validate_transition",
            "get_state",
            "get_metadata",
            "get_history",
            "is_stuck",
            "get_stuck_agents",
            "_update_metrics",
            "get_stats",
            "get_all_stats"
        ],
        "classes": {
            "AgentStateType": {
                "methods": [],
                "docstring": "Enumeration of possible agent states.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateTransitionError": {
                "methods": [],
                "docstring": "Raised when a state transition is invalid.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateCorruptionError": {
                "methods": [],
                "docstring": "Raised when state data is corrupted.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseStateManager": {
                "methods": [
                    "__init__",
                    "_setup_metrics",
                    "_setup_recovery",
                    "_validate_backup",
                    "get_recovery_events",
                    "_validate_transition",
                    "get_state",
                    "get_metadata",
                    "get_history",
                    "is_stuck",
                    "get_stuck_agents",
                    "_update_metrics",
                    "get_stats",
                    "get_all_stats"
                ],
                "docstring": "Base class for unified state management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\autonomy\\base\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\error\\base.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "record_failure",
            "record_success",
            "can_execute",
            "get_health_metrics",
            "manual_reset"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TrackedError": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Base class for tracked errors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "record_failure",
                    "record_success",
                    "can_execute",
                    "get_health_metrics",
                    "manual_reset"
                ],
                "docstring": "Circuit breaker for error rate monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\autonomy\\error\\error_reporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_report",
            "save_report",
            "_count_by_severity",
            "_count_by_agent",
            "_count_by_type"
        ],
        "classes": {
            "ErrorReporter": {
                "methods": [
                    "__init__",
                    "generate_report",
                    "save_report",
                    "_count_by_severity",
                    "_count_by_agent",
                    "_count_by_type"
                ],
                "docstring": "Handles error reporting and notifications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\error\\error_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_error_severity",
            "_should_retry",
            "_calculate_retry_delay"
        ],
        "classes": {
            "RetryStrategy": {
                "methods": [],
                "docstring": "Retry strategies.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorHandler": {
                "methods": [
                    "__init__",
                    "_get_error_severity",
                    "_should_retry",
                    "_calculate_retry_delay"
                ],
                "docstring": "Handles error recovery and retry logic.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\error\\error_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_error",
            "record_success",
            "can_execute",
            "get_error_summary"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "record_error",
                    "record_success",
                    "can_execute",
                    "get_error_summary"
                ],
                "docstring": "Tracks and manages error states.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\error\\tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_error",
            "get_error_count",
            "get_recent_errors"
        ],
        "classes": {
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "track_error",
                    "get_error_count",
                    "get_recent_errors"
                ],
                "docstring": "Tracks and manages errors in the system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\error\\types.py": {
        "language": ".py",
        "functions": [
            "create_error",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "ArchiveError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to archiving operations.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PromptFormatError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to prompt formatting.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentInactivityError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to agent inactivity.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DevlogWriteError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to devlog writing.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BridgeConnectionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to bridge connection.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskExecutionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to task execution.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResourceExhaustionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to resource exhaustion.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StateTransitionError": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error related to state transitions.",
                "base_classes": [
                    "TrackedError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "dreamos\\core\\autonomy\\error\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\handlers\\base_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BaseHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for all handlers with common functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\handlers\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes agent responses and applies code changes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\memory\\response_memory_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "is_processed",
            "track_processing",
            "_save_memory",
            "get_stats"
        ],
        "classes": {
            "ResponseMemoryTracker": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "is_processed",
                    "track_processing",
                    "_save_memory",
                    "get_stats"
                ],
                "docstring": "Tracks processed messages to prevent duplicate processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\base_bridge_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "on_modified"
        ],
        "classes": {
            "BaseBridgeHandler": {
                "methods": [
                    "__init__",
                    "on_created",
                    "on_modified"
                ],
                "docstring": "Base class for all bridge handlers with common functionality.",
                "base_classes": [
                    "FileSystemEventHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\bridge_outbox_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BridgeOutboxHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Processes agent responses and applies code changes.",
                "base_classes": [
                    "BaseBridgeHandler"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\autonomy\\handlers\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\logging\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "info",
            "error",
            "warning",
            "debug"
        ],
        "classes": {
            "LogManager": {
                "methods": [
                    "__init__",
                    "log",
                    "info",
                    "error",
                    "warning",
                    "debug"
                ],
                "docstring": "Stub implementation of LogManager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\autonomy\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\utils\\response_utils.py": {
        "language": ".py",
        "functions": [
            "load_response_file",
            "archive_response_file",
            "extract_agent_id_from_file",
            "validate_response",
            "__init__",
            "__init__"
        ],
        "classes": {
            "ResourceManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages resource allocation and limits.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseErrorHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles response processing errors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\autonomy\\utils\\async_file_watcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_file_info",
            "clear_cache",
            "last_check",
            "watched_files"
        ],
        "classes": {
            "AsyncFileWatcher": {
                "methods": [
                    "__init__",
                    "get_file_info",
                    "clear_cache",
                    "last_check",
                    "watched_files"
                ],
                "docstring": "Asynchronously watches a directory for file changes.\n\nThis class provides functionality to monitor a directory for file changes\nusing polling. It maintains a cache of file modification times to detect\nchanges between polls.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\autonomy\\validation\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_validator",
            "validate",
            "validate_required_fields",
            "validate_field_type"
        ],
        "classes": {
            "ValidationResult": {
                "methods": [],
                "docstring": "Result of a validation check.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationEngine": {
                "methods": [
                    "__init__",
                    "add_validator",
                    "validate",
                    "validate_required_fields",
                    "validate_field_type"
                ],
                "docstring": "Engine for validating responses.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\autonomy\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\captain\\captain.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Priority levels for tasks.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task to be executed by an agent.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Captain": {
                "methods": [
                    "__init__",
                    "create_task"
                ],
                "docstring": "Oversees agent coordination and task management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\captain\\task_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "_calculate_priority_score",
            "_is_task_ready",
            "get_scheduled_tasks"
        ],
        "classes": {
            "ScheduledTask": {
                "methods": [],
                "docstring": "Represents a task scheduled for execution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskScheduler": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "_calculate_priority_score",
                    "_is_task_ready",
                    "get_scheduled_tasks"
                ],
                "docstring": "Manages task scheduling and prioritization.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\captain\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\codex\\codex_quality_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_validation_prompt",
            "_log_judgment"
        ],
        "classes": {
            "CodexController": {
                "methods": [
                    "__init__",
                    "_format_validation_prompt",
                    "_log_judgment"
                ],
                "docstring": "Quality control agent using headless Chrome and ChatGPT.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\codex\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\config\\bridge_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load",
            "save",
            "validate"
        ],
        "classes": {
            "BridgeConfig": {
                "methods": [
                    "__init__",
                    "load",
                    "save",
                    "validate"
                ],
                "docstring": "Configuration for Dream.OS bridges.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\config\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_config_dir",
            "_load_config",
            "_validate_config",
            "_save_config",
            "get",
            "set",
            "reset",
            "get_bridge_config",
            "set_bridge_config"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "_ensure_config_dir",
                    "_load_config",
                    "_validate_config",
                    "_save_config",
                    "get",
                    "set",
                    "reset",
                    "get_bridge_config",
                    "set_bridge_config"
                ],
                "docstring": "Unified configuration manager for Dream.OS.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\cursor\\cursor_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "type_text",
            "press_ctrl_s"
        ],
        "classes": {
            "CursorController": {
                "methods": [
                    "__init__",
                    "type_text",
                    "press_ctrl_s"
                ],
                "docstring": "Controls the Cursor IDE for applying code changes.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\discord_bot\\activity.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ActivityType": {
                "methods": [],
                "docstring": "Discord activity types.",
                "base_classes": [
                    "IntEnum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\discord_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\integrations\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Main service for ChatGPT integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\io\\atomic.py": {
        "language": ".py",
        "functions": [
            "safe_read",
            "safe_write"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\integrations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\io\\json_ops.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\io\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\logging\\agent_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "_create_inbox_message",
            "get_log",
            "clear_log"
        ],
        "classes": {
            "AgentLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "_create_inbox_message",
                    "get_log",
                    "clear_log"
                ],
                "docstring": "Handles agent development logging and Discord notifications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\logging\\log_config.py": {
        "language": ".py",
        "functions": [
            "get_log_path",
            "get_metrics_path",
            "get_retention_date",
            "setup_logging",
            "should_log",
            "from_string",
            "__post_init__",
            "to_dict",
            "from_dict",
            "save",
            "load",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "LogLevel": {
                "methods": [
                    "should_log",
                    "from_string"
                ],
                "docstring": "Standardized log levels for Dream.OS logging system.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogConfig": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict",
                    "save",
                    "load",
                    "__str__",
                    "__repr__"
                ],
                "docstring": "Configuration for logging system.\n\nThis is the unified configuration class that consolidates all logging settings\nacross Dream.OS. It supports both simple and advanced logging configurations.\n\nBasic usage:\n    config = LogConfig(level=LogLevel.INFO)\n    \nAdvanced usage:\n    config = LogConfig(\n        level=LogLevel.DEBUG,\n        log_dir=\"logs\",\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        max_file_size=10 * 1024 * 1024,\n        backup_count=5,\n        max_age_days=7,\n        platforms={\n            \"system\": \"system.log\",\n            \"agent\": \"agent.log\"\n        }\n    )",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\logging\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "configure",
            "_setup_logging",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "get_metrics",
            "shutdown"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogConfig": {
                "methods": [],
                "docstring": "Log configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogManager": {
                "methods": [
                    "__init__",
                    "configure",
                    "_setup_logging",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Manages logging for the Dream.OS system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\logging\\log_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_log_path",
            "_get_handle_key",
            "_get_file_handle",
            "write_log",
            "read_logs",
            "clear_log",
            "close"
        ],
        "classes": {
            "LogWriter": {
                "methods": [
                    "__init__",
                    "_get_log_path",
                    "_get_handle_key",
                    "_get_file_handle",
                    "write_log",
                    "read_logs",
                    "clear_log",
                    "close"
                ],
                "docstring": "Thread-safe log writer with proper file locking.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dreamos\\core\\messaging\\agent_bridge_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_response",
            "_record_success",
            "_record_error",
            "get_metrics"
        ],
        "classes": {
            "AgentBridgeHandler": {
                "methods": [
                    "__init__",
                    "_validate_response",
                    "_record_success",
                    "_record_error",
                    "get_metrics"
                ],
                "docstring": "Base handler for agent integration with ChatGPT bridge.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\messaging\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "validate_message"
        ],
        "classes": {
            "BaseMessagingComponent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for messaging components with common functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseMessageHandler": {
                "methods": [
                    "__init__",
                    "validate_message"
                ],
                "docstring": "Base class for message handlers.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\messaging\\bridge_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_enhance_prompt",
            "get_health_status",
            "get_agent_responses"
        ],
        "classes": {
            "BridgeIntegration": {
                "methods": [
                    "__init__",
                    "_enhance_prompt",
                    "get_health_status",
                    "get_agent_responses"
                ],
                "docstring": "Core integration for ChatGPT bridge functionality.\n\nThis class provides a high-level interface for agents to interact with ChatGPT\nthrough the bridge system. It handles message routing, response tracking,\nand health monitoring.\n\nAttributes:\n    bridge: Core ChatGPT bridge instance\n    queue: Request queue for managing messages\n    health: Health monitoring system\n    tracker: Response tracking system\n    config: Bridge configuration",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\captain_phone.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "reset_singleton",
            "send_message",
            "broadcast_message",
            "get_messages",
            "acknowledge_message",
            "_monitor_response",
            "_save_response",
            "_get_all_agents",
            "clear_messages"
        ],
        "classes": {
            "CaptainPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "send_message",
                    "broadcast_message",
                    "get_messages",
                    "acknowledge_message",
                    "_monitor_response",
                    "_save_response",
                    "_get_all_agents",
                    "clear_messages"
                ],
                "docstring": "Captain phone for managing agent communications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\core\\messaging\\cell_phone.py": {
        "language": ".py",
        "functions": [
            "validate_phone_number",
            "format_phone_number",
            "__init__",
            "_load_queue",
            "_save_queue",
            "add_message",
            "get_messages",
            "clear_queue",
            "__new__",
            "__init__",
            "reset_singleton",
            "send_message",
            "get_messages",
            "acknowledge_message",
            "clear_messages",
            "__new__",
            "__init__",
            "reset_singleton",
            "broadcast_message"
        ],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Message delivery modes.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "_load_queue",
                    "_save_queue",
                    "add_message",
                    "get_messages",
                    "clear_queue"
                ],
                "docstring": "Queue for storing and retrieving messages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CellPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "send_message",
                    "get_messages",
                    "acknowledge_message",
                    "clear_messages"
                ],
                "docstring": "Cell phone for agent communications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CaptainPhone": {
                "methods": [
                    "__new__",
                    "__init__",
                    "reset_singleton",
                    "broadcast_message"
                ],
                "docstring": "Manages messaging for the captain agent.",
                "base_classes": [
                    "CellPhone"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 36
    },
    "dreamos\\core\\messaging\\chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_health",
            "_update_health",
            "start",
            "stop",
            "_process_request",
            "_worker_loop",
            "_ensure_valid_session",
            "_handle_login",
            "_launch_browser",
            "_send_prompt",
            "_focus_cursor_window",
            "_paste_to_cursor",
            "_load_pending_requests",
            "_save_pending_requests",
            "_worker_loop"
        ],
        "classes": {
            "ChatGPTBridge": {
                "methods": [
                    "__init__",
                    "_load_health",
                    "_update_health",
                    "start",
                    "stop",
                    "_process_request",
                    "_worker_loop",
                    "_ensure_valid_session",
                    "_handle_login",
                    "_launch_browser",
                    "_send_prompt",
                    "_focus_cursor_window",
                    "_paste_to_cursor",
                    "_load_pending_requests",
                    "_save_pending_requests",
                    "_worker_loop"
                ],
                "docstring": "Manages communication between Dream.OS agents and ChatGPT.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "dreamos\\core\\messaging\\enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MessageMode": {
                "methods": [],
                "docstring": "Modes for message delivery.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessagePriority": {
                "methods": [],
                "docstring": "Priority levels for messages.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageType": {
                "methods": [],
                "docstring": "Types of messages in the system.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageStatus": {
                "methods": [],
                "docstring": "Message delivery and processing status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Task execution status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\common.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "sender_id",
            "to_dict",
            "from_dict",
            "validate"
        ],
        "classes": {
            "MessageContext": {
                "methods": [
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Context for message processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Message": {
                "methods": [
                    "sender_id",
                    "to_dict",
                    "from_dict",
                    "validate"
                ],
                "docstring": "Base message structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history"
        ],
        "classes": {
            "PersistentMessageHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history"
                ],
                "docstring": "Persistent message history implementation.",
                "base_classes": [
                    "MessageHistory"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\messaging\\message.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\message_loop.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageLoop": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Asynchronous message loop for processing messages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\messaging\\message_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_agent_status",
            "_save_agent_status",
            "_load_agent_status",
            "is_valid_message",
            "sanitize_filename",
            "handle_corrupted_inbox",
            "send_message",
            "get_messages",
            "mark_as_processed",
            "cleanup_old_messages",
            "get_agent_status",
            "update_agent_status"
        ],
        "classes": {
            "MessageValidationError": {
                "methods": [],
                "docstring": "Raised when message validation fails.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageHandler": {
                "methods": [
                    "__init__",
                    "_init_agent_status",
                    "_save_agent_status",
                    "_load_agent_status",
                    "is_valid_message",
                    "sanitize_filename",
                    "handle_corrupted_inbox",
                    "send_message",
                    "get_messages",
                    "mark_as_processed",
                    "cleanup_old_messages",
                    "get_agent_status",
                    "update_agent_status"
                ],
                "docstring": "Handles message routing and delivery between agents with security validation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\messaging\\message_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "unregister_handler",
            "get_queue_size",
            "is_running"
        ],
        "classes": {
            "MessageProcessor": {
                "methods": [
                    "__init__",
                    "register_handler",
                    "unregister_handler",
                    "get_queue_size",
                    "is_running"
                ],
                "docstring": "Handles message processing and routing between agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\core\\messaging\\message_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_queue",
            "_get_lock",
            "enqueue",
            "dequeue",
            "peek",
            "clear",
            "subscribe",
            "unsubscribe",
            "_notify_subscribers",
            "get_queue_size",
            "get_all_messages"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "_get_queue",
                    "_get_lock",
                    "enqueue",
                    "dequeue",
                    "peek",
                    "clear",
                    "subscribe",
                    "unsubscribe",
                    "_notify_subscribers",
                    "get_queue_size",
                    "get_all_messages"
                ],
                "docstring": "Thread-safe message queue with priority support.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\core\\messaging\\message_record.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_message",
            "get_history",
            "clear_history"
        ],
        "classes": {
            "MessageRecord": {
                "methods": [
                    "__init__",
                    "record_message",
                    "get_history",
                    "clear_history"
                ],
                "docstring": "Tracks message history and persistence.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\core\\messaging\\pipeline.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_message"
        ],
        "classes": {
            "MessagePipeline": {
                "methods": [
                    "__init__",
                    "_validate_message"
                ],
                "docstring": "Handles the processing of messages through the system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\messaging\\messaging.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "Message": {
                "methods": [],
                "docstring": "Represents a message with metadata.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_queues",
            "_save_queue"
        ],
        "classes": {
            "PersistentMessageQueue": {
                "methods": [
                    "__init__",
                    "_load_queues",
                    "_save_queue"
                ],
                "docstring": "Persistent message queue implementation.",
                "base_classes": [
                    "MessageQueue"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\messaging\\message_system.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "format_content",
            "to_dict",
            "from_dict",
            "enqueue",
            "get_messages",
            "acknowledge",
            "__init__",
            "_load_queue",
            "_save_queue",
            "enqueue",
            "get_messages",
            "acknowledge",
            "record",
            "get_history",
            "__init__",
            "_load_history",
            "_save_history",
            "record",
            "get_history",
            "route",
            "__init__",
            "route",
            "__init__",
            "send",
            "receive",
            "acknowledge",
            "get_history"
        ],
        "classes": {
            "MessageRecord": {
                "methods": [
                    "__post_init__",
                    "format_content",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Standardized message record format.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageQueue": {
                "methods": [
                    "enqueue",
                    "get_messages",
                    "acknowledge"
                ],
                "docstring": "Abstract base class for message queue implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_load_queue",
                    "_save_queue",
                    "enqueue",
                    "get_messages",
                    "acknowledge"
                ],
                "docstring": "Persistent message queue using JSON storage.",
                "base_classes": [
                    "MessageQueue"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageHistory": {
                "methods": [
                    "record",
                    "get_history"
                ],
                "docstring": "Abstract base class for message history implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "JsonMessageHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "record",
                    "get_history"
                ],
                "docstring": "Message history implementation using JSON storage.",
                "base_classes": [
                    "MessageHistory"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageRouter": {
                "methods": [
                    "route"
                ],
                "docstring": "Abstract base class for message routing implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentMessageRouter": {
                "methods": [
                    "__init__",
                    "route"
                ],
                "docstring": "Message router implementation for agent communication.",
                "base_classes": [
                    "MessageRouter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageSystem": {
                "methods": [
                    "__init__",
                    "send",
                    "receive",
                    "acknowledge",
                    "get_history"
                ],
                "docstring": "Unified message handling system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 56
    },
    "dreamos\\core\\messaging\\request_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_requests",
            "_save_requests",
            "add_request",
            "update_request",
            "get_pending_requests",
            "clear_completed"
        ],
        "classes": {
            "Request": {
                "methods": [],
                "docstring": "Request in the queue.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RequestQueue": {
                "methods": [
                    "__init__",
                    "_load_requests",
                    "_save_requests",
                    "add_request",
                    "update_request",
                    "get_pending_requests",
                    "clear_completed"
                ],
                "docstring": "Manages request queue for bridges.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\phones.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "send_message",
            "_monitor_response",
            "_save_response",
            "broadcast_message",
            "_get_all_agents"
        ],
        "classes": {
            "Phone": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base phone interface for agent communication.",
                "base_classes": [
                    "BaseMessagingComponent"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CaptainPhone": {
                "methods": [
                    "__init__",
                    "send_message",
                    "_monitor_response",
                    "_save_response",
                    "broadcast_message",
                    "_get_all_agents"
                ],
                "docstring": "Special phone interface for the captain to communicate with agents.",
                "base_classes": [
                    "Phone"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\response_collector.py": {
        "language": ".py",
        "functions": [
            "collect_response",
            "load_regions",
            "save_regions",
            "__init__",
            "load_template",
            "detect_copy_button",
            "click_copy_button",
            "__init__",
            "capture",
            "is_stable",
            "try_copy_response",
            "__init__",
            "_load_agent_regions",
            "_find_cursor_windows",
            "_get_cursor_text",
            "start_collecting",
            "_save_response",
            "get_saved_responses",
            "get_latest_response",
            "clear_responses"
        ],
        "classes": {
            "CopyButtonDetector": {
                "methods": [
                    "__init__",
                    "load_template",
                    "detect_copy_button",
                    "click_copy_button"
                ],
                "docstring": "Detects and interacts with the copy button in Cursor.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentRegion": {
                "methods": [
                    "__init__",
                    "capture",
                    "is_stable",
                    "try_copy_response"
                ],
                "docstring": "Defines a region for monitoring agent responses.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResponseCollector": {
                "methods": [
                    "__init__",
                    "_load_agent_regions",
                    "_find_cursor_windows",
                    "_get_cursor_text",
                    "start_collecting",
                    "_save_response",
                    "get_saved_responses",
                    "get_latest_response",
                    "clear_responses"
                ],
                "docstring": "Collects and saves Cursor agent responses for SWARM.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 37
    },
    "dreamos\\core\\messaging\\router.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_targets",
            "add_route",
            "add_pattern_route",
            "add_mode_handler",
            "add_default_handler",
            "remove_route",
            "remove_pattern_route",
            "remove_mode_handler",
            "remove_default_handler",
            "get_routes",
            "get_pattern_routes",
            "get_mode_handlers",
            "get_default_handlers"
        ],
        "classes": {
            "MessageRouter": {
                "methods": [
                    "__init__",
                    "_get_targets",
                    "add_route",
                    "add_pattern_route",
                    "add_mode_handler",
                    "add_default_handler",
                    "remove_route",
                    "remove_pattern_route",
                    "remove_mode_handler",
                    "remove_default_handler",
                    "get_routes",
                    "get_pattern_routes",
                    "get_mode_handlers",
                    "get_default_handlers"
                ],
                "docstring": "Message router implementation.",
                "base_classes": [
                    "MessageRouter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dreamos\\core\\messaging\\types.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\ui.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "process_message",
            "initialize",
            "shutdown",
            "send_message",
            "get_status",
            "_handle_resume",
            "_handle_sync",
            "_handle_verify",
            "_handle_repair",
            "_handle_backup",
            "_handle_restore",
            "_handle_cleanup",
            "_handle_captain",
            "_handle_task",
            "_handle_integrate"
        ],
        "classes": {
            "MessageUI": {
                "methods": [
                    "__post_init__",
                    "process_message",
                    "initialize",
                    "shutdown",
                    "send_message",
                    "get_status",
                    "_handle_resume",
                    "_handle_sync",
                    "_handle_verify",
                    "_handle_repair",
                    "_handle_backup",
                    "_handle_restore",
                    "_handle_cleanup",
                    "_handle_captain",
                    "_handle_task",
                    "_handle_integrate"
                ],
                "docstring": "UI handler for message processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "dreamos\\core\\messaging\\unified_message_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__new__",
            "__init__",
            "_setup_components",
            "_load_history",
            "_save_history"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [],
                "docstring": "Abstract base class for message queue implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageHistory": {
                "methods": [],
                "docstring": "Abstract base class for message history implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageRouter": {
                "methods": [],
                "docstring": "Abstract base class for message routing implementations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SimpleRouter": {
                "methods": [],
                "docstring": "Simple message router implementation.",
                "base_classes": [
                    "MessageRouter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SimpleQueue": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Simple message queue implementation.",
                "base_classes": [
                    "MessageQueue"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SimpleHistory": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Simple message history implementation.",
                "base_classes": [
                    "MessageHistory"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageSystem": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_setup_components",
                    "_load_history",
                    "_save_history"
                ],
                "docstring": "Unified message handling system for Dream.OS.",
                "base_classes": [
                    "BaseMessagingComponent"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\messaging\\utils\\core_utils.py": {
        "language": ".py",
        "functions": [
            "format_message",
            "parse_message",
            "validate_message",
            "get_message_type",
            "get_message_content",
            "get_message_timestamp",
            "format_timestamp",
            "write_json",
            "read_yaml",
            "ensure_directory_exists",
            "atomic_write",
            "safe_read"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\messaging\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\bridge_health.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_health",
            "update_metrics"
        ],
        "classes": {
            "BridgeHealthMonitor": {
                "methods": [
                    "__init__",
                    "check_health",
                    "update_metrics"
                ],
                "docstring": "Monitors the health of the bridge system.",
                "base_classes": [
                    "BaseHealthMonitor"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\monitoring\\metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment_logs",
            "record_error",
            "record_rotation",
            "reset",
            "_save",
            "get_metrics"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "increment_logs",
                    "record_error",
                    "record_rotation",
                    "reset",
                    "_save",
                    "get_metrics"
                ],
                "docstring": "Collects basic metrics about logging activity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\core\\monitoring\\metrics_server.py": {
        "language": ".py",
        "functions": [
            "_load_metrics",
            "metrics",
            "start"
        ],
        "classes": {},
        "routes": [
            {
                "function": "metrics",
                "method": "ROUTE",
                "path": "/metrics"
            }
        ],
        "complexity": 3
    },
    "dreamos\\core\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\monitoring\\health\\base.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict",
            "__init__",
            "_load_health",
            "_save_health",
            "update_health",
            "is_healthy",
            "get_health_status"
        ],
        "classes": {
            "HealthStatus": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Health status data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseHealthMonitor": {
                "methods": [
                    "__init__",
                    "_load_health",
                    "_save_health",
                    "update_health",
                    "is_healthy",
                    "get_health_status"
                ],
                "docstring": "Base class for health monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\monitoring\\health\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\nlp\\keyword_extract.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "extract"
        ],
        "classes": {
            "KeywordExtractor": {
                "methods": [
                    "__init__",
                    "extract"
                ],
                "docstring": "Extracts keywords from text using frequency analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\nlp\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\resumer_v2\\agent_state_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_state"
        ],
        "classes": {
            "TaskState": {
                "methods": [],
                "docstring": "Represents a task in the system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentStateManager": {
                "methods": [
                    "__init__",
                    "_init_state"
                ],
                "docstring": "Manages agent state with event hooks and validation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\resumer_v2\\atomic_file_manager.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AtomicFileManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages atomic file operations with backup support.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\resumer_v2\\quantum_agent_resumer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_event_handlers"
        ],
        "classes": {
            "QuantumAgentResumer": {
                "methods": [
                    "__init__",
                    "_init_event_handlers"
                ],
                "docstring": "Quantum-aware agent resumption system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\resumer_v2\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\security\\auth_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_user",
            "authenticate",
            "validate_token",
            "get_user_info",
            "update_user_metadata",
            "assign_role",
            "remove_role",
            "_is_locked_out",
            "_record_failed_attempt",
            "save_users",
            "load_users"
        ],
        "classes": {
            "AuthError": {
                "methods": [],
                "docstring": "Base class for authentication errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AuthManager": {
                "methods": [
                    "__init__",
                    "register_user",
                    "authenticate",
                    "validate_token",
                    "get_user_info",
                    "update_user_metadata",
                    "assign_role",
                    "remove_role",
                    "_is_locked_out",
                    "_record_failed_attempt",
                    "save_users",
                    "load_users"
                ],
                "docstring": "Manages authentication and authorization.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "dreamos\\core\\security\\identity_utils.py": {
        "language": ".py",
        "functions": [
            "generate_agent_id",
            "validate_password",
            "hash_password",
            "verify_password",
            "generate_token",
            "format_agent_name"
        ],
        "classes": {
            "IdentityUtils": {
                "methods": [
                    "generate_agent_id",
                    "validate_password",
                    "hash_password",
                    "verify_password",
                    "generate_token",
                    "format_agent_name"
                ],
                "docstring": "Utility functions for identity management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dreamos\\core\\security\\session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_start_cleanup_thread",
            "create_session",
            "validate_session",
            "get_session",
            "update_session_metadata",
            "invalidate_session",
            "cleanup_expired_sessions",
            "save_sessions",
            "load_sessions",
            "cleanup_loop"
        ],
        "classes": {
            "SessionError": {
                "methods": [],
                "docstring": "Base class for session management errors.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionManager": {
                "methods": [
                    "__init__",
                    "_start_cleanup_thread",
                    "create_session",
                    "validate_session",
                    "get_session",
                    "update_session_metadata",
                    "invalidate_session",
                    "cleanup_expired_sessions",
                    "save_sessions",
                    "load_sessions"
                ],
                "docstring": "Manages user and agent sessions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dreamos\\core\\security\\security_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_default_config_path",
            "_load_config",
            "_validate_and_merge_config",
            "_save_config",
            "get_auth_config",
            "get_session_config",
            "get_identity_config",
            "update_config"
        ],
        "classes": {
            "SecurityConfig": {
                "methods": [
                    "__init__",
                    "_get_default_config_path",
                    "_load_config",
                    "_validate_and_merge_config",
                    "_save_config",
                    "get_auth_config",
                    "get_session_config",
                    "get_identity_config",
                    "update_config"
                ],
                "docstring": "Manages security-related configuration settings.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\core\\security\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\self_discovery\\journal.py": {
        "language": ".py",
        "functions": [
            "init_db",
            "calculate_relapse_risk",
            "add_entry",
            "log_coding_session",
            "get_today_stats",
            "__init__",
            "add_entry",
            "log_coding_session",
            "get_today_stats",
            "calculate_relapse_risk"
        ],
        "classes": {
            "Journal": {
                "methods": [
                    "__init__",
                    "add_entry",
                    "log_coding_session",
                    "get_today_stats",
                    "calculate_relapse_risk"
                ],
                "docstring": "Journal class for managing self-discovery entries.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dreamos\\core\\self_discovery\\prompts.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\self_discovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\coordinate_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_coordinates",
            "save_coordinates",
            "_process_raw",
            "get_coordinates",
            "set_coordinates",
            "get_agent_coordinates",
            "get_input_box_coordinates",
            "get_copy_button_coordinates",
            "list_agents"
        ],
        "classes": {
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "load_coordinates",
                    "save_coordinates",
                    "_process_raw",
                    "get_coordinates",
                    "set_coordinates",
                    "get_agent_coordinates",
                    "get_input_box_coordinates",
                    "get_copy_button_coordinates",
                    "list_agents"
                ],
                "docstring": "Manage UI coordinate configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamos\\core\\shared\\coordinate_utils.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "validate_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\shared\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\shared\\persistent_queue.py": {
        "language": ".py",
        "functions": [
            "load_queue",
            "save_queue",
            "load_queue_file",
            "__init__",
            "_acquire_lock",
            "_release_lock",
            "_read_queue",
            "_write_queue",
            "_check_rate_limit",
            "get_queue_size",
            "get_message",
            "clear_queue",
            "enqueue",
            "put",
            "get",
            "get_status",
            "add_message",
            "clear_agent",
            "shutdown",
            "get_message_history",
            "clear_history",
            "set_test_mode"
        ],
        "classes": {
            "PersistentQueue": {
                "methods": [
                    "__init__",
                    "_acquire_lock",
                    "_release_lock",
                    "_read_queue",
                    "_write_queue",
                    "_check_rate_limit",
                    "get_queue_size",
                    "get_message",
                    "clear_queue",
                    "enqueue",
                    "put",
                    "get",
                    "get_status",
                    "add_message",
                    "clear_agent",
                    "shutdown",
                    "get_message_history",
                    "clear_history",
                    "set_test_mode"
                ],
                "docstring": "A file-based persistent queue with file locking.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 41
    },
    "dreamos\\core\\ui\\agent_status_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "update_status"
        ],
        "classes": {
            "AgentStatusPanel": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_status"
                ],
                "docstring": "Panel for displaying agent status information.",
                "base_classes": [
                    "QFrame"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\ui\\theme_manager.py": {
        "language": ".py",
        "functions": [
            "get_dialog_stylesheet",
            "apply_dialog_theme",
            "is_dark_theme"
        ],
        "classes": {
            "ThemeManager": {
                "methods": [
                    "get_dialog_stylesheet",
                    "apply_dialog_theme",
                    "is_dark_theme"
                ],
                "docstring": "Manages application-wide UI theming.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\ui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\ui\\log_console.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "log"
        ],
        "classes": {
            "LogConsole": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "log"
                ],
                "docstring": "Console widget for displaying log messages.",
                "base_classes": [
                    "QFrame"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\utils\\agent_helpers.py": {
        "language": ".py",
        "functions": [
            "load_agent_ownership",
            "determine_responsible_agent",
            "validate_agent_id",
            "build_agent_message",
            "parse_test_failures",
            "get_test_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "dreamos\\core\\utils\\core_utils.py": {
        "language": ".py",
        "functions": [
            "async_retry",
            "track_operation",
            "ensure_dir",
            "atomic_write",
            "safe_read",
            "safe_write",
            "load_json",
            "save_json",
            "read_json",
            "backup_file",
            "transform_coordinates",
            "ensure_dir",
            "write_json",
            "read_yaml",
            "write_yaml",
            "load_yaml",
            "__init__",
            "add_error",
            "get_errors",
            "clear_errors",
            "decorator",
            "decorator"
        ],
        "classes": {
            "ErrorTracker": {
                "methods": [
                    "__init__",
                    "add_error",
                    "get_errors",
                    "clear_errors"
                ],
                "docstring": "Track and manage operation errors.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dreamos\\core\\utils\\exceptions.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "FileOpsError": {
                "methods": [],
                "docstring": "Base exception for file operations.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileOpsPermissionError": {
                "methods": [],
                "docstring": "Raised when a file operation fails due to permission issues.",
                "base_classes": [
                    "FileOpsError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileOpsIOError": {
                "methods": [],
                "docstring": "Raised when a file operation fails due to I/O errors.",
                "base_classes": [
                    "FileOpsError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\utils\\file_ops.py": {
        "language": ".py",
        "functions": [
            "safe_mkdir",
            "ensure_dir",
            "clear_dir",
            "archive_file",
            "extract_agent_id",
            "backup_file",
            "safe_rmdir"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "dreamos\\core\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamos\\core\\utils\\json_utils.py": {
        "language": ".py",
        "functions": [
            "load_json",
            "save_json",
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "configure_logging",
            "get_logger",
            "log_platform_event",
            "__init__",
            "log_event",
            "get_events",
            "clear_events",
            "__init__",
            "update_status",
            "get_status",
            "reset_status"
        ],
        "classes": {
            "PlatformEventLogger": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_events",
                    "clear_events"
                ],
                "docstring": "Log platform events with structured data.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StatusTracker": {
                "methods": [
                    "__init__",
                    "update_status",
                    "get_status",
                    "reset_status"
                ],
                "docstring": "Track platform operation status.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\core\\utils\\region_finder.py": {
        "language": ".py",
        "functions": [
            "find_cursor_regions",
            "__init__",
            "_load_regions",
            "_save_regions",
            "start_finding",
            "_set_start",
            "_set_end",
            "_quit",
            "get_region"
        ],
        "classes": {
            "RegionFinder": {
                "methods": [
                    "__init__",
                    "_load_regions",
                    "_save_regions",
                    "start_finding",
                    "_set_start",
                    "_set_end",
                    "_quit",
                    "get_region"
                ],
                "docstring": "Helps find screen coordinates for UI regions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "dreamos\\core\\utils\\retry.py": {
        "language": ".py",
        "functions": [
            "with_retry",
            "decorator",
            "wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\core\\utils\\safe_io.py": {
        "language": ".py",
        "functions": [
            "atomic_write",
            "safe_read",
            "safe_write"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dreamos\\core\\utils\\serialization.py": {
        "language": ".py",
        "functions": [
            "load_json",
            "save_json",
            "read_json",
            "write_json",
            "restore_backup",
            "read_yaml",
            "load_yaml",
            "write_yaml",
            "save_yaml"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "dreamos\\core\\utils\\system_ops.py": {
        "language": ".py",
        "functions": [
            "with_retry",
            "transform_coordinates",
            "normalize_coordinates",
            "decorator"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\core\\utils\\yaml_utils.py": {
        "language": ".py",
        "functions": [
            "read_yaml",
            "load_yaml",
            "write_yaml",
            "save_yaml"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dreamos\\social\\utils\\base.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BaseUtils": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base utilities for social media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\base_log_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Standard log levels for consistent logging across the application.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\cleanup.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_is_file_locked",
            "_force_close_handle",
            "_wait_for_file_unlock",
            "safe_remove",
            "cleanup_directory",
            "cleanup_temp_files"
        ],
        "classes": {
            "FileCleanup": {
                "methods": [
                    "__init__",
                    "_is_file_locked",
                    "_force_close_handle",
                    "_wait_for_file_unlock",
                    "safe_remove",
                    "cleanup_directory",
                    "cleanup_temp_files"
                ],
                "docstring": "Handles safe file cleanup with proper lock handling.",
                "base_classes": [
                    "BaseUtils"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dreamos\\social\\utils\\json_settings.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__getattr__",
            "__iter__",
            "items",
            "values",
            "__getitem__",
            "as_dict",
            "__init__",
            "reload",
            "convert"
        ],
        "classes": {
            "ConfigNode": {
                "methods": [
                    "__post_init__",
                    "__getattr__",
                    "__iter__",
                    "items",
                    "values",
                    "__getitem__",
                    "as_dict"
                ],
                "docstring": "Data holder that provides attribute access like a dotmap.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "JSONConfig": {
                "methods": [
                    "__init__",
                    "reload"
                ],
                "docstring": "Load configuration from a JSON file.",
                "base_classes": [
                    "ConfigNode"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "dreamos\\social\\utils\\log_batcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_batch_size",
            "is_running"
        ],
        "classes": {
            "LogBatcher": {
                "methods": [
                    "__init__",
                    "get_batch_size",
                    "is_running"
                ],
                "docstring": "Handles batched logging operations for efficiency.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\social\\utils\\log_config.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels for the application.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for logging system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "dreamos\\social\\utils\\log_entry.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "LogEntry": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a single log entry with validation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\social\\utils\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__new__",
            "__init__",
            "set_level",
            "_setup_logging",
            "write_log",
            "get_metrics",
            "read_logs",
            "cleanup",
            "rotate",
            "debug",
            "info",
            "warning",
            "error",
            "critical"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels for social media operations.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogEntry": {
                "methods": [],
                "docstring": "Represents a log entry.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for logging.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "set_level",
                    "_setup_logging",
                    "write_log",
                    "get_metrics",
                    "read_logs",
                    "cleanup",
                    "rotate",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical"
                ],
                "docstring": "Manages logging for social media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 30
    },
    "dreamos\\social\\utils\\log_level.py": {
        "language": ".py",
        "functions": [
            "from_str",
            "__str__",
            "value"
        ],
        "classes": {
            "LogLevel": {
                "methods": [
                    "from_str",
                    "__str__",
                    "value"
                ],
                "docstring": "Logging levels for the system.\n\nAttributes:\n    DEBUG: Detailed information for debugging\n    INFO: General information about program execution\n    WARNING: Indicates a potential problem\n    ERROR: A more serious problem\n    CRITICAL: A critical problem that may prevent the program from running",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dreamos\\social\\utils\\log_pipeline.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_file_lock",
            "_is_file_locked",
            "_force_close_handle",
            "_wait_for_file_unlock",
            "add_entry",
            "flush",
            "read_logs",
            "get_log_info",
            "stop",
            "__del__"
        ],
        "classes": {
            "LogPipeline": {
                "methods": [
                    "__init__",
                    "_get_file_lock",
                    "_is_file_locked",
                    "_force_close_handle",
                    "_wait_for_file_unlock",
                    "add_entry",
                    "flush",
                    "read_logs",
                    "get_log_info",
                    "stop",
                    "__del__"
                ],
                "docstring": "Unified log handling system combining batching and reading functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dreamos\\social\\utils\\log_rotator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_file_size",
            "_get_file_age",
            "_rotate_file",
            "_cleanup_old_backups",
            "check_rotation",
            "rotate_all",
            "get_rotation_info",
            "rotate"
        ],
        "classes": {
            "LogRotator": {
                "methods": [
                    "__init__",
                    "_get_file_size",
                    "_get_file_age",
                    "_rotate_file",
                    "_cleanup_old_backups",
                    "check_rotation",
                    "rotate_all",
                    "get_rotation_info",
                    "rotate"
                ],
                "docstring": "Handles log file rotation and cleanup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\social\\utils\\log_types.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RotationConfig": {
                "methods": [],
                "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "dreamos\\social\\utils\\log_writer.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "__init__",
            "_ensure_log_dir",
            "_cleanup_all_locks",
            "_get_file_lock",
            "write_log",
            "write_log_json",
            "read_logs",
            "cleanup_old_logs",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels for entries.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogWriter": {
                "methods": [
                    "__init__",
                    "_ensure_log_dir",
                    "_cleanup_all_locks",
                    "_get_file_lock",
                    "write_log",
                    "write_log_json",
                    "read_logs",
                    "cleanup_old_logs",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics"
                ],
                "docstring": "Handles writing log entries to files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 29
    },
    "dreamos\\social\\utils\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_files",
            "validate",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_files",
                    "validate",
                    "validate_media"
                ],
                "docstring": "Validates media files for upload.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos\\social\\utils\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_rate_limit",
            "set_rate_limit",
            "reset_limits",
            "get_remaining"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_rate_limit",
                    "set_rate_limit",
                    "reset_limits",
                    "get_remaining"
                ],
                "docstring": "Handles rate limiting for API operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dreamos\\social\\utils\\social_common.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_for_element",
            "wait_for_clickable",
            "retry_click",
            "handle_login",
            "post_content",
            "verify_post_success",
            "validate_media",
            "upload_media"
        ],
        "classes": {
            "SocialMediaUtils": {
                "methods": [
                    "__init__",
                    "wait_for_element",
                    "wait_for_clickable",
                    "retry_click",
                    "handle_login",
                    "post_content",
                    "verify_post_success",
                    "validate_media",
                    "upload_media"
                ],
                "docstring": "Common utilities for social media operations.",
                "base_classes": [
                    "BaseUtils"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dreamos\\social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\utils\\discord_client.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "gui\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_menu",
            "_show_about",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "_setup_menu",
                    "_show_about",
                    "closeEvent"
                ],
                "docstring": "Main application window.",
                "base_classes": [
                    "QMainWindow"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "gui\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "gui\\components\\log_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "refresh_logs",
            "clear_logs",
            "_show_details",
            "closeEvent"
        ],
        "classes": {
            "LogMonitor": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "refresh_logs",
                    "clear_logs",
                    "_show_details",
                    "closeEvent"
                ],
                "docstring": "GUI component for monitoring and displaying logs.",
                "base_classes": [
                    "QWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "gui\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "options_bot\\broker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_history",
            "get_option_chain",
            "send_order",
            "get_equity"
        ],
        "classes": {
            "Broker": {
                "methods": [
                    "__init__",
                    "get_history",
                    "get_option_chain",
                    "send_order",
                    "get_equity"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "options_bot\\data_loader.py": {
        "language": ".py",
        "functions": [
            "fetch_history",
            "fetch_option_chain"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "options_bot\\monte_carlo.py": {
        "language": ".py",
        "functions": [
            "simulate_prices",
            "pop_above",
            "batch_pop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "options_bot\\run_bot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "options_bot\\strategy_core.py": {
        "language": ".py",
        "functions": [
            "tech_signal"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "options_bot\\trade_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_cycle",
            "_try_execute",
            "_size_position",
            "_log_trade"
        ],
        "classes": {
            "TradeManager": {
                "methods": [
                    "__init__",
                    "run_cycle",
                    "_try_execute",
                    "_size_position",
                    "_log_trade"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "runtime\\bridge_inbox\\cursor_chatgpt_bridge.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "safe_read_json",
            "safe_write_json",
            "setup_temp_profile",
            "launch_chatgpt_browser",
            "send_prompt_and_get_response",
            "focus_cursor_window",
            "paste_into_cursor",
            "ensure_bridge_inbox",
            "main_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "options_bot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\bridge_inbox\\chatgpt_client.py": {
        "language": ".py",
        "functions": [
            "request_chatgpt",
            "get_pending_count",
            "clear_pending_requests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "runtime\\bridge_inbox\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\migrate_auth_to_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_environment",
            "create_backup",
            "find_import_references",
            "update_imports",
            "migrate_files",
            "validate_migration",
            "cleanup",
            "generate_report",
            "run"
        ],
        "classes": {
            "AuthMigration": {
                "methods": [
                    "__init__",
                    "validate_environment",
                    "create_backup",
                    "find_import_references",
                    "update_imports",
                    "migrate_files",
                    "validate_migration",
                    "cleanup",
                    "generate_report",
                    "run"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "scripts\\migrate_bridge_config.py": {
        "language": ".py",
        "functions": [
            "load_old_config",
            "migrate_config",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\community\\audience_analytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_default_config",
            "track_growth",
            "analyze_demographics",
            "generate_insights",
            "export_report",
            "get_audience_metrics",
            "_get_audience_metrics"
        ],
        "classes": {
            "AudienceAnalytics": {
                "methods": [
                    "__init__",
                    "_create_default_config",
                    "track_growth",
                    "analyze_demographics",
                    "generate_insights",
                    "export_report",
                    "get_audience_metrics",
                    "_get_audience_metrics"
                ],
                "docstring": "Analyzes audience engagement and demographics across platforms.",
                "base_classes": [
                    "CommunityBase"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\community\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_logging",
            "_create_default_config",
            "_save_config",
            "_load_config",
            "_update_metrics"
        ],
        "classes": {
            "CommunityBase": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "_create_default_config",
                    "_save_config",
                    "_load_config",
                    "_update_metrics"
                ],
                "docstring": "Base class for community management modules.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\community\\content_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_default_config",
            "_validate_platform",
            "_validate_content",
            "_validate_scheduled_time",
            "_check_rate_limit",
            "schedule_post",
            "get_schedule",
            "optimize_timing",
            "analyze_performance",
            "_get_optimal_time"
        ],
        "classes": {
            "ContentScheduler": {
                "methods": [
                    "__init__",
                    "_create_default_config",
                    "_validate_platform",
                    "_validate_content",
                    "_validate_scheduled_time",
                    "_check_rate_limit",
                    "schedule_post",
                    "get_schedule",
                    "optimize_timing",
                    "analyze_performance",
                    "_get_optimal_time"
                ],
                "docstring": "Manages content scheduling and optimization across platforms.",
                "base_classes": [
                    "CommunityBase"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\community\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\config\\social_config.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "Platform": {
                "methods": [],
                "docstring": "Supported social media platforms.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PlatformConfig": {
                "methods": [],
                "docstring": "Configuration for a specific social media platform.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SocialConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for social media integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\constants\\platform_constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\constants\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\driver_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "get_multi_driver_sessions",
            "close_driver",
            "shutdown_all_drivers"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_multi_driver_sessions",
                    "close_driver",
                    "shutdown_all_drivers"
                ],
                "docstring": "Manages browser driver instances for social media platforms.\nThis is a stub implementation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\core\\dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_update_memory",
            "dispatch_all",
            "_process_platform",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "_update_memory",
                    "dispatch_all",
                    "_process_platform",
                    "_shutdown_all_drivers"
                ],
                "docstring": "Main dispatcher for handling social media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "social\\core\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "increment_logs",
            "record_error",
            "record_rotation",
            "get_metrics",
            "reset",
            "get_uptime"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "__init__",
                    "increment_logs",
                    "record_error",
                    "record_rotation",
                    "get_metrics",
                    "reset",
                    "get_uptime"
                ],
                "docstring": "Tracks metrics for logging operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\core\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "now",
            "__init__",
            "check_limit",
            "record_usage",
            "get_usage"
        ],
        "classes": {
            "TimeProvider": {
                "methods": [
                    "now"
                ],
                "docstring": "Time provider for rate limiter.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_limit",
                    "record_usage",
                    "get_usage"
                ],
                "docstring": "Rate limiter implementation for social media platforms.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\core\\redis_manager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "configure",
            "get_connection",
            "get_connection_context",
            "set",
            "get",
            "delete",
            "exists",
            "close"
        ],
        "classes": {
            "RedisManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "configure",
                    "get_connection",
                    "get_connection_context",
                    "set",
                    "get",
                    "delete",
                    "exists",
                    "close"
                ],
                "docstring": "Manager for Redis connections and operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "social\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\driver\\proxy_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_proxy",
            "remove_proxy",
            "get_proxy",
            "rotate_proxy"
        ],
        "classes": {
            "ProxyManager": {
                "methods": [
                    "__init__",
                    "add_proxy",
                    "remove_proxy",
                    "get_proxy",
                    "rotate_proxy"
                ],
                "docstring": "Manages proxy rotation and selection for social media platforms.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\driver\\undetected_driver.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver",
            "get_driver",
            "quit"
        ],
        "classes": {
            "UndetectedDriver": {
                "methods": [
                    "__init__",
                    "create_driver",
                    "get_driver",
                    "quit"
                ],
                "docstring": "Wrapper for undetected-chromedriver with anti-bot evasion capabilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\driver\\utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\driver\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_logged_in",
            "login",
            "post"
        ],
        "classes": {
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Enhanced Facebook platform strategy with media support and robust error handling.",
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "LinkedInStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\platform_strategy_base.py": {
        "language": ".py",
        "functions": [
            "retry_with_recovery",
            "decorator",
            "__init__",
            "_calculate_retry_delay",
            "_log_error_with_trace",
            "_track_operation_time",
            "_update_memory",
            "_log_action",
            "_handle_media_upload",
            "_validate_media",
            "get_memory_updates",
            "get_operation_stats",
            "is_logged_in",
            "login",
            "post",
            "create_post",
            "_create_post_impl",
            "_find_element",
            "_click_element",
            "_send_keys",
            "initialize",
            "wrapper"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "_calculate_retry_delay",
                    "_log_error_with_trace",
                    "_track_operation_time",
                    "_update_memory",
                    "_log_action",
                    "_handle_media_upload",
                    "_validate_media",
                    "get_memory_updates",
                    "get_operation_stats",
                    "is_logged_in",
                    "login",
                    "post",
                    "create_post",
                    "_create_post_impl",
                    "_find_element",
                    "_click_element",
                    "_send_keys",
                    "initialize"
                ],
                "docstring": "Base class for all social media platform strategies.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 41
    },
    "social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "post"
        ],
        "classes": {
            "StockTwitsStrategy": {
                "methods": [
                    "__init__",
                    "create_post",
                    "post"
                ],
                "docstring": null,
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit_media.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media",
            "upload_media",
            "_create_media_dir"
        ],
        "classes": {
            "RedditMediaHandler": {
                "methods": [
                    "__init__",
                    "validate_media",
                    "upload_media",
                    "_create_media_dir"
                ],
                "docstring": "Handler for Reddit media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_config",
            "_setup_rate_limiter",
            "_check_rate_limit",
            "_handle_error",
            "calculate_retry_delay",
            "_validate_media",
            "_upload_media",
            "_create_media_dir",
            "_verify_post_success",
            "_handle_rate_limit",
            "_handle_retry",
            "retry_operation",
            "login",
            "post_devlog",
            "post",
            "create_post",
            "comment",
            "is_logged_in",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "_validate_config",
                    "_setup_rate_limiter",
                    "_check_rate_limit",
                    "_handle_error",
                    "calculate_retry_delay",
                    "_validate_media",
                    "_upload_media",
                    "_create_media_dir",
                    "_verify_post_success",
                    "_handle_rate_limit",
                    "_handle_retry",
                    "retry_operation",
                    "login",
                    "post_devlog",
                    "post",
                    "create_post",
                    "comment",
                    "is_logged_in",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics"
                ],
                "docstring": "Strategy for interacting with Reddit.",
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 50
    },
    "social\\strategies\\strategy_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_memory",
            "login",
            "logout",
            "post",
            "_validate_media",
            "_upload_media",
            "_update_memory",
            "calculate_retry_delay",
            "take_screenshot",
            "wait_for_element",
            "wait_for_clickable",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics"
        ],
        "classes": {
            "SocialMediaStrategy": {
                "methods": [
                    "__init__",
                    "_init_memory",
                    "login",
                    "logout",
                    "post",
                    "_validate_media",
                    "_upload_media",
                    "_update_memory",
                    "calculate_retry_delay",
                    "take_screenshot",
                    "wait_for_element",
                    "wait_for_clickable",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics"
                ],
                "docstring": "Base class for social media strategies.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 36
    },
    "social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_rate_limit",
            "_handle_error",
            "login",
            "post",
            "create_post",
            "is_logged_in"
        ],
        "classes": {
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "_handle_rate_limit",
                    "_handle_error",
                    "login",
                    "post",
                    "create_post",
                    "is_logged_in"
                ],
                "docstring": "Strategy for interacting with Twitter.",
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\config.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "from_dict",
            "load",
            "save",
            "validate"
        ],
        "classes": {
            "RedditConfig": {
                "methods": [
                    "__post_init__",
                    "from_dict",
                    "load",
                    "save",
                    "validate"
                ],
                "docstring": "Reddit-specific configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\strategies\\reddit\\exceptions.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RedditError": {
                "methods": [],
                "docstring": "Base class for Reddit strategy exceptions.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogoutError": {
                "methods": [],
                "docstring": "Raised when logout fails due to session/auth issues.",
                "base_classes": [
                    "RedditError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LoginError": {
                "methods": [],
                "docstring": "Exception raised when login fails.",
                "base_classes": [
                    "RedditError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PostError": {
                "methods": [],
                "docstring": "Raised when post operations fail.",
                "base_classes": [
                    "RedditError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MediaError": {
                "methods": [],
                "docstring": "Exception raised when media operations fail.",
                "base_classes": [
                    "RedditError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AuthenticationError": {
                "methods": [],
                "docstring": "Raised when authentication fails.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RateLimitError": {
                "methods": [],
                "docstring": "Raised when rate limit is exceeded.",
                "base_classes": [
                    "RedditError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "login"
                ],
                "docstring": "Handles login functionality for Reddit.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\strategies\\reddit\\media.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media",
            "prepare_media"
        ],
        "classes": {
            "RedditMediaHandler": {
                "methods": [
                    "__init__",
                    "validate_media",
                    "prepare_media"
                ],
                "docstring": "Handles media operations for Reddit posts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\post_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post"
        ],
        "classes": {
            "PostHandler": {
                "methods": [
                    "__init__",
                    "create_post"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\strategies\\reddit\\strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_metric",
            "get_metrics",
            "get_summary",
            "save_metrics",
            "load_metrics",
            "clear_metrics",
            "_load_session",
            "_save_session",
            "_is_session_valid",
            "login",
            "is_logged_in",
            "verify_session",
            "create_post",
            "_handle_rate_limit",
            "_handle_error",
            "post",
            "comment",
            "_validate_media",
            "retry_operation"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "record_metric",
                    "get_metrics",
                    "get_summary",
                    "save_metrics",
                    "load_metrics",
                    "clear_metrics",
                    "_load_session",
                    "_save_session",
                    "_is_session_valid",
                    "login",
                    "is_logged_in",
                    "verify_session",
                    "create_post",
                    "_handle_rate_limit",
                    "_handle_error",
                    "post",
                    "comment",
                    "_validate_media",
                    "retry_operation"
                ],
                "docstring": "Strategy for interacting with Reddit.",
                "base_classes": [
                    "PlatformStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 40
    },
    "social\\strategies\\reddit\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\handlers\\base_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "configure",
            "get_config",
            "validate",
            "cleanup"
        ],
        "classes": {
            "BaseHandler": {
                "methods": [
                    "__init__",
                    "configure",
                    "get_config",
                    "validate",
                    "cleanup"
                ],
                "docstring": "Abstract base handler for Reddit strategy modules.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\strategies\\reddit\\handlers\\comment_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_comment",
            "_verify_comment_success"
        ],
        "classes": {
            "CommentHandler": {
                "methods": [
                    "__init__",
                    "add_comment",
                    "_verify_comment_success"
                ],
                "docstring": "Handles all comment-related operations for Reddit.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\handlers\\logout_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "LogoutHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles logout operations for Reddit strategy.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\strategies\\reddit\\handlers\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_credentials",
            "validate_credentials",
            "_validate_session_cookie",
            "_clear_session",
            "is_logged_in",
            "_handle_login_error",
            "login",
            "verify_session",
            "check_login_state",
            "logout",
            "refresh_session",
            "_save_session",
            "_load_session",
            "get_session",
            "get_headers",
            "get_last_action",
            "get_last_error"
        ],
        "classes": {
            "LoginCredentials": {
                "methods": [],
                "docstring": "Reddit login credentials.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LoginSession": {
                "methods": [],
                "docstring": "Reddit login session.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LoginError": {
                "methods": [],
                "docstring": "Login error.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "set_credentials",
                    "validate_credentials",
                    "_validate_session_cookie",
                    "_clear_session",
                    "is_logged_in",
                    "_handle_login_error",
                    "login",
                    "verify_session",
                    "check_login_state",
                    "logout",
                    "refresh_session",
                    "_save_session",
                    "_load_session",
                    "get_session",
                    "get_headers",
                    "get_last_action",
                    "get_last_error"
                ],
                "docstring": "Handles Reddit login operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 36
    },
    "social\\strategies\\reddit\\handlers\\media_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media",
            "process_media"
        ],
        "classes": {
            "MediaHandler": {
                "methods": [
                    "__init__",
                    "validate_media",
                    "process_media"
                ],
                "docstring": "Handles media validation and processing for Reddit posts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\handlers\\post_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "_handle_media_upload",
            "_verify_post_success"
        ],
        "classes": {
            "PostHandler": {
                "methods": [
                    "__init__",
                    "create_post",
                    "_handle_media_upload",
                    "_verify_post_success"
                ],
                "docstring": "Handles all post-related operations for Reddit.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\reddit\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\rate_limiting\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "rate_limit",
            "__init__",
            "set_rate_limit",
            "get_rate_limit",
            "check_rate_limit",
            "reset_rate_limit",
            "get_remaining_calls",
            "rate_limit",
            "_is_within_rate_limit",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "set_rate_limit",
                    "get_rate_limit",
                    "check_rate_limit",
                    "reset_rate_limit",
                    "get_remaining_calls",
                    "rate_limit",
                    "_is_within_rate_limit"
                ],
                "docstring": "Rate limiter for API calls.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "social\\strategies\\reddit\\rate_limiting\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\reddit\\validators\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_media"
                ],
                "docstring": "Validates media files for Reddit posts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\strategies\\twitter\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "_verify_login",
            "_save_session",
            "_load_session",
            "refresh_session"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "login",
                    "_verify_login",
                    "_save_session",
                    "_load_session",
                    "refresh_session"
                ],
                "docstring": "Handles Twitter login operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\strategies\\twitter\\media_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media",
            "upload_media"
        ],
        "classes": {
            "TwitterMediaHandler": {
                "methods": [
                    "__init__",
                    "validate_media",
                    "upload_media"
                ],
                "docstring": "Handles Twitter media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\reddit\\validators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\twitter\\post_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_post",
            "_attach_media",
            "_verify_post"
        ],
        "classes": {
            "PostHandler": {
                "methods": [
                    "__init__",
                    "create_post",
                    "_attach_media",
                    "_verify_post"
                ],
                "docstring": "Handles Twitter post operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\strategies\\twitter\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\twitter\\rate_limiting\\rate_limiter.py": {
        "language": ".py",
        "functions": [
            "rate_limit",
            "decorator",
            "__init__",
            "check_rate_limit",
            "get_remaining_operations",
            "get_reset_time",
            "wrapper"
        ],
        "classes": {
            "RateLimiter": {
                "methods": [
                    "__init__",
                    "check_rate_limit",
                    "get_remaining_operations",
                    "get_reset_time"
                ],
                "docstring": "Handles rate limiting for Twitter operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "social\\utils\\devlog_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_event",
            "get_log",
            "clear_log",
            "add_entry"
        ],
        "classes": {
            "DevLogManager": {
                "methods": [
                    "__init__",
                    "log_event",
                    "get_log",
                    "clear_log",
                    "add_entry"
                ],
                "docstring": "Stub implementation of DevLogManager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\utils\\cleanup.py": {
        "language": ".py",
        "functions": [
            "cleanup_temp_files",
            "cleanup_old_logs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\strategies\\twitter\\rate_limiting\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\utils\\log_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_logging",
            "debug",
            "info",
            "warning",
            "error",
            "critical"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogConfig": {
                "methods": [],
                "docstring": "Log configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogManager": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical"
                ],
                "docstring": "Manages logging for social media operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\utils\\log_batcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_log",
            "flush",
            "should_flush"
        ],
        "classes": {
            "LogBatcher": {
                "methods": [
                    "__init__",
                    "add_log",
                    "flush",
                    "should_flush"
                ],
                "docstring": "Handles batching of logs for efficient processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\utils\\log_types.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "LogTypes": {
                "methods": [],
                "docstring": "Enumeration of log types used in the system.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RotationConfig": {
                "methods": [],
                "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "social\\utils\\media_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_media"
        ],
        "classes": {
            "MediaValidator": {
                "methods": [
                    "__init__",
                    "validate_media"
                ],
                "docstring": "Validates media files for social media posts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\utils\\log_rotator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_file_size",
            "_get_file_age",
            "_rotate_file",
            "_cleanup_old_backups",
            "check_rotation",
            "rotate_all",
            "get_rotation_info"
        ],
        "classes": {
            "LogRotator": {
                "methods": [
                    "__init__",
                    "_get_file_size",
                    "_get_file_age",
                    "_rotate_file",
                    "_cleanup_old_backups",
                    "check_rotation",
                    "rotate_all",
                    "get_rotation_info"
                ],
                "docstring": "Handles log file rotation and cleanup.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\utils\\log_metrics.py": {
        "language": ".py",
        "functions": [
            "add_log",
            "get_error_rate",
            "get_source_distribution",
            "get_error_type_distribution",
            "reset"
        ],
        "classes": {
            "LogMetrics": {
                "methods": [
                    "add_log",
                    "get_error_rate",
                    "get_source_distribution",
                    "get_error_type_distribution",
                    "reset"
                ],
                "docstring": "Metrics for log analysis and tracking.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\utils\\social_common.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\autopitch_machine.py": {
        "language": ".py",
        "functions": [
            "parse_devlog",
            "create_visual",
            "send_to_discord"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\calibrate_coordinates.py": {
        "language": ".py",
        "functions": [
            "get_mouse_position",
            "calibrate_agent",
            "calibrate_multiple_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\capture_copy_button.py": {
        "language": ".py",
        "functions": [
            "capture_template",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\check_cursor_coords.py": {
        "language": ".py",
        "functions": [
            "on_click",
            "on_press"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\create_minimal_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\daily_trigger.py": {
        "language": ".py",
        "functions": [
            "send_notification",
            "check_activities",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\devlog_pitcher.py": {
        "language": ".py",
        "functions": [
            "parse_devlog",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\layout_snapshot.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_get_screen_info",
            "_compute_hash",
            "create_snapshot",
            "_save_snapshot",
            "load_snapshot",
            "list_snapshots",
            "compare_snapshots"
        ],
        "classes": {
            "LayoutSnapshot": {
                "methods": [],
                "docstring": "Represents a snapshot of agent layouts.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LayoutSnapshotManager": {
                "methods": [
                    "__init__",
                    "_get_screen_info",
                    "_compute_hash",
                    "create_snapshot",
                    "_save_snapshot",
                    "load_snapshot",
                    "list_snapshots",
                    "compare_snapshots"
                ],
                "docstring": "Manages layout snapshots.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\odyssey_board.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "dragEnterEvent",
            "dragMoveEvent",
            "dropEvent",
            "__init__",
            "_build_tabs",
            "closeEvent",
            "_persist_board"
        ],
        "classes": {
            "KanbanColumn": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dragMoveEvent",
                    "dropEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QListWidget"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OdysseyBoard": {
                "methods": [
                    "__init__",
                    "_build_tabs",
                    "closeEvent",
                    "_persist_board"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\prepare_release.py": {
        "language": ".py",
        "functions": [
            "generate_changelog",
            "prepare_release"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\life_os_dashboard.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\odyssey_generator.py": {
        "language": ".py",
        "functions": [
            "_extract_identity",
            "generate_odyssey",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\recalibrate_coords.py": {
        "language": ".py",
        "functions": [
            "get_window_info",
            "capture_point",
            "validate_unique_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\run_menu.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\send_task.py": {
        "language": ".py",
        "functions": [
            "send_optimization_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\start_metrics_server.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\orphans\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    }
}