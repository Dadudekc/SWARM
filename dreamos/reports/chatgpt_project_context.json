{
    "project_root": "D:\\SWARM\\Dream.OS\\dreamos",
    "num_files_analyzed": 392,
    "analysis_details": {
        "bridge.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "parse_hybrid_response",
                "__init__",
                "_load_config",
                "_validate_config",
                "_find_chat_input",
                "_find_send_button",
                "_find_login_button",
                "_save_requests",
                "_save_health",
                "_is_logged_in"
            ],
            "classes": {
                "BridgeRequest": {
                    "methods": [],
                    "docstring": "A request to be processed by the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeHealth": {
                    "methods": [],
                    "docstring": "Health status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses hybrid responses containing both text and structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                },
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "_find_chat_input",
                        "_find_send_button",
                        "_find_login_button",
                        "_save_requests",
                        "_save_health",
                        "_is_logged_in"
                    ],
                    "docstring": "Main bridge service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "start_dreamos.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_status_file"
            ],
            "classes": {
                "DreamOSLauncher": {
                    "methods": [
                        "__init__",
                        "_init_status_file"
                    ],
                    "docstring": "Launches and manages Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "apps\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "apps\\life_tether\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge\\core\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_validate_config",
                "_find_chat_input",
                "_find_send_button",
                "_find_login_button",
                "_save_requests",
                "_save_health",
                "_is_logged_in"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "_find_chat_input",
                        "_find_send_button",
                        "_find_login_button",
                        "_save_requests",
                        "_save_health",
                        "_is_logged_in"
                    ],
                    "docstring": "Main bridge service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "bridge\\core\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge\\models\\health.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BridgeHealth": {
                    "methods": [],
                    "docstring": "Health status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "bridge\\models\\request.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BridgeRequest": {
                    "methods": [],
                    "docstring": "A request to be processed by the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "bridge\\models\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge\\utils\\response_handler.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "parse_hybrid_response"
            ],
            "classes": {
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses hybrid responses containing both text and structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "bridge\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "bridge_clients\\cursor\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "bridge_clients\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "config\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_interface.py": {
            "language": ".py",
            "functions": [
                "send_command",
                "broadcast_command",
                "__init__",
                "send_command",
                "broadcast_command",
                "get_agent_status",
                "clear_agent_messages",
                "cleanup"
            ],
            "classes": {
                "AgentInterface": {
                    "methods": [
                        "__init__",
                        "send_command",
                        "broadcast_command",
                        "get_agent_status",
                        "clear_agent_messages",
                        "cleanup"
                    ],
                    "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentLoop": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages an agent's processing loop.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\cli.py": {
            "language": ".py",
            "functions": [
                "direct_send_message",
                "bus_send_message",
                "parse_args",
                "validate_priority",
                "load_coordinates",
                "cli_main",
                "send_message",
                "get_status",
                "clear_messages",
                "shutdown",
                "__init__",
                "send_message",
                "get_status",
                "clear_messages",
                "shutdown"
            ],
            "classes": {
                "MessageCLI": {
                    "methods": [
                        "__init__",
                        "send_message",
                        "get_status",
                        "clear_messages",
                        "shutdown"
                    ],
                    "docstring": "Command-line interface for agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_dir",
                "log_dir"
            ],
            "classes": {
                "Config": {
                    "methods": [
                        "__init__",
                        "log_dir",
                        "log_dir"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "move_to",
                "__init__",
                "move_to",
                "click",
                "type_text",
                "press_enter",
                "press_ctrl_enter",
                "press_ctrl_n",
                "press_ctrl_v",
                "press_ctrl_a"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "move_to",
                        "click",
                        "type_text",
                        "press_enter",
                        "press_ctrl_enter",
                        "press_ctrl_n",
                        "press_ctrl_v",
                        "press_ctrl_a"
                    ],
                    "docstring": "Controls cursor movement and input for agent interaction.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "core\\log_manager.py": {
            "language": ".py",
            "functions": [
                "record_metric",
                "__init__",
                "_setup_logging",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "record_metric",
                "get_metrics",
                "get_summary",
                "save_metrics",
                "load_metrics",
                "clear_metrics"
            ],
            "classes": {
                "LogManager": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "record_metric",
                        "get_metrics",
                        "get_summary",
                        "save_metrics",
                        "load_metrics",
                        "clear_metrics"
                    ],
                    "docstring": "Manages logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 27
        },
        "core\\menu.py": {
            "language": ".py",
            "functions": [
                "_init_theme",
                "main",
                "__init__",
                "_init_theme",
                "get_font",
                "get_color",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "add_item",
                "clear",
                "__init__",
                "add_button",
                "add_header",
                "add_footer",
                "add_separator",
                "build",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "MenuStyle": {
                    "methods": [],
                    "docstring": "Menu styles.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuItemType": {
                    "methods": [],
                    "docstring": "Menu item types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuItem": {
                    "methods": [],
                    "docstring": "Menu item.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuTheme": {
                    "methods": [
                        "__init__",
                        "_init_theme",
                        "get_font",
                        "get_color"
                    ],
                    "docstring": "Menu theme.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuButton": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu button.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuHeader": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu header.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuFooter": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu footer.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuSignals": {
                    "methods": [],
                    "docstring": "Menu signals.",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Menu": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "add_item",
                        "clear"
                    ],
                    "docstring": "Menu widget.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuBuilder": {
                    "methods": [
                        "__init__",
                        "add_button",
                        "add_header",
                        "add_footer",
                        "add_separator",
                        "build"
                    ],
                    "docstring": "Menu builder.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QWidget": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QVBoxLayout": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QFrame": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "Qt": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "pyqtSignal": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "QObject": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QFont": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QColor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "AlignmentFlag": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 58
        },
        "core\\message.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\persistent_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_from_disk",
                "_save_to_disk",
                "put",
                "get",
                "qsize",
                "empty",
                "full",
                "clear",
                "get_all"
            ],
            "classes": {
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_load_from_disk",
                        "_save_to_disk",
                        "put",
                        "get",
                        "qsize",
                        "empty",
                        "full",
                        "clear",
                        "get_all"
                    ],
                    "docstring": "A queue that persists its contents to disk.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\response_collector_new.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\start_dreamos.py": {
            "language": ".py",
            "functions": [
                "_init_status_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\system_init.py": {
            "language": ".py",
            "functions": [
                "initialize_core_systems",
                "main",
                "__init__",
                "initialize_core_systems",
                "establish_communication_channels",
                "begin_monitoring",
                "report_status"
            ],
            "classes": {
                "SystemInitializer": {
                    "methods": [
                        "__init__",
                        "initialize_core_systems",
                        "establish_communication_channels",
                        "begin_monitoring",
                        "report_status"
                    ],
                    "docstring": "Handles system initialization and communication setup.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agents\\perpetual_test_fixer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "__init__",
                "_process_failures",
                "get_status"
            ],
            "classes": {
                "TestFailureHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles test file changes and triggers test runs.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PerpetualTestFixer": {
                    "methods": [
                        "__init__",
                        "_process_failures",
                        "get_status"
                    ],
                    "docstring": "Coordinates test failures with agents and Codex validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_control\\agent_cellphone.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentCellphone": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles direct message injection to agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\agent_control.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_agent",
                "unregister_agent",
                "get_agent",
                "list_agents",
                "update_agent_config"
            ],
            "classes": {
                "AgentControl": {
                    "methods": [
                        "__init__",
                        "register_agent",
                        "unregister_agent",
                        "get_agent",
                        "list_agents",
                        "update_agent_config"
                    ],
                    "docstring": "High-level agent control and management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\agent_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_agent",
                "stop_agent",
                "resume_agent",
                "verify_agent",
                "cleanup_agent",
                "get_agent_status"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "start_agent",
                        "stop_agent",
                        "resume_agent",
                        "verify_agent",
                        "cleanup_agent",
                        "get_agent_status"
                    ],
                    "docstring": "Controls agent lifecycle and coordination.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\agent_control\\agent_operations.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "list_agents",
                "cleanup"
            ],
            "classes": {
                "AgentOperations": {
                    "methods": [
                        "__init__",
                        "list_agents",
                        "cleanup"
                    ],
                    "docstring": "Handles agent-specific operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\agent_control\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_agent_stalled"
            ],
            "classes": {
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "_is_agent_stalled"
                    ],
                    "docstring": "Monitors and restarts stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\agent_control\\agent_selection_dialog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "_handle_selection"
            ],
            "classes": {
                "AgentSelectionDialog": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_handle_selection"
                    ],
                    "docstring": "Dialog for selecting one or more agents.",
                    "base_classes": [
                        "QDialog"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\agent_control\\agent_status.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": "Enum representing possible agent states.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStatusInfo": {
                    "methods": [
                        "__init__",
                        "update",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Class for tracking detailed agent status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\agent_control\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_outbox",
                "_save_outbox"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "_load_outbox",
                        "_save_outbox"
                    ],
                    "docstring": "Handles outbox operations for bridge communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\agent_control\\captain.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Captain": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Central coordinator for agents.\n\nThe Captain assigns tasks and routes messages using the\n:class:`MessageSystem`. It also keeps track of tasks via\n:class:`TaskManager`.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_menu_builder",
                "_handle_menu_action",
                "_handle_list_agents",
                "cleanup",
                "run",
                "list_agents",
                "onboard_agent",
                "resume_agent",
                "verify_agent",
                "repair_agent",
                "backup_agent",
                "restore_agent",
                "send_message"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "set_menu_builder",
                        "_handle_menu_action",
                        "_handle_list_agents",
                        "cleanup",
                        "run",
                        "list_agents",
                        "onboard_agent",
                        "resume_agent",
                        "verify_agent",
                        "repair_agent",
                        "backup_agent",
                        "restore_agent",
                        "send_message"
                    ],
                    "docstring": "Main controller for agent operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "core\\agent_control\\coordinate_calibrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_coordinates",
                "save_coordinates",
                "get_coordinates",
                "update_coordinates",
                "calibrate_agent"
            ],
            "classes": {
                "CoordinateCalibrator": {
                    "methods": [
                        "__init__",
                        "load_coordinates",
                        "save_coordinates",
                        "get_coordinates",
                        "update_coordinates",
                        "calibrate_agent"
                    ],
                    "docstring": "Manages UI coordinate calibration for agent interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\coordinate_transformer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_monitors",
                "transform_coordinates",
                "transform_coordinate_dict"
            ],
            "classes": {
                "CoordinateTransformer": {
                    "methods": [
                        "__init__",
                        "_get_monitors",
                        "transform_coordinates",
                        "transform_coordinate_dict"
                    ],
                    "docstring": "Transforms coordinates between monitor and screen space.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\agent_control\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "move_to",
                "click",
                "type_text",
                "press_enter",
                "get_position",
                "wait",
                "move_to_agent",
                "click_input_box",
                "click_copy_button"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "move_to",
                        "click",
                        "type_text",
                        "press_enter",
                        "get_position",
                        "wait",
                        "move_to_agent",
                        "click_input_box",
                        "click_copy_button"
                    ],
                    "docstring": "Controls cursor movement and interaction.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\agent_control\\devlog_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_event",
                "get_log",
                "clear_log",
                "send_embed",
                "shutdown"
            ],
            "classes": {
                "DevLogManager": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_log",
                        "clear_log",
                        "send_embed",
                        "shutdown"
                    ],
                    "docstring": "Manages development logs for agent control.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\high_priority_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "HighPriorityDispatcher": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles high-priority message routing and prompt bouncing between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\main.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\agent_control\\menu_builder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_controller",
                "_handle_menu_action",
                "cleanup",
                "_build_menu",
                "_handle_list_agents",
                "_handle_agent_selection",
                "display_menu",
                "connect_signals",
                "disconnect_signals"
            ],
            "classes": {
                "MenuBuilder": {
                    "methods": [
                        "__init__",
                        "set_controller",
                        "_handle_menu_action",
                        "cleanup",
                        "_build_menu",
                        "_handle_list_agents",
                        "_handle_agent_selection",
                        "display_menu",
                        "connect_signals",
                        "disconnect_signals"
                    ],
                    "docstring": "Builds the agent control menu.",
                    "base_classes": [
                        "BaseMenuBuilder"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\agent_control\\periodic_restart.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_agent_management",
                "stop_agent_management",
                "__init__",
                "start_resume_management",
                "stop_resume_management"
            ],
            "classes": {
                "AgentManager": {
                    "methods": [
                        "__init__",
                        "start_agent_management",
                        "stop_agent_management"
                    ],
                    "docstring": "Manages agent periodic restarts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentResumeManager": {
                    "methods": [
                        "__init__",
                        "start_resume_management",
                        "stop_resume_management"
                    ],
                    "docstring": "Manages agent resumption after restarts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\response_capture.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_coordinates",
                "capture_response",
                "wait_for_copy_button"
            ],
            "classes": {
                "ResponseCapture": {
                    "methods": [
                        "__init__",
                        "_load_coordinates",
                        "capture_response",
                        "wait_for_copy_button"
                    ],
                    "docstring": "Handles capturing and processing UI responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\agent_control\\screenshot_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "capture",
                "get_screenshots",
                "get_latest_screenshot",
                "compare_screenshots",
                "cleanup"
            ],
            "classes": {
                "ScreenshotLogger": {
                    "methods": [
                        "__init__",
                        "capture",
                        "get_screenshots",
                        "get_latest_screenshot",
                        "compare_screenshots",
                        "cleanup"
                    ],
                    "docstring": "Tracks and manages debug screenshots for UI automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\system_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_message_history",
                "_save_message_history",
                "_connect_components",
                "_needs_captain_response"
            ],
            "classes": {
                "MessageRecord": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Record of a message between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SystemOrchestrator": {
                    "methods": [
                        "__init__",
                        "_load_message_history",
                        "_save_message_history",
                        "_connect_components",
                        "_needs_captain_response"
                    ],
                    "docstring": "Orchestrates all Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\agent_control\\task_manager.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "from_dict",
                "validate",
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "create_task",
                "get_task",
                "update_task_status",
                "get_agent_tasks",
                "get_blocked_tasks",
                "get_high_priority_tasks",
                "get_task_context",
                "generate_task_summary",
                "cleanup_completed_tasks"
            ],
            "classes": {
                "Task": {
                    "methods": [
                        "to_dict",
                        "from_dict",
                        "validate"
                    ],
                    "docstring": "Task structure for agent operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "create_task",
                        "get_task",
                        "update_task_status",
                        "get_agent_tasks",
                        "get_blocked_tasks",
                        "get_high_priority_tasks",
                        "get_task_context",
                        "generate_task_summary",
                        "cleanup_completed_tasks"
                    ],
                    "docstring": "Manages task distribution and tracking between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 30
        },
        "core\\agent_control\\timing.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "wait_focus",
                "wait_click",
                "wait_typing",
                "wait_capture",
                "wait_screenshot",
                "wait_move",
                "wait_scroll",
                "wait_load",
                "wait_refresh"
            ],
            "classes": {
                "Timing": {
                    "methods": [
                        "__init__",
                        "wait_focus",
                        "wait_click",
                        "wait_typing",
                        "wait_capture",
                        "wait_screenshot",
                        "wait_move",
                        "wait_scroll",
                        "wait_load",
                        "wait_refresh"
                    ],
                    "docstring": "Minimal Timing stub for UI/automation flow compatibility.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\agent_control\\ui_automation.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_save_coordinates",
                "_validate_coordinates",
                "_has_duplicate_coordinates",
                "_check_region_overlap",
                "_get_screen_resolution",
                "_is_coordinate_valid",
                "_move_to_coordinate",
                "_click_at_coordinate",
                "_type_text",
                "_clear_text",
                "_delete_text",
                "_wait_for_delay",
                "_capture_region",
                "_get_text_from_region",
                "_handle_interrupt",
                "_calibration_context",
                "_cleanup_calibration",
                "_validate_coordinates",
                "_has_duplicate_coordinates",
                "_check_region_overlap",
                "get_agent_coordinates",
                "get_response_region",
                "_load_config",
                "_save_coordinates",
                "_setup_signal_handlers",
                "_calibration_context",
                "_calibration_loop",
                "start_calibration",
                "_get_screenshot_logger",
                "_validate_window_title",
                "_capture_debug_screenshot",
                "_transform_coordinates",
                "_transform_coordinate_dict",
                "_load_coordinates",
                "_get_default_coordinates",
                "_click_focus",
                "send_message",
                "_load_onboarding_prompt",
                "perform_onboarding_sequence",
                "_split_message",
                "cleanup",
                "move_to",
                "click",
                "type_text",
                "press_key",
                "hotkey",
                "screenshot",
                "_get_response",
                "move_to_agent",
                "click_input_box",
                "click_copy_button",
                "_has_out_of_bounds_coordinates"
            ],
            "classes": {
                "UIAutomation": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_save_coordinates",
                        "_validate_coordinates",
                        "_has_duplicate_coordinates",
                        "_check_region_overlap",
                        "_get_screen_resolution",
                        "_is_coordinate_valid",
                        "_move_to_coordinate",
                        "_click_at_coordinate",
                        "_type_text",
                        "_clear_text",
                        "_delete_text",
                        "_wait_for_delay",
                        "_capture_region",
                        "_get_text_from_region",
                        "_handle_interrupt",
                        "_calibration_context",
                        "_cleanup_calibration",
                        "_validate_coordinates",
                        "_has_duplicate_coordinates",
                        "_check_region_overlap",
                        "get_agent_coordinates",
                        "get_response_region",
                        "_load_config",
                        "_save_coordinates",
                        "_setup_signal_handlers",
                        "_calibration_context",
                        "_calibration_loop",
                        "start_calibration",
                        "_get_screenshot_logger",
                        "_validate_window_title",
                        "_capture_debug_screenshot",
                        "_transform_coordinates",
                        "_transform_coordinate_dict",
                        "_load_coordinates",
                        "_get_default_coordinates",
                        "_click_focus",
                        "send_message",
                        "_load_onboarding_prompt",
                        "perform_onboarding_sequence",
                        "_split_message",
                        "cleanup",
                        "move_to",
                        "click",
                        "type_text",
                        "press_key",
                        "hotkey",
                        "screenshot",
                        "_get_response",
                        "move_to_agent",
                        "click_input_box",
                        "click_copy_button",
                        "_has_out_of_bounds_coordinates"
                    ],
                    "docstring": "UI automation class for handling screen interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 108
        },
        "core\\agent_control\\visual_watchdog.py": {
            "language": ".py",
            "functions": [
                "hash_screen_region",
                "has_region_stabilized"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_control\\__main__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_control\\controllers\\agent_controller.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Controller for managing individual agents.",
                    "base_classes": [
                        "BaseController"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\controllers\\base_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_initialized",
                "is_running",
                "get_config",
                "set_config"
            ],
            "classes": {
                "BaseController": {
                    "methods": [
                        "__init__",
                        "is_initialized",
                        "is_running",
                        "get_config",
                        "set_config"
                    ],
                    "docstring": "Base class for all Dream.OS controllers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\agent_control\\controllers\\system_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_bridge_metrics"
            ],
            "classes": {
                "SystemController": {
                    "methods": [
                        "__init__",
                        "get_bridge_metrics"
                    ],
                    "docstring": "System-wide controller for managing agents and their interactions.",
                    "base_classes": [
                        "BaseController"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\agent_control\\controllers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_control\\onboarding\\agent_onboarder.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentOnboarder": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles individual agent onboarding.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\agent_control\\onboarding\\captain_onboarder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_agent_id",
                "_get_network_config",
                "get_activation_history"
            ],
            "classes": {
                "CaptainOnboarder": {
                    "methods": [
                        "__init__",
                        "_validate_agent_id",
                        "_get_network_config",
                        "get_activation_history"
                    ],
                    "docstring": "Handles activation and onboarding of multiple agents by a captain.\n\nSafety Features:\n- skip_self: Prevents the captain from onboarding itself\n- duplicate_check: Prevents re-onboarding already active agents\n- activation_tracking: Maintains record of which agents were activated\n- agent_validation: Ensures valid agent IDs and network configuration",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\agent_control\\onboarding\\message_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_default_config",
                "_get_template",
                "_generate_message_id",
                "create_network_activation_message",
                "create_individual_activation_message",
                "create_broadcast_message",
                "save_message_to_inbox",
                "get_message_history"
            ],
            "classes": {
                "MessageManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_default_config",
                        "_get_template",
                        "_generate_message_id",
                        "create_network_activation_message",
                        "create_individual_activation_message",
                        "create_broadcast_message",
                        "save_message_to_inbox",
                        "get_message_history"
                    ],
                    "docstring": "Manages onboarding messages for agents and network activation.\n\nFeatures:\n- Jinja2 templating for dynamic messages\n- Multiple config sources (JSON/YAML/embedded)\n- Message idempotence and tracking\n- Broadcast support for network-wide announcements",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\agent_control\\onboarding\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agent_control\\recovery\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_can_restart",
                "callback"
            ],
            "classes": {
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "_can_restart"
                    ],
                    "docstring": "Handles agent recovery and restart operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\agent_control\\recovery\\config_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "save_config",
                "get_config",
                "update_config",
                "_validate_config"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "save_config",
                        "get_config",
                        "update_config",
                        "_validate_config"
                    ],
                    "docstring": "Manages recovery configuration settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\agent_control\\recovery\\heartbeat_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_can_restart",
                "get_failed_agents"
            ],
            "classes": {
                "HeartbeatMonitor": {
                    "methods": [
                        "__init__",
                        "_can_restart",
                        "get_failed_agents"
                    ],
                    "docstring": "Monitors agent heartbeats and manages recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\agent_control\\recovery\\recovery_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_recovery_status"
            ],
            "classes": {
                "RecoveryManager": {
                    "methods": [
                        "__init__",
                        "get_recovery_status"
                    ],
                    "docstring": "Manages agent recovery operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\agent_control\\recovery\\window_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_cursor_window",
                "check_window_idle",
                "activate_window",
                "update_activity",
                "callback"
            ],
            "classes": {
                "WindowManager": {
                    "methods": [
                        "__init__",
                        "find_cursor_window",
                        "check_window_idle",
                        "activate_window",
                        "update_activity"
                    ],
                    "docstring": "Manages window operations for agent recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "core\\agent_control\\recovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ai\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "format_message",
                "format_system_message",
                "format_user_message",
                "format_assistant_message"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "format_message",
                        "format_system_message",
                        "format_user_message",
                        "format_assistant_message"
                    ],
                    "docstring": "Simplified ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\ai\\dreamscribe.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory_corpus",
                "_load_threads",
                "_load_insight_patterns",
                "_save_memory_corpus",
                "_save_thread",
                "_save_insight_patterns",
                "_extract_insights",
                "_find_connections",
                "_update_narratives",
                "process_with_gpt",
                "ingest_devlog",
                "get_memory",
                "get_thread",
                "get_system_insights"
            ],
            "classes": {
                "MemoryFragment": {
                    "methods": [],
                    "docstring": "A single memory fragment from a devlog or system event.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "NarrativeThread": {
                    "methods": [],
                    "docstring": "A connected sequence of memories forming a coherent story.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Dreamscribe": {
                    "methods": [
                        "__init__",
                        "_load_memory_corpus",
                        "_load_threads",
                        "_load_insight_patterns",
                        "_save_memory_corpus",
                        "_save_thread",
                        "_save_insight_patterns",
                        "_extract_insights",
                        "_find_connections",
                        "_update_narratives",
                        "process_with_gpt",
                        "ingest_devlog",
                        "get_memory",
                        "get_thread",
                        "get_system_insights"
                    ],
                    "docstring": "The core memory and narrative system for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 30
        },
        "core\\ai\\llm_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_history"
            ],
            "classes": {
                "LLMAgent": {
                    "methods": [
                        "__init__",
                        "get_history"
                    ],
                    "docstring": "Agent that integrates ChatGPT with the messaging system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\ai\\memory_querier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_recent_memory",
                "summarize_topic",
                "_calculate_memory_similarity",
                "find_similar_threads",
                "get_agent_insights",
                "get_task_history"
            ],
            "classes": {
                "MemoryQuerier": {
                    "methods": [
                        "__init__",
                        "get_recent_memory",
                        "summarize_topic",
                        "_calculate_memory_similarity",
                        "find_similar_threads",
                        "get_agent_insights",
                        "get_task_history"
                    ],
                    "docstring": "Provides query interface for agent memory corpus.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ai\\gpt_router\\engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_conversation"
            ],
            "classes": {
                "Engine": {
                    "methods": [
                        "__init__",
                        "process_conversation"
                    ],
                    "docstring": "Orchestrates prompt delivery and response collection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\ai\\gpt_router\\router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_profile",
                "decide_prompt"
            ],
            "classes": {
                "Router": {
                    "methods": [
                        "__init__",
                        "_load_profile",
                        "decide_prompt"
                    ],
                    "docstring": "Decide which prompt and GPT profile to use based on context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ai\\gpt_router\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_response",
                "validate_code",
                "extract_json"
            ],
            "classes": {
                "CodexValidator": {
                    "methods": [
                        "__init__",
                        "validate_response",
                        "validate_code",
                        "extract_json"
                    ],
                    "docstring": "Validates code and responses from GPT models.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\ai\\gpt_router\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ai\\gpt_router\\profiles\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\auth\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "is_valid",
                "time_remaining"
            ],
            "classes": {
                "ExpirableMixin": {
                    "methods": [
                        "__post_init__",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Mixin providing expiration-related functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\auth\\interface.py": {
            "language": ".py",
            "functions": [
                "login",
                "logout",
                "verify_session",
                "refresh_token"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AbstractAuthInterface": {
                    "methods": [
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token"
                    ],
                    "docstring": "Abstract base class defining the authentication interface.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\auth\\login_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\auth\\manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "authenticate",
                "validate_token",
                "refresh_token",
                "create_session",
                "get_session",
                "invalidate_session"
            ],
            "classes": {
                "AuthConfig": {
                    "methods": [],
                    "docstring": "Configuration for authentication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "authenticate",
                        "validate_token",
                        "refresh_token",
                        "create_session",
                        "get_session",
                        "invalidate_session"
                    ],
                    "docstring": "Manages authentication and authorization.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\auth\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "__init__",
                "calculate_delay",
                "execute",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RetryError": {
                    "methods": [],
                    "docstring": "Base class for retry-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RetryMechanism": {
                    "methods": [
                        "__init__",
                        "calculate_delay",
                        "execute"
                    ],
                    "docstring": "Implements retry logic with exponential backoff.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "core\\auth\\session.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Session class for managing user sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\auth\\token.py": {
            "language": ".py",
            "functions": [
                "is_valid",
                "time_remaining",
                "__init__",
                "_load_secret_key",
                "generate_token",
                "validate_token",
                "get_token_info",
                "refresh_token",
                "invalidate_token",
                "cleanup_expired",
                "_sign_token"
            ],
            "classes": {
                "TokenInfo": {
                    "methods": [
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents token metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TokenHandler": {
                    "methods": [
                        "__init__",
                        "_load_secret_key",
                        "generate_token",
                        "validate_token",
                        "get_token_info",
                        "refresh_token",
                        "invalidate_token",
                        "cleanup_expired",
                        "_sign_token"
                    ],
                    "docstring": "Handles token generation, validation, and refresh.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\auth\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\automation\\browser_control.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "wait_for_element",
                "send_keys",
                "click",
                "get_text"
            ],
            "classes": {
                "BrowserControl": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "wait_for_element",
                        "send_keys",
                        "click",
                        "get_text"
                    ],
                    "docstring": "Controls browser automation for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\automation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_inbox",
                "load_inbox",
                "save_inbox"
            ],
            "classes": {
                "AgentLoop": {
                    "methods": [
                        "__init__",
                        "_load_inbox",
                        "load_inbox",
                        "save_inbox"
                    ],
                    "docstring": "Monitors agent inboxes and processes incoming prompts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\agent_state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_agent_state",
                "get_agent_state",
                "get_idle_agents",
                "is_agent_stuck",
                "get_agent_stats",
                "get_all_stats"
            ],
            "classes": {
                "AgentState": {
                    "methods": [
                        "__init__",
                        "update_agent_state",
                        "get_agent_state",
                        "get_idle_agents",
                        "is_agent_stuck",
                        "get_agent_stats",
                        "get_all_stats"
                    ],
                    "docstring": "Manages agent states and provides auto-resume functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\autonomy\\autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\autonomy_loop_runner.py": {
            "language": ".py",
            "functions": [
                "run_pytest",
                "__init__",
                "_load_agent_ownership",
                "_should_run_iteration",
                "_determine_responsible_agent",
                "generate_fix_prompt",
                "apply_code_patch",
                "commit_code"
            ],
            "classes": {
                "AutonomyLoopRunner": {
                    "methods": [
                        "__init__",
                        "_load_agent_ownership",
                        "_should_run_iteration",
                        "_determine_responsible_agent",
                        "generate_fix_prompt",
                        "apply_code_patch",
                        "commit_code"
                    ],
                    "docstring": "Manages the autonomous test-fix loop.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\autonomy\\auto_trigger_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_trigger",
                "_determine_responsible_agent"
            ],
            "classes": {
                "AutoTriggerRunner": {
                    "methods": [
                        "__init__",
                        "_should_trigger",
                        "_determine_responsible_agent"
                    ],
                    "docstring": "Manages automatic test failure handling and fix loops.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\base_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_log_failure",
                "_log_success",
                "_load_log"
            ],
            "classes": {
                "BaseTracker": {
                    "methods": [
                        "__init__",
                        "_log_failure",
                        "_log_success",
                        "_load_log"
                    ],
                    "docstring": "Base class for tracking and logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\bridge_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_status"
            ],
            "classes": {
                "BridgeWriter": {
                    "methods": [
                        "__init__",
                        "get_status"
                    ],
                    "docstring": "Manages writing responses to the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\autonomy\\codex_patch_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_patch_status",
                "get_all_patches"
            ],
            "classes": {
                "CodexPatchTracker": {
                    "methods": [
                        "__init__",
                        "get_patch_status",
                        "get_all_patches"
                    ],
                    "docstring": "Tracks and manages code patches generated by Codex.",
                    "base_classes": [
                        "BaseTracker"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\content_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_content_event",
                "log_task_completion",
                "log_insight",
                "get_content_history"
            ],
            "classes": {
                "ContentLoop": {
                    "methods": [
                        "__init__",
                        "log_content_event",
                        "log_task_completion",
                        "log_insight",
                        "get_content_history"
                    ],
                    "docstring": "Manages content generation and memory integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent",
                "register_agent",
                "unregister_agent"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "get_agent",
                        "register_agent",
                        "unregister_agent"
                    ],
                    "docstring": "Manages agent lifecycle and coordination.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\core_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_response_processor",
                "_get_response_files",
                "__init__",
                "on_created"
            ],
            "classes": {
                "CoreResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_create_response_processor",
                        "_get_response_files"
                    ],
                    "docstring": "Core response loop daemon implementation.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in bridge outbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\core_response_processor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CoreResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes responses for the core response loop.",
                    "base_classes": [
                        "ResponseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\cursor_agent_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_regions",
                "_inject_to_cursor",
                "__init__",
                "on_created"
            ],
            "classes": {
                "CursorAgentBridge": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_inject_to_cursor"
                    ],
                    "docstring": "Handles automated response collection and feedback loops.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in bridge outbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\enhanced_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_regions",
                "_save_agent_regions",
                "_create_response_processor",
                "_get_response_files",
                "_has_region_stabilized",
                "_hash_region",
                "__init__",
                "on_created"
            ],
            "classes": {
                "EnhancedResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_save_agent_regions",
                        "_create_response_processor",
                        "_get_response_files",
                        "_has_region_stabilized",
                        "_hash_region"
                    ],
                    "docstring": "Enhanced response loop daemon with hybrid completion detection.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EnhancedBridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Enhanced handler for bridge outbox events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\autonomy\\error_tracking.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "get_health_metrics",
                "manual_reset",
                "__init__",
                "record_error",
                "record_success",
                "can_execute",
                "get_error_summary",
                "get_agent_health",
                "get_critical_errors",
                "_archive_unfixable_error",
                "clear_errors",
                "manual_reset"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TrackedError": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Base class for tracked errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ArchiveError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to archiving operations.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptFormatError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to prompt formatting.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentInactivityError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to agent inactivity.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogWriteError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to devlog writing.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RecoveryStrategy": {
                    "methods": [],
                    "docstring": "Recovery strategies for different error types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute",
                        "get_health_metrics",
                        "manual_reset"
                    ],
                    "docstring": "Circuit breaker for error rate monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "record_error",
                        "record_success",
                        "can_execute",
                        "get_error_summary",
                        "get_agent_health",
                        "get_critical_errors",
                        "_archive_unfixable_error",
                        "clear_errors",
                        "manual_reset"
                    ],
                    "docstring": "Tracks errors and provides error analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "core\\autonomy\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages overnight operations and swarm maintenance.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\patch_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_validation_history",
                "get_all_validations"
            ],
            "classes": {
                "PatchValidator": {
                    "methods": [
                        "__init__",
                        "get_validation_history",
                        "get_all_validations"
                    ],
                    "docstring": "Validates patches before they are applied.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\processor_mode.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ProcessorMode": {
                    "methods": [],
                    "docstring": "Processor operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\startup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config"
            ],
            "classes": {
                "AutonomySystem": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Coordinates all autonomy components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\autonomy\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "current_state",
                "transition_history",
                "add_state_handler",
                "remove_state_handler",
                "clear_handlers",
                "get_transitions_since",
                "get_last_transition",
                "reset"
            ],
            "classes": {
                "State": {
                    "methods": [],
                    "docstring": "Possible states for autonomous components.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransition": {
                    "methods": [],
                    "docstring": "Record of a state transition.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [],
                    "docstring": "Error raised when a state transition is invalid.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateManager": {
                    "methods": [
                        "__init__",
                        "current_state",
                        "transition_history",
                        "add_state_handler",
                        "remove_state_handler",
                        "clear_handlers",
                        "get_transitions_since",
                        "get_last_transition",
                        "reset"
                    ],
                    "docstring": "Manages state transitions for autonomous components.\n\nThis class provides functionality to:\n- Track current state\n- Validate state transitions\n- Record transition history\n- Handle state-specific actions",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\autonomy\\test_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_test",
                "end_test",
                "add_error",
                "get_test_results"
            ],
            "classes": {
                "TestWatcher": {
                    "methods": [
                        "__init__",
                        "start_test",
                        "end_test",
                        "add_error",
                        "get_test_results"
                    ],
                    "docstring": "A class for monitoring test execution and collecting test results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\validation_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_agent_state"
            ],
            "classes": {
                "ValidationEngine": {
                    "methods": [
                        "__init__",
                        "validate_agent_state"
                    ],
                    "docstring": "Stub for ValidationEngine class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\autonomy\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\agent_tools\\agent_cellphone.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_injection_log",
                "_load_coords",
                "_check_cooldown",
                "_update_injection_log",
                "type_message",
                "broadcast_message",
                "force_resume_bridge",
                "mass_resume_bridge"
            ],
            "classes": {
                "AgentCellphone": {
                    "methods": [
                        "__init__",
                        "_init_injection_log",
                        "_load_coords",
                        "_check_cooldown",
                        "_update_injection_log",
                        "type_message",
                        "broadcast_message",
                        "force_resume_bridge",
                        "mass_resume_bridge"
                    ],
                    "docstring": "Direct high-priority message injector for agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "core\\autonomy\\agent_tools\\agent_onboarder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_status_file",
                "onboard_agent",
                "onboard_all_agents",
                "_update_status",
                "get_active_agents"
            ],
            "classes": {
                "AgentOnboarder": {
                    "methods": [
                        "__init__",
                        "_init_status_file",
                        "onboard_agent",
                        "onboard_all_agents",
                        "_update_status",
                        "get_active_agents"
                    ],
                    "docstring": "Handles agent onboarding and recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "core\\autonomy\\agent_tools\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_modified",
                "__init__",
                "start",
                "stop",
                "queue_status_check",
                "_check_agents",
                "_check_agent",
                "_recover_agent",
                "get_stalled_agents"
            ],
            "classes": {
                "StatusHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles agent status file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "queue_status_check",
                        "_check_agents",
                        "_check_agent",
                        "_recover_agent",
                        "get_stalled_agents"
                    ],
                    "docstring": "Handles recovery of stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "core\\autonomy\\agent_tools\\heartbeat_monitor.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "start",
                "stop",
                "_check_agents",
                "get_stalled_agents",
                "__init__",
                "on_modified"
            ],
            "classes": {
                "AgentHeartbeatMonitor": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_check_agents",
                        "get_stalled_agents"
                    ],
                    "docstring": "Monitors agent activity and detects stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles devlog file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\autonomy\\agent_tools\\high_priority_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_modified",
                "__init__",
                "start",
                "stop",
                "queue_agent",
                "_process_queue",
                "_process_agent",
                "_parse_intent",
                "_choose_target",
                "_format_prompt"
            ],
            "classes": {
                "OutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles outbox file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HighPriorityDispatcher": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "queue_agent",
                        "_process_queue",
                        "_process_agent",
                        "_parse_intent",
                        "_choose_target",
                        "_format_prompt"
                    ],
                    "docstring": "Orchestrates dynamic agent-to-agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "core\\autonomy\\agent_tools\\resume_controller.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "inject_prompt",
                "inject_task",
                "log_devlog",
                "force_resume",
                "check_agent_status"
            ],
            "classes": {
                "AgentResumeController": {
                    "methods": [
                        "__init__",
                        "inject_prompt",
                        "inject_task",
                        "log_devlog",
                        "force_resume",
                        "check_agent_status"
                    ],
                    "docstring": "Controls agent reactivation and task enforcement.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "core\\autonomy\\agent_tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\base\\autonomy_loop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AutonomyLoopRunner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Runner for executing autonomy loops.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\base\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\base\\file_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "on_modified",
                "on_deleted"
            ],
            "classes": {
                "BaseFileHandler": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "on_modified",
                        "on_deleted"
                    ],
                    "docstring": "Base class for file system event handlers.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\base\\response_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_response",
                "_validate_response",
                "__init__",
                "clear",
                "is_empty",
                "queue_size"
            ],
            "classes": {
                "ResponseLoopConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for response loops.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseMetadata": {
                    "methods": [],
                    "docstring": "Metadata for response processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseLoop": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "Base class for all response loop daemons.\n\nProvides common functionality for:\n- File polling and response processing\n- State management and transitions\n- Error handling and recovery\n- Resource cleanup",
                    "base_classes": [
                        null,
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseLoop": {
                    "methods": [
                        "__init__",
                        "clear",
                        "is_empty",
                        "queue_size"
                    ],
                    "docstring": "Response loop for agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "core\\autonomy\\base\\response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "release",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "ResourceManager": {
                    "methods": [
                        "__init__",
                        "release"
                    ],
                    "docstring": "Manages concurrent resource usage.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseErrorHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles response processing errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response processors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseLoopDaemon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response loop daemons.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\base\\runner_core.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "parse_test_failures"
            ],
            "classes": {
                "RunnerConfig": {
                    "methods": [],
                    "docstring": "Protocol for runner configuration.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RunnerCore": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "parse_test_failures"
                    ],
                    "docstring": "Base class for all runners with common functionality.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\base\\runner_lifecycle.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RunnerConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for runners.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RunnerLifecycleMixin": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mixin for managing runner lifecycle.\n\nThis mixin provides core functionality for:\n- Starting/stopping runners\n- Managing state transitions\n- Handling errors and retries\n- Resource cleanup",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\base\\state_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_metrics",
                "_setup_recovery",
                "_validate_backup",
                "get_recovery_events",
                "_validate_transition",
                "get_state",
                "get_metadata",
                "get_history",
                "is_stuck",
                "get_stuck_agents",
                "_update_metrics",
                "get_stats",
                "get_all_stats"
            ],
            "classes": {
                "AgentStateType": {
                    "methods": [],
                    "docstring": "Enumeration of possible agent states.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [],
                    "docstring": "Raised when a state transition is invalid.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateCorruptionError": {
                    "methods": [],
                    "docstring": "Raised when state data is corrupted.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseStateManager": {
                    "methods": [
                        "__init__",
                        "_setup_metrics",
                        "_setup_recovery",
                        "_validate_backup",
                        "get_recovery_events",
                        "_validate_transition",
                        "get_state",
                        "get_metadata",
                        "get_history",
                        "is_stuck",
                        "get_stuck_agents",
                        "_update_metrics",
                        "get_stats",
                        "get_all_stats"
                    ],
                    "docstring": "Base class for unified state management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "core\\autonomy\\base\\test_imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\base\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\bridge\\test_devlog_bridge_isolated.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send",
                "get_message"
            ],
            "classes": {
                "TestDevLogBridge": {
                    "methods": [
                        "__init__",
                        "send",
                        "get_message"
                    ],
                    "docstring": "Test bridge implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\config\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\error\\base.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "get_health_metrics",
                "manual_reset"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TrackedError": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Base class for tracked errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute",
                        "get_health_metrics",
                        "manual_reset"
                    ],
                    "docstring": "Circuit breaker for error rate monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\autonomy\\error\\error_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_error_severity",
                "_should_retry",
                "_calculate_retry_delay"
            ],
            "classes": {
                "RetryStrategy": {
                    "methods": [],
                    "docstring": "Retry strategies.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorHandler": {
                    "methods": [
                        "__init__",
                        "_get_error_severity",
                        "_should_retry",
                        "_calculate_retry_delay"
                    ],
                    "docstring": "Handles error recovery and retry logic.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\error\\error_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_report",
                "save_report",
                "_count_by_severity",
                "_count_by_agent",
                "_count_by_type"
            ],
            "classes": {
                "ErrorReporter": {
                    "methods": [
                        "__init__",
                        "generate_report",
                        "save_report",
                        "_count_by_severity",
                        "_count_by_agent",
                        "_count_by_type"
                    ],
                    "docstring": "Handles error reporting and notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\autonomy\\error\\error_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_error",
                "record_success",
                "can_execute",
                "get_error_summary"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "record_error",
                        "record_success",
                        "can_execute",
                        "get_error_summary"
                    ],
                    "docstring": "Tracks and manages error states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\error\\tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_error",
                "get_error_count",
                "get_recent_errors"
            ],
            "classes": {
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "track_error",
                        "get_error_count",
                        "get_recent_errors"
                    ],
                    "docstring": "Tracks and manages errors in the system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\error\\types.py": {
            "language": ".py",
            "functions": [
                "create_error",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__"
            ],
            "classes": {
                "ArchiveError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to archiving operations.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptFormatError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to prompt formatting.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentInactivityError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to agent inactivity.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogWriteError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to devlog writing.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConnectionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to bridge connection.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskExecutionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to task execution.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResourceExhaustionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to resource exhaustion.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to state transitions.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "core\\autonomy\\error\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\handlers\\base_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BaseHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all handlers with common functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\handlers\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes agent responses and applies code changes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\handlers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\handlers\\bridge\\base_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "on_modified"
            ],
            "classes": {
                "BaseBridgeHandler": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "on_modified"
                    ],
                    "docstring": "Base class for all bridge handlers with common functionality.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\autonomy\\handlers\\bridge\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes agent responses and applies code changes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\handlers\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\logging\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log",
                "info",
                "error",
                "warning",
                "debug"
            ],
            "classes": {
                "LogManager": {
                    "methods": [
                        "__init__",
                        "log",
                        "info",
                        "error",
                        "warning",
                        "debug"
                    ],
                    "docstring": "Stub implementation of LogManager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\autonomy\\logging\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\memory\\response_memory_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "is_processed",
                "track_processing",
                "_save_memory",
                "get_stats",
                "mark_processed"
            ],
            "classes": {
                "ResponseMemoryTracker": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "is_processed",
                        "track_processing",
                        "_save_memory",
                        "get_stats",
                        "mark_processed"
                    ],
                    "docstring": "Tracks processed messages to prevent duplicate processing.",
                    "base_classes": [
                        "BaseTracker"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\autonomy\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\memory\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "test_data_dir",
                "test_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\memory\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\processors\\factory.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\processors\\response.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AutonomyResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and validates responses in the autonomy system.",
                    "base_classes": [
                        "ResponseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\autonomy\\processors\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\runners\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\test_debug\\fix_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_analyze_failure",
                "_get_source_content",
                "_write_source_content",
                "_extract_missing_import",
                "_add_import_statement",
                "_extract_assertion_values",
                "_update_assertion",
                "_extract_error_pattern",
                "_apply_generic_fix",
                "_fix_type_error",
                "_fix_value_error",
                "_fix_attribute_error",
                "_fix_key_error"
            ],
            "classes": {
                "FixManager": {
                    "methods": [
                        "__init__",
                        "_analyze_failure",
                        "_get_source_content",
                        "_write_source_content",
                        "_extract_missing_import",
                        "_add_import_statement",
                        "_extract_assertion_values",
                        "_update_assertion",
                        "_extract_error_pattern",
                        "_apply_generic_fix",
                        "_fix_type_error",
                        "_fix_value_error",
                        "_fix_attribute_error",
                        "_fix_key_error"
                    ],
                    "docstring": "Manages test failure analysis and fixes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "core\\autonomy\\test_debug\\task_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "_get_working_tasks",
                "_get_future_tasks",
                "has_pending_changes",
                "_get_test_file"
            ],
            "classes": {
                "TaskManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "_get_working_tasks",
                        "_get_future_tasks",
                        "has_pending_changes",
                        "_get_test_file"
                    ],
                    "docstring": "Manages task creation and updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\autonomy\\test_debug\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\test_debug\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_validate_config",
                "get_path",
                "get_test_config",
                "get_fix_config",
                "update_config",
                "_deep_merge"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "get_path",
                        "get_test_config",
                        "get_fix_config",
                        "update_config",
                        "_deep_merge"
                    ],
                    "docstring": "Manages configuration loading and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\autonomy\\test_debug\\utils\\debug_utils.py": {
            "language": ".py",
            "functions": [
                "parse_test_failures",
                "create_fix_request",
                "save_fix_request",
                "load_fix_request",
                "archive_fix_request",
                "extract_agent_id"
            ],
            "classes": {
                "TestDebugUtils": {
                    "methods": [
                        "parse_test_failures",
                        "create_fix_request",
                        "save_fix_request",
                        "load_fix_request",
                        "archive_fix_request"
                    ],
                    "docstring": "Shared utilities for test debugging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebugUtils": {
                    "methods": [
                        "extract_agent_id"
                    ],
                    "docstring": "Utilities for test debugging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\autonomy\\test_debug\\utils\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "save_state",
                "increment_cycle",
                "add_failed_test",
                "add_passed_test",
                "add_processing_test",
                "remove_processing_test",
                "get_state"
            ],
            "classes": {
                "StateManager": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "save_state",
                        "increment_cycle",
                        "add_failed_test",
                        "add_passed_test",
                        "add_processing_test",
                        "remove_processing_test",
                        "get_state"
                    ],
                    "docstring": "Manages state persistence and retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\autonomy\\test_debug\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\utils\\async_file_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_file_info",
                "clear_cache",
                "last_check",
                "watched_files"
            ],
            "classes": {
                "AsyncFileWatcher": {
                    "methods": [
                        "__init__",
                        "get_file_info",
                        "clear_cache",
                        "last_check",
                        "watched_files"
                    ],
                    "docstring": "Asynchronously watches a directory for file changes.\n\nThis class provides functionality to monitor a directory for file changes\nusing polling. It maintains a cache of file modification times to detect\nchanges between polls.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\utils\\response_utils.py": {
            "language": ".py",
            "functions": [
                "load_response_file",
                "archive_response_file",
                "extract_agent_id_from_file",
                "validate_response",
                "__init__",
                "__init__"
            ],
            "classes": {
                "ResourceManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages resource allocation and limits.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseErrorHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles response processing errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\autonomy\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\autonomy\\validation\\engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_validator",
                "validate",
                "validate_required_fields",
                "validate_field_type"
            ],
            "classes": {
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Result of a validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationEngine": {
                    "methods": [
                        "__init__",
                        "add_validator",
                        "validate",
                        "validate_required_fields",
                        "validate_field_type"
                    ],
                    "docstring": "Engine for validating responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\autonomy\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_config",
                "__init__",
                "_load_config",
                "get"
            ],
            "classes": {
                "BaseBridge": {
                    "methods": [
                        "__init__",
                        "_validate_config"
                    ],
                    "docstring": "Base class for all bridge implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "get"
                    ],
                    "docstring": "Bridge configuration manager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge for interacting with ChatGPT API.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\daemon.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ResponseLoopDaemon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Daemon that monitors agent mailboxes and processes messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\inbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_metrics"
            ],
            "classes": {
                "BridgeInboxHandler": {
                    "methods": [
                        "__init__",
                        "get_metrics"
                    ],
                    "docstring": "Handles incoming messages in the bridge system.",
                    "base_classes": [
                        "BaseHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\bridge\\response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "_create_response_processor",
                "_get_response_files",
                "__init__",
                "on_created"
            ],
            "classes": {
                "ResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "_create_response_processor",
                        "_get_response_files"
                    ],
                    "docstring": "Monitors agent responses and generates new prompts for the ChatGPT bridge.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMailboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in agent mailbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\bridge\\run_response_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\base\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "get",
                "set",
                "__init__"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for bridge errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "get",
                        "set"
                    ],
                    "docstring": "Configuration for bridge implementations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\base\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "on_modified",
                "__init__",
                "_validate_data"
            ],
            "classes": {
                "BaseHandler": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "on_modified"
                    ],
                    "docstring": "Base class for all bridge handlers.",
                    "base_classes": [
                        "FileSystemEventHandler",
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeHandler": {
                    "methods": [
                        "__init__",
                        "_validate_data"
                    ],
                    "docstring": "Bridge-specific handler implementation.",
                    "base_classes": [
                        "BaseHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\base\\monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "start",
                "stop"
            ],
            "classes": {
                "BaseMonitor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge monitors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMonitor": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop"
                    ],
                    "docstring": "Bridge-specific monitor implementation.",
                    "base_classes": [
                        "BaseMonitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\bridge\\base\\processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "total_processed",
                "total_failed",
                "_update_metrics",
                "get_metrics"
            ],
            "classes": {
                "BridgeProcessor": {
                    "methods": [
                        "__init__",
                        "total_processed",
                        "total_failed",
                        "_update_metrics",
                        "get_metrics"
                    ],
                    "docstring": "Bridge-specific processor implementation.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\base\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_validate_required_fields",
                "_validate_field_types",
                "_validate_field_values"
            ],
            "classes": {
                "BaseValidator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge validators.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeValidator": {
                    "methods": [
                        "__init__",
                        "_validate_required_fields",
                        "_validate_field_types",
                        "_validate_field_values"
                    ],
                    "docstring": "Bridge-specific validator implementation.",
                    "base_classes": [
                        "BaseValidator"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\base\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\cache\\bridge_cache.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_cache_path",
                "add_interaction",
                "get_interactions",
                "get_average_latency"
            ],
            "classes": {
                "BridgeCache": {
                    "methods": [
                        "__init__",
                        "_get_cache_path",
                        "add_interaction",
                        "get_interactions",
                        "get_average_latency"
                    ],
                    "docstring": "Manages caching of bridge interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\cache\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\chatgpt\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "format_message",
                "format_system_message",
                "format_user_message",
                "format_assistant_message"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "format_message",
                        "format_system_message",
                        "format_user_message",
                        "format_assistant_message"
                    ],
                    "docstring": "Unified ChatGPT bridge implementation with enhanced features.",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\chatgpt\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_metrics",
                "_update_metrics",
                "_load_config",
                "cleanup",
                "_init_browser",
                "_navigate_to_chatgpt",
                "_wait_for_page_load",
                "_wait_for_response"
            ],
            "classes": {
                "ChatGPTBridgeLoop": {
                    "methods": [
                        "__init__",
                        "_init_metrics",
                        "_update_metrics",
                        "_load_config",
                        "cleanup",
                        "_init_browser",
                        "_navigate_to_chatgpt",
                        "_wait_for_page_load",
                        "_wait_for_response"
                    ],
                    "docstring": "Handles the communication loop with ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\bridge\\chatgpt\\prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_template",
                "add_template",
                "remove_template",
                "list_templates"
            ],
            "classes": {
                "PromptManager": {
                    "methods": [
                        "__init__",
                        "_get_template",
                        "add_template",
                        "remove_template",
                        "list_templates"
                    ],
                    "docstring": "Manages prompt generation and template handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\bridge\\chatgpt\\response_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "extract_reply",
                "parse_output"
            ],
            "classes": {
                "ChatGPTResponseHandler": {
                    "methods": [
                        "__init__",
                        "extract_reply",
                        "parse_output"
                    ],
                    "docstring": "Handles processing and validation of ChatGPT responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\bridge\\chatgpt\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\config\\loader.py": {
            "language": ".py",
            "functions": [
                "load_config",
                "_load_mode_config",
                "_load_agent_config",
                "_merge_configs",
                "_validate_config",
                "save_agent_config",
                "deep_merge",
                "deep_merge",
                "__init__",
                "load_config",
                "_load_mode_config",
                "_load_agent_config",
                "_merge_configs",
                "_validate_config",
                "save_agent_config",
                "deep_merge"
            ],
            "classes": {
                "BridgeMode": {
                    "methods": [],
                    "docstring": "Bridge operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_mode_config",
                        "_load_agent_config",
                        "_merge_configs",
                        "_validate_config",
                        "save_agent_config"
                    ],
                    "docstring": "Loads and validates bridge configurations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "core\\bridge\\config\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\cursor\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge implementation for Cursor UI automation.",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\handlers\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created"
            ],
            "classes": {
                "BaseBridgeHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Base class for all bridge handlers.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\bridge\\handlers\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Coordinates communication between inbox and outbox handlers.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\handlers\\cursor_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles communication between agents and the Cursor IDE.",
                    "base_classes": [
                        "BaseHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\handlers\\inbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_response"
            ],
            "classes": {
                "BridgeInboxHandler": {
                    "methods": [
                        "__init__",
                        "write_response"
                    ],
                    "docstring": "Handles incoming messages from external sources and routes them to agent mailboxes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\bridge\\handlers\\inbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\handlers\\outbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_response",
                "get_metrics"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "write_response",
                        "get_metrics"
                    ],
                    "docstring": "Handles outgoing messages for the bridge system using agent-local mailboxes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\bridge\\handlers\\outbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\handlers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\logging\\logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_loggers",
                "log_message",
                "log_response",
                "log_metric",
                "log_health",
                "log_error",
                "get_logs"
            ],
            "classes": {
                "BridgeLogger": {
                    "methods": [
                        "__init__",
                        "_setup_loggers",
                        "log_message",
                        "log_response",
                        "log_metric",
                        "log_health",
                        "log_error",
                        "get_logs"
                    ],
                    "docstring": "Centralized logging for bridge operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\bridge\\logging\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\monitoring\\discord.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_color"
            ],
            "classes": {
                "EventType": {
                    "methods": [],
                    "docstring": "Types of events that can be sent to Discord.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DiscordHook": {
                    "methods": [
                        "__init__",
                        "_get_color"
                    ],
                    "docstring": "Handles Discord webhook integration for notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\bridge\\monitoring\\health.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "__init__",
                "_load_health",
                "_save_health",
                "is_healthy",
                "get_health_status"
            ],
            "classes": {
                "BridgeHealth": {
                    "methods": [
                        "__post_init__",
                        "to_dict"
                    ],
                    "docstring": "Bridge health status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMonitor": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_save_health",
                        "is_healthy",
                        "get_health_status"
                    ],
                    "docstring": "Monitors bridge health and status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\bridge\\monitoring\\metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update",
                "to_dict",
                "__init__",
                "update_metrics",
                "get_metrics"
            ],
            "classes": {
                "BridgeHealth": {
                    "methods": [
                        "__init__",
                        "update",
                        "to_dict"
                    ],
                    "docstring": "Tracks bridge health status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMetrics": {
                    "methods": [
                        "__init__",
                        "update_metrics",
                        "get_metrics"
                    ],
                    "docstring": "Tracks metrics for bridge operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\bridge\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\scripts\\run_response_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\scripts\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\bridge\\validation\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeValidator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Validator for bridge messages.",
                    "base_classes": [
                        "BaseValidator"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\bridge\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\captain\\captain.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_task"
            ],
            "classes": {
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Priority levels for tasks.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Task": {
                    "methods": [],
                    "docstring": "Represents a task to be executed by an agent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Captain": {
                    "methods": [
                        "__init__",
                        "create_task"
                    ],
                    "docstring": "Oversees agent coordination and task management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\captain\\task_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "_calculate_priority_score",
                "_is_task_ready",
                "get_scheduled_tasks"
            ],
            "classes": {
                "ScheduledTask": {
                    "methods": [],
                    "docstring": "Represents a task scheduled for execution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskScheduler": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_calculate_priority_score",
                        "_is_task_ready",
                        "get_scheduled_tasks"
                    ],
                    "docstring": "Manages task scheduling and prioritization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\captain\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\codex\\codex_quality_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_validation_prompt",
                "_log_judgment"
            ],
            "classes": {
                "CodexController": {
                    "methods": [
                        "__init__",
                        "_format_validation_prompt",
                        "_log_judgment"
                    ],
                    "docstring": "Quality control agent using headless Chrome and ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\codex\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\config\\bridge_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load",
                "save",
                "validate"
            ],
            "classes": {
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "load",
                        "save",
                        "validate"
                    ],
                    "docstring": "Configuration for Dream.OS bridges.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\config\\config_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "save_config",
                "get_config_path",
                "config_exists"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "save_config",
                        "get_config_path",
                        "config_exists"
                    ],
                    "docstring": "Manages configuration for the Dream.OS system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\config\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\cursor\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "type_text",
                "press_ctrl_s"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "type_text",
                        "press_ctrl_s"
                    ],
                    "docstring": "Controls the Cursor IDE for applying code changes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\discord_bot\\activity.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ActivityType": {
                    "methods": [],
                    "docstring": "Discord activity types.",
                    "base_classes": [
                        "IntEnum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "core\\discord_bot\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\errors\\bridge_errors.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "BridgeError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Base exception for bridge-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\errors\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\gpt_router\\bridge_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log"
            ],
            "classes": {
                "BridgeLogger": {
                    "methods": [
                        "__init__",
                        "log"
                    ],
                    "docstring": "Simple JSON line logger.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\gpt_router\\cli.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\gpt_router\\navigator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__iter__",
                "__next__"
            ],
            "classes": {
                "ConversationNavigator": {
                    "methods": [
                        "__init__",
                        "__iter__",
                        "__next__"
                    ],
                    "docstring": "Cycle through conversation URLs.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\gpt_router\\prompt_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_conversation"
            ],
            "classes": {
                "ChatGPTPromptEngine": {
                    "methods": [
                        "__init__",
                        "process_conversation"
                    ],
                    "docstring": "Orchestrates prompt delivery and response collection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\gpt_router\\prompt_router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_profile",
                "decide_prompt"
            ],
            "classes": {
                "PromptRouter": {
                    "methods": [
                        "__init__",
                        "_load_profile",
                        "decide_prompt"
                    ],
                    "docstring": "Decide which prompt and GPT profile to use.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\gpt_router\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CodexValidator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Check responses for hallucinations and format errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\gpt_router\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\gpt_router\\profiles\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\handlers\\handler_utils.py": {
            "language": ".py",
            "functions": [
                "structured_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\handlers\\response_processor_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_processor"
            ],
            "classes": {
                "ResponseProcessorFactory": {
                    "methods": [
                        "__init__",
                        "create_processor"
                    ],
                    "docstring": "Factory for creating response processors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\handlers\\unified_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_operation"
            ],
            "classes": {
                "UnifiedHandler": {
                    "methods": [
                        "__init__",
                        "log_operation"
                    ],
                    "docstring": "Base class for all handlers in the system.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\handlers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\handlers\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "event_loop",
                "test_dir",
                "test_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\handlers\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\integration\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_bridge",
                "_create_processor",
                "_create_response"
            ],
            "classes": {
                "BridgeIntegration": {
                    "methods": [
                        "__init__",
                        "_create_bridge",
                        "_create_processor",
                        "_create_response"
                    ],
                    "docstring": "Bridge integration facade.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\integrations\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Main service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\integrations\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\io\\atomic.py": {
            "language": ".py",
            "functions": [
                "safe_read",
                "safe_write"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\io\\json_ops.py": {
            "language": ".py",
            "functions": [
                "read_json",
                "write_json",
                "read_json",
                "write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "core\\io\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\agent_logger.py": {
            "language": ".py",
            "functions": [
                "get_logger",
                "__init__",
                "log",
                "_create_inbox_message",
                "get_log",
                "clear_log"
            ],
            "classes": {
                "AgentLogger": {
                    "methods": [
                        "__init__",
                        "log",
                        "_create_inbox_message",
                        "get_log",
                        "clear_log"
                    ],
                    "docstring": "Handles agent development logging and Discord notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "core\\logging\\log_config.py": {
            "language": ".py",
            "functions": [
                "get_log_path",
                "get_metrics_path",
                "get_retention_date",
                "setup_logging",
                "should_log",
                "from_string",
                "__post_init__",
                "to_dict",
                "from_dict",
                "save",
                "load",
                "__str__",
                "__repr__"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [
                        "should_log",
                        "from_string"
                    ],
                    "docstring": "Standardized log levels for Dream.OS logging system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict",
                        "save",
                        "load",
                        "__str__",
                        "__repr__"
                    ],
                    "docstring": "Configuration for logging system.\n\nThis is the unified configuration class that consolidates all logging settings\nacross Dream.OS. It supports both simple and advanced logging configurations.\n\nBasic usage:\n    config = LogConfig(level=LogLevel.INFO)\n    \nAdvanced usage:\n    config = LogConfig(\n        level=LogLevel.DEBUG,\n        log_dir=\"logs\",\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        max_file_size=10 * 1024 * 1024,\n        backup_count=5,\n        max_age_days=7,\n        platforms={\n            \"system\": \"system.log\",\n            \"agent\": \"agent.log\"\n        }\n    )",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\logging\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "configure",
                "_setup_logging",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "get_metrics",
                "shutdown"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Log levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [],
                    "docstring": "Log configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__init__",
                        "configure",
                        "_setup_logging",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "get_metrics",
                        "shutdown"
                    ],
                    "docstring": "Manages logging for the Dream.OS system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\logging\\log_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_log_path",
                "_get_handle_key",
                "_get_file_handle",
                "write_log",
                "read_logs",
                "clear_log",
                "close"
            ],
            "classes": {
                "LogWriter": {
                    "methods": [
                        "__init__",
                        "_get_log_path",
                        "_get_handle_key",
                        "_get_file_handle",
                        "write_log",
                        "read_logs",
                        "clear_log",
                        "close"
                    ],
                    "docstring": "Thread-safe log writer with proper file locking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\logging\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\agent_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentBridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles communication between agents and the bridge system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\messaging\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "validate_message"
            ],
            "classes": {
                "BaseMessagingComponent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for messaging components with common functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseMessageHandler": {
                    "methods": [
                        "__init__",
                        "validate_message"
                    ],
                    "docstring": "Base class for message handlers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\messaging\\bridge_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_enhance_prompt",
                "get_health_status",
                "get_agent_responses"
            ],
            "classes": {
                "BridgeIntegration": {
                    "methods": [
                        "__init__",
                        "_enhance_prompt",
                        "get_health_status",
                        "get_agent_responses"
                    ],
                    "docstring": "Core integration for ChatGPT bridge functionality.\n\nThis class provides a high-level interface for agents to interact with ChatGPT\nthrough the bridge system. It handles message routing, response tracking,\nand health monitoring.\n\nAttributes:\n    bridge: Core ChatGPT bridge instance\n    queue: Request queue for managing messages\n    health: Health monitoring system\n    tracker: Response tracking system\n    config: Bridge configuration",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\messaging\\captain_phone.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "reset_singleton",
                "send_message",
                "broadcast_message",
                "get_messages",
                "acknowledge_message",
                "_monitor_response",
                "_save_response",
                "_get_all_agents",
                "clear_messages"
            ],
            "classes": {
                "CaptainPhone": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "reset_singleton",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "acknowledge_message",
                        "_monitor_response",
                        "_save_response",
                        "_get_all_agents",
                        "clear_messages"
                    ],
                    "docstring": "Captain phone for managing agent communications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\messaging\\cell_phone.py": {
            "language": ".py",
            "functions": [
                "validate_phone_number",
                "format_phone_number",
                "__init__",
                "_load_queue",
                "_save_queue",
                "add_message",
                "get_messages",
                "clear_queue",
                "__init__",
                "_load_coordinates",
                "__new__",
                "__init__",
                "reset_singleton",
                "broadcast_message"
            ],
            "classes": {
                "MessageMode": {
                    "methods": [],
                    "docstring": "Message delivery modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageQueue": {
                    "methods": [
                        "__init__",
                        "_load_queue",
                        "_save_queue",
                        "add_message",
                        "get_messages",
                        "clear_queue"
                    ],
                    "docstring": "Queue for storing and retrieving messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CellPhone": {
                    "methods": [
                        "__init__",
                        "_load_coordinates"
                    ],
                    "docstring": "Handles injecting prompts into agent conversations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CaptainPhone": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "reset_singleton",
                        "broadcast_message"
                    ],
                    "docstring": "Manages messaging for the captain agent.",
                    "base_classes": [
                        "CellPhone"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\messaging\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_health",
                "_update_health",
                "start",
                "stop",
                "_process_request",
                "_worker_loop",
                "_ensure_valid_session",
                "_handle_login",
                "_launch_browser",
                "_send_prompt",
                "_focus_cursor_window",
                "_paste_to_cursor",
                "_load_pending_requests",
                "_save_pending_requests",
                "_worker_loop"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_update_health",
                        "start",
                        "stop",
                        "_process_request",
                        "_worker_loop",
                        "_ensure_valid_session",
                        "_handle_login",
                        "_launch_browser",
                        "_send_prompt",
                        "_focus_cursor_window",
                        "_paste_to_cursor",
                        "_load_pending_requests",
                        "_save_pending_requests",
                        "_worker_loop"
                    ],
                    "docstring": "Manages communication between Dream.OS agents and ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "core\\messaging\\common.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "from_dict",
                "sender_id",
                "to_dict",
                "from_dict",
                "validate"
            ],
            "classes": {
                "MessageContext": {
                    "methods": [
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Context for message processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Message": {
                    "methods": [
                        "sender_id",
                        "to_dict",
                        "from_dict",
                        "validate"
                    ],
                    "docstring": "Base message structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\messaging\\enums.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "MessageMode": {
                    "methods": [],
                    "docstring": "Modes for message delivery.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessagePriority": {
                    "methods": [],
                    "docstring": "Priority levels for messages.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageType": {
                    "methods": [],
                    "docstring": "Types of messages in the system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageStatus": {
                    "methods": [],
                    "docstring": "Message delivery and processing status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\history.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_history",
                "_save_history"
            ],
            "classes": {
                "PersistentMessageHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history"
                    ],
                    "docstring": "Persistent message history implementation.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\messaging\\message.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_agent_status",
                "_save_agent_status",
                "_load_agent_status",
                "is_valid_message",
                "sanitize_filename",
                "handle_corrupted_inbox",
                "send_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "get_agent_status",
                "update_agent_status"
            ],
            "classes": {
                "MessageValidationError": {
                    "methods": [],
                    "docstring": "Raised when message validation fails.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_init_agent_status",
                        "_save_agent_status",
                        "_load_agent_status",
                        "is_valid_message",
                        "sanitize_filename",
                        "handle_corrupted_inbox",
                        "send_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "get_agent_status",
                        "update_agent_status"
                    ],
                    "docstring": "Handles message routing and delivery between agents with security validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\messaging\\message_loop.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageLoop": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Asynchronous message loop for processing messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\messaging\\message_processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_messages",
                "_save_messages",
                "register_handler",
                "unregister_handler"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__",
                        "_load_messages",
                        "_save_messages",
                        "register_handler",
                        "unregister_handler"
                    ],
                    "docstring": "Processes and routes messages between components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\messaging\\message_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_queue",
                "_get_lock",
                "enqueue",
                "dequeue",
                "peek",
                "clear",
                "subscribe",
                "unsubscribe",
                "_notify_subscribers",
                "get_queue_size",
                "get_all_messages"
            ],
            "classes": {
                "MessageQueue": {
                    "methods": [
                        "__init__",
                        "_get_queue",
                        "_get_lock",
                        "enqueue",
                        "dequeue",
                        "peek",
                        "clear",
                        "subscribe",
                        "unsubscribe",
                        "_notify_subscribers",
                        "get_queue_size",
                        "get_all_messages"
                    ],
                    "docstring": "Thread-safe message queue with priority support.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "core\\messaging\\message_record.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_message",
                "get_history",
                "clear_history"
            ],
            "classes": {
                "MessageRecord": {
                    "methods": [
                        "__init__",
                        "record_message",
                        "get_history",
                        "clear_history"
                    ],
                    "docstring": "Tracks message history and persistence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\messaging\\message_system.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "format_content",
                "to_dict",
                "from_dict",
                "enqueue",
                "get_messages",
                "acknowledge",
                "__init__",
                "_load_queue",
                "_save_queue",
                "enqueue",
                "get_messages",
                "acknowledge",
                "record",
                "get_history",
                "__init__",
                "_load_history",
                "_save_history",
                "record",
                "get_history",
                "route",
                "__init__",
                "route",
                "__init__",
                "send",
                "receive",
                "acknowledge",
                "get_history"
            ],
            "classes": {
                "MessageRecord": {
                    "methods": [
                        "__post_init__",
                        "format_content",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Standardized message record format.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageQueue": {
                    "methods": [
                        "enqueue",
                        "get_messages",
                        "acknowledge"
                    ],
                    "docstring": "Abstract base class for message queue implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_load_queue",
                        "_save_queue",
                        "enqueue",
                        "get_messages",
                        "acknowledge"
                    ],
                    "docstring": "Persistent message queue using JSON storage.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHistory": {
                    "methods": [
                        "record",
                        "get_history"
                    ],
                    "docstring": "Abstract base class for message history implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JsonMessageHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history",
                        "record",
                        "get_history"
                    ],
                    "docstring": "Message history implementation using JSON storage.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageRouter": {
                    "methods": [
                        "route"
                    ],
                    "docstring": "Abstract base class for message routing implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMessageRouter": {
                    "methods": [
                        "__init__",
                        "route"
                    ],
                    "docstring": "Message router implementation for agent communication.",
                    "base_classes": [
                        "MessageRouter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageSystem": {
                    "methods": [
                        "__init__",
                        "send",
                        "receive",
                        "acknowledge",
                        "get_history"
                    ],
                    "docstring": "Unified message handling system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 56
        },
        "core\\messaging\\messaging.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "Message": {
                    "methods": [],
                    "docstring": "Represents a message with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\phones.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "send_message",
                "_monitor_response",
                "_save_response",
                "broadcast_message",
                "_get_all_agents"
            ],
            "classes": {
                "Phone": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base phone interface for agent communication.",
                    "base_classes": [
                        "BaseMessagingComponent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CaptainPhone": {
                    "methods": [
                        "__init__",
                        "send_message",
                        "_monitor_response",
                        "_save_response",
                        "broadcast_message",
                        "_get_all_agents"
                    ],
                    "docstring": "Special phone interface for the captain to communicate with agents.",
                    "base_classes": [
                        "Phone"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\messaging\\pipeline.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_message"
            ],
            "classes": {
                "MessagePipeline": {
                    "methods": [
                        "__init__",
                        "_validate_message"
                    ],
                    "docstring": "Handles the processing of messages through the system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\messaging\\queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_queues",
                "_save_queue"
            ],
            "classes": {
                "PersistentMessageQueue": {
                    "methods": [
                        "__init__",
                        "_load_queues",
                        "_save_queue"
                    ],
                    "docstring": "Persistent message queue implementation.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\messaging\\request_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_requests",
                "_save_requests",
                "add_request",
                "update_request",
                "get_pending_requests",
                "clear_completed"
            ],
            "classes": {
                "Request": {
                    "methods": [],
                    "docstring": "Request in the queue.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RequestQueue": {
                    "methods": [
                        "__init__",
                        "_load_requests",
                        "_save_requests",
                        "add_request",
                        "update_request",
                        "get_pending_requests",
                        "clear_completed"
                    ],
                    "docstring": "Manages request queue for bridges.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\messaging\\response_collector.py": {
            "language": ".py",
            "functions": [
                "collect_response",
                "load_regions",
                "save_regions",
                "__init__",
                "load_template",
                "detect_copy_button",
                "click_copy_button",
                "__init__",
                "capture",
                "is_stable",
                "try_copy_response",
                "__init__",
                "_load_agent_regions",
                "_find_cursor_windows",
                "_get_cursor_text",
                "start_collecting",
                "_save_response",
                "get_saved_responses",
                "get_latest_response",
                "clear_responses"
            ],
            "classes": {
                "CopyButtonDetector": {
                    "methods": [
                        "__init__",
                        "load_template",
                        "detect_copy_button",
                        "click_copy_button"
                    ],
                    "docstring": "Detects and interacts with the copy button in Cursor.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRegion": {
                    "methods": [
                        "__init__",
                        "capture",
                        "is_stable",
                        "try_copy_response"
                    ],
                    "docstring": "Defines a region for monitoring agent responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseCollector": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_find_cursor_windows",
                        "_get_cursor_text",
                        "start_collecting",
                        "_save_response",
                        "get_saved_responses",
                        "get_latest_response",
                        "clear_responses"
                    ],
                    "docstring": "Collects and saves Cursor agent responses for SWARM.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 37
        },
        "core\\messaging\\response_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_agent_dir",
                "_get_response_path",
                "_load_responses",
                "enqueue_response",
                "update_response_state",
                "archive_response",
                "get_pending_responses",
                "cleanup_old_responses"
            ],
            "classes": {
                "ResponseState": {
                    "methods": [],
                    "docstring": "Response state enumeration.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseQueue": {
                    "methods": [
                        "__init__",
                        "_get_agent_dir",
                        "_get_response_path",
                        "_load_responses",
                        "enqueue_response",
                        "update_response_state",
                        "archive_response",
                        "get_pending_responses",
                        "cleanup_old_responses"
                    ],
                    "docstring": "Thread-safe response queue with persistence and state tracking.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\messaging\\response_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentResponseTracker": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Tracks agent responses and message history.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\messaging\\response_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "__init__",
                "start",
                "stop",
                "_watch_loop"
            ],
            "classes": {
                "ResponseEventHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handler for response file events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseWatcher": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_watch_loop"
                    ],
                    "docstring": "Watches response outbox and forwards responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\messaging\\router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_targets",
                "add_route",
                "add_pattern_route",
                "add_mode_handler",
                "add_default_handler",
                "remove_route",
                "remove_pattern_route",
                "remove_mode_handler",
                "remove_default_handler",
                "get_routes",
                "get_pattern_routes",
                "get_mode_handlers",
                "get_default_handlers"
            ],
            "classes": {
                "MessageRouter": {
                    "methods": [
                        "__init__",
                        "_get_targets",
                        "add_route",
                        "add_pattern_route",
                        "add_mode_handler",
                        "add_default_handler",
                        "remove_route",
                        "remove_pattern_route",
                        "remove_mode_handler",
                        "remove_default_handler",
                        "get_routes",
                        "get_pattern_routes",
                        "get_mode_handlers",
                        "get_default_handlers"
                    ],
                    "docstring": "Message router implementation.",
                    "base_classes": [
                        "MessageRouter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "core\\messaging\\types.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\ui.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "process_message",
                "initialize",
                "shutdown",
                "send_message",
                "get_status",
                "_handle_resume",
                "_handle_sync",
                "_handle_verify",
                "_handle_repair",
                "_handle_backup",
                "_handle_restore",
                "_handle_cleanup",
                "_handle_captain",
                "_handle_task",
                "_handle_integrate"
            ],
            "classes": {
                "MessageUI": {
                    "methods": [
                        "__post_init__",
                        "process_message",
                        "initialize",
                        "shutdown",
                        "send_message",
                        "get_status",
                        "_handle_resume",
                        "_handle_sync",
                        "_handle_verify",
                        "_handle_repair",
                        "_handle_backup",
                        "_handle_restore",
                        "_handle_cleanup",
                        "_handle_captain",
                        "_handle_task",
                        "_handle_integrate"
                    ],
                    "docstring": "UI handler for message processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "core\\messaging\\unified_message_system.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__new__",
                "__init__",
                "_setup_components",
                "_load_history",
                "_save_history"
            ],
            "classes": {
                "MessageQueue": {
                    "methods": [],
                    "docstring": "Abstract base class for message queue implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHistory": {
                    "methods": [],
                    "docstring": "Abstract base class for message history implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageRouter": {
                    "methods": [],
                    "docstring": "Abstract base class for message routing implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleRouter": {
                    "methods": [],
                    "docstring": "Simple message router implementation.",
                    "base_classes": [
                        "MessageRouter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleQueue": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Simple message queue implementation.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleHistory": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Simple message history implementation.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageSystem": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_setup_components",
                        "_load_history",
                        "_save_history"
                    ],
                    "docstring": "Unified message handling system for Dream.OS.",
                    "base_classes": [
                        "BaseMessagingComponent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\messaging\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\messaging\\utils\\core_utils.py": {
            "language": ".py",
            "functions": [
                "format_message",
                "parse_message",
                "validate_message",
                "get_message_type",
                "get_message_content",
                "get_message_timestamp",
                "format_timestamp",
                "write_json",
                "read_yaml",
                "ensure_directory_exists",
                "atomic_write",
                "safe_read"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "core\\messaging\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\metrics\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "increment",
                "gauge",
                "histogram",
                "get_metrics",
                "reset",
                "_get_key",
                "_save"
            ],
            "classes": {
                "BaseMetrics": {
                    "methods": [
                        "__init__",
                        "increment",
                        "gauge",
                        "histogram",
                        "get_metrics",
                        "reset",
                        "_get_key",
                        "_save"
                    ],
                    "docstring": "Base class for all metrics implementations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\metrics\\bridge_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_request",
                "record_success",
                "record_error",
                "get_metrics"
            ],
            "classes": {
                "BridgeMetrics": {
                    "methods": [
                        "__init__",
                        "record_request",
                        "record_success",
                        "record_error",
                        "get_metrics"
                    ],
                    "docstring": "Metrics for bridge operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\metrics\\file_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_read",
                "record_write",
                "record_error",
                "record_directory_operation"
            ],
            "classes": {
                "FileMetrics": {
                    "methods": [
                        "__init__",
                        "record_read",
                        "record_write",
                        "record_error",
                        "record_directory_operation"
                    ],
                    "docstring": "Metrics for file operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\metrics\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_log",
                "record_error",
                "record_rotation",
                "get_metrics"
            ],
            "classes": {
                "LogMetrics": {
                    "methods": [
                        "__init__",
                        "record_log",
                        "record_error",
                        "record_rotation",
                        "get_metrics"
                    ],
                    "docstring": "Metrics for logging operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\metrics\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\monitoring\\bridge_health.py": {
            "language": ".py",
            "functions": [
                "check_health",
                "update_metrics",
                "__init__",
                "check_health",
                "update_metrics"
            ],
            "classes": {
                "BridgeHealthMonitor": {
                    "methods": [
                        "__init__",
                        "check_health",
                        "update_metrics"
                    ],
                    "docstring": "Monitors the health of the bridge system.",
                    "base_classes": [
                        "BaseHealthMonitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\monitoring\\metrics.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\monitoring\\metrics_server.py": {
            "language": ".py",
            "functions": [
                "_load_metrics",
                "metrics",
                "start"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "metrics",
                    "method": "ROUTE",
                    "path": "/metrics"
                }
            ],
            "complexity": 3
        },
        "core\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\monitoring\\health\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_health",
                "_save_health",
                "update_health",
                "is_healthy",
                "get_health_status"
            ],
            "classes": {
                "HealthStatus": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Health status data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseHealthMonitor": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_save_health",
                        "update_health",
                        "is_healthy",
                        "get_health_status"
                    ],
                    "docstring": "Base class for health monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\monitoring\\health\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\nlp\\keyword_extract.py": {
            "language": ".py",
            "functions": [
                "extract",
                "__init__",
                "extract"
            ],
            "classes": {
                "KeywordExtractor": {
                    "methods": [
                        "__init__",
                        "extract"
                    ],
                    "docstring": "Extracts keywords from text using frequency analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\nlp\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\response\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate",
                "to_dict",
                "is_valid",
                "__init__",
                "__init__",
                "_ensure_storage",
                "store",
                "retrieve"
            ],
            "classes": {
                "BaseResponse": {
                    "methods": [
                        "__init__",
                        "_validate",
                        "to_dict",
                        "is_valid"
                    ],
                    "docstring": "Base class for all response implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response processors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseMemory": {
                    "methods": [
                        "__init__",
                        "_ensure_storage",
                        "store",
                        "retrieve"
                    ],
                    "docstring": "Response memory manager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\response\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\resumer_v2\\agent_state_manager.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "_init_state",
                "_write_state_file",
                "_write_tasks_file",
                "_load_state",
                "_load_tasks",
                "validate_state",
                "validate_tasks"
            ],
            "classes": {
                "TaskStatusEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder for TaskStatus enum.",
                    "base_classes": [
                        "json.JSONEncoder"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStateManager": {
                    "methods": [
                        "__init__",
                        "_init_state",
                        "_write_state_file",
                        "_write_tasks_file",
                        "_load_state",
                        "_load_tasks",
                        "validate_state",
                        "validate_tasks"
                    ],
                    "docstring": "Manages agent state with event hooks and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\resumer_v2\\quantum_agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "QuantumAgentResumer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages agent state persistence and resumption.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\resumer_v2\\schemas.py": {
            "language": ".py",
            "functions": [
                "create_default_state"
            ],
            "classes": {
                "TaskData": {
                    "methods": [],
                    "docstring": "Schema for task data payload.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentState": {
                    "methods": [],
                    "docstring": "Schema for agent state.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "core\\resumer_v2\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\resumer_v2\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\security\\auth_manager.py": {
            "language": ".py",
            "functions": [
                "register_user",
                "authenticate",
                "validate_token",
                "get_user_info",
                "update_user_metadata",
                "assign_role",
                "remove_role",
                "save_users",
                "load_users",
                "is_locked_out",
                "record_failed_attempt",
                "__init__",
                "register_user",
                "authenticate",
                "validate_token",
                "get_user_info",
                "update_user_metadata",
                "assign_role",
                "remove_role",
                "is_locked_out",
                "record_failed_attempt",
                "save_users",
                "load_users"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "register_user",
                        "authenticate",
                        "validate_token",
                        "get_user_info",
                        "update_user_metadata",
                        "assign_role",
                        "remove_role",
                        "is_locked_out",
                        "record_failed_attempt",
                        "save_users",
                        "load_users"
                    ],
                    "docstring": "Manages authentication and authorization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 35
        },
        "core\\security\\identity_utils.py": {
            "language": ".py",
            "functions": [
                "generate_agent_id",
                "validate_password",
                "hash_password",
                "verify_password",
                "generate_token",
                "format_agent_name"
            ],
            "classes": {
                "IdentityUtils": {
                    "methods": [
                        "generate_agent_id",
                        "validate_password",
                        "hash_password",
                        "verify_password",
                        "generate_token",
                        "format_agent_name"
                    ],
                    "docstring": "Utility functions for identity management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\security\\security_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_default_config_path",
                "_load_config",
                "_validate_and_merge_config",
                "_save_config",
                "get_auth_config",
                "get_session_config",
                "get_identity_config",
                "update_config"
            ],
            "classes": {
                "SecurityConfig": {
                    "methods": [
                        "__init__",
                        "_get_default_config_path",
                        "_load_config",
                        "_validate_and_merge_config",
                        "_save_config",
                        "get_auth_config",
                        "get_session_config",
                        "get_identity_config",
                        "update_config"
                    ],
                    "docstring": "Manages security-related configuration settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\security\\session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_start_cleanup_thread",
                "create_session",
                "validate_session",
                "get_session",
                "update_session_metadata",
                "invalidate_session",
                "cleanup_expired_sessions",
                "save_sessions",
                "load_sessions",
                "cleanup_loop"
            ],
            "classes": {
                "SessionError": {
                    "methods": [],
                    "docstring": "Base class for session management errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "_start_cleanup_thread",
                        "create_session",
                        "validate_session",
                        "get_session",
                        "update_session_metadata",
                        "invalidate_session",
                        "cleanup_expired_sessions",
                        "save_sessions",
                        "load_sessions"
                    ],
                    "docstring": "Manages user and agent sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "core\\security\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\self_discovery\\journal.py": {
            "language": ".py",
            "functions": [
                "init_db",
                "calculate_relapse_risk",
                "add_entry",
                "log_coding_session",
                "get_today_stats",
                "__init__",
                "add_entry",
                "log_coding_session",
                "get_today_stats",
                "calculate_relapse_risk"
            ],
            "classes": {
                "Journal": {
                    "methods": [
                        "__init__",
                        "add_entry",
                        "log_coding_session",
                        "get_today_stats",
                        "calculate_relapse_risk"
                    ],
                    "docstring": "Journal class for managing self-discovery entries.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\self_discovery\\prompts.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\self_discovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\shared\\coordinate_manager.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "save_coordinates",
                "get_coordinates",
                "set_coordinates",
                "__init__",
                "_initialize_monitors",
                "_load_config",
                "_transform_coordinates",
                "_transform_coordinate_dict",
                "validate_coordinates",
                "has_duplicate_coordinates",
                "check_region_overlap",
                "get_agent_coordinates",
                "get_response_region",
                "get",
                "get_all",
                "get_overlap",
                "has_coordinates",
                "get_coordinates",
                "set_coordinates",
                "_save_config"
            ],
            "classes": {
                "CoordinateManager": {
                    "methods": [
                        "__init__",
                        "_initialize_monitors",
                        "_load_config",
                        "_transform_coordinates",
                        "_transform_coordinate_dict",
                        "validate_coordinates",
                        "has_duplicate_coordinates",
                        "check_region_overlap",
                        "get_agent_coordinates",
                        "get_response_region",
                        "get",
                        "get_all",
                        "get_overlap",
                        "has_coordinates",
                        "get_coordinates",
                        "set_coordinates",
                        "_save_config"
                    ],
                    "docstring": "Manages coordinates for UI automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 38
        },
        "core\\shared\\coordinate_utils.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "validate_coordinates",
                "has_duplicate_coordinates",
                "regions_overlap",
                "region_overlap"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "core\\shared\\persistent_queue.py": {
            "language": ".py",
            "functions": [
                "load_queue",
                "save_queue",
                "load_queue_file",
                "get_queue_size",
                "__init__",
                "_acquire_lock",
                "_release_lock",
                "_read_queue",
                "_write_queue",
                "_check_rate_limit",
                "get_queue_size",
                "get_message",
                "clear_queue",
                "enqueue",
                "put",
                "get",
                "get_status",
                "add_message",
                "clear_agent",
                "shutdown",
                "get_message_history",
                "clear_history",
                "set_test_mode"
            ],
            "classes": {
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_acquire_lock",
                        "_release_lock",
                        "_read_queue",
                        "_write_queue",
                        "_check_rate_limit",
                        "get_queue_size",
                        "get_message",
                        "clear_queue",
                        "enqueue",
                        "put",
                        "get",
                        "get_status",
                        "add_message",
                        "clear_agent",
                        "shutdown",
                        "get_message_history",
                        "clear_history",
                        "set_test_mode"
                    ],
                    "docstring": "A file-based persistent queue with file locking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "core\\shared\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\shared\\processors\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_metrics",
                "__str__"
            ],
            "classes": {
                "BaseProcessor": {
                    "methods": [
                        "__init__",
                        "get_metrics",
                        "__str__"
                    ],
                    "docstring": "Base class for all processors in the system.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\shared\\processors\\factory.py": {
            "language": ".py",
            "functions": [
                "register_processor",
                "create",
                "get_available_processors"
            ],
            "classes": {
                "ProcessorFactory": {
                    "methods": [
                        "register_processor",
                        "create",
                        "get_available_processors"
                    ],
                    "docstring": "Factory for creating processor instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\shared\\processors\\message.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and validates messages.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\shared\\processors\\mode.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ProcessorMode": {
                    "methods": [],
                    "docstring": "Processor operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "core\\shared\\processors\\response.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_metrics",
                "_update_metrics"
            ],
            "classes": {
                "ResponseProcessor": {
                    "methods": [
                        "__init__",
                        "_init_metrics",
                        "_update_metrics"
                    ],
                    "docstring": "Processes and validates responses.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\shared\\processors\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\shared\\validation\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate",
                "add_error",
                "get_errors",
                "clear_errors",
                "has_errors"
            ],
            "classes": {
                "ValidationError": {
                    "methods": [],
                    "docstring": "Base exception for validation errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "add_error",
                        "get_errors",
                        "clear_errors",
                        "has_errors"
                    ],
                    "docstring": "Base class for all validators in Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\shared\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\telemetry\\ws_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "send",
                "run_client"
            ],
            "classes": {
                "WSClient": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "send"
                    ],
                    "docstring": "WebSocket client for receiving telemetry updates.",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "core\\telemetry\\ws_server.py": {
            "language": ".py",
            "functions": [
                "start_server",
                "__init__"
            ],
            "classes": {
                "TelemetryServer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "WebSocket server for broadcasting agent telemetry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "core\\telemetry\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\agent_dashboard.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "_log_message"
            ],
            "classes": {
                "AgentDashboard": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "_log_message"
                    ],
                    "docstring": "Main dashboard window for agent monitoring and control.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ui\\agent_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_ui",
                "_add_placeholder_data",
                "refresh_agents",
                "_show_devlog",
                "_force_resume",
                "_onboard_agent",
                "_on_refresh",
                "closeEvent",
                "update_agent_status"
            ],
            "classes": {
                "AgentMonitor": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_add_placeholder_data",
                        "refresh_agents",
                        "_show_devlog",
                        "_force_resume",
                        "_onboard_agent",
                        "_on_refresh",
                        "closeEvent",
                        "update_agent_status"
                    ],
                    "docstring": "Widget for monitoring agent statuses.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\ui\\agent_status_panel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "update_status"
            ],
            "classes": {
                "AgentStatusPanel": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "update_status"
                    ],
                    "docstring": "Panel for displaying agent status information.",
                    "base_classes": [
                        "QFrame"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ui\\log_console.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "log"
            ],
            "classes": {
                "LogConsole": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "log"
                    ],
                    "docstring": "Console widget for displaying log messages.",
                    "base_classes": [
                        "QFrame"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ui\\log_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "refresh_logs",
                "clear_logs",
                "_show_details",
                "closeEvent"
            ],
            "classes": {
                "LogMonitor": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "refresh_logs",
                        "clear_logs",
                        "_show_details",
                        "closeEvent"
                    ],
                    "docstring": "GUI component for monitoring and displaying logs.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\ui\\main_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_ui",
                "_setup_menu"
            ],
            "classes": {
                "MainWindow": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_setup_menu"
                    ],
                    "docstring": "Main application window.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ui\\theme_manager.py": {
            "language": ".py",
            "functions": [
                "get_dialog_stylesheet",
                "get_dialog_stylesheet",
                "apply_dialog_theme",
                "is_dark_theme"
            ],
            "classes": {
                "ThemeManager": {
                    "methods": [
                        "get_dialog_stylesheet",
                        "apply_dialog_theme",
                        "is_dark_theme"
                    ],
                    "docstring": "Manages application-wide UI theming.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "core\\ui\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\__main__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\vscode\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\vscode\\src\\extension.ts": {
            "language": ".ts",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\vscode\\src\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ui\\ws\\client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "stop",
                "on_response"
            ],
            "classes": {
                "ResponseClient": {
                    "methods": [
                        "__init__",
                        "stop"
                    ],
                    "docstring": "WebSocket client for receiving responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\ui\\ws\\server.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "disconnect",
                "run"
            ],
            "classes": {
                "WebSocketManager": {
                    "methods": [
                        "__init__",
                        "disconnect",
                        "run"
                    ],
                    "docstring": "Manages WebSocket connections and broadcasting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ui\\ws\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\utils\\agent_helpers.py": {
            "language": ".py",
            "functions": [
                "load_agent_ownership",
                "determine_responsible_agent",
                "validate_agent_id",
                "build_agent_message",
                "parse_test_failures",
                "get_test_files",
                "get_agent_status",
                "validate_agent_config",
                "get_agent_status",
                "validate_agent_config"
            ],
            "classes": {
                "AgentError": {
                    "methods": [],
                    "docstring": "Stub for AgentError exception.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\utils\\agent_status.py": {
            "language": ".py",
            "functions": [
                "_ensure_status_file",
                "__init__",
                "_ensure_status_file"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [
                        "__init__",
                        "_ensure_status_file"
                    ],
                    "docstring": "Manages agent status tracking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\utils\\core_utils.py": {
            "language": ".py",
            "functions": [
                "add_error",
                "async_retry",
                "with_retry",
                "track_operation",
                "format_message",
                "parse_message",
                "get_timestamp",
                "format_duration",
                "is_valid_uuid",
                "get_errors",
                "clear_errors",
                "decorator",
                "safe_move",
                "load_json",
                "save_json",
                "format_timestamp",
                "generate_id",
                "read_yaml",
                "write_yaml",
                "atomic_write",
                "safe_read",
                "safe_write",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "ensure_directory_exists",
                "load_yaml",
                "transform_coordinates",
                "__init__",
                "add_error",
                "get_errors",
                "clear_errors",
                "decorator",
                "decorator",
                "decorator",
                "wrapped",
                "wrapper"
            ],
            "classes": {
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "add_error",
                        "get_errors",
                        "clear_errors"
                    ],
                    "docstring": "Track errors with context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "core\\utils\\exceptions.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "FileOpsError": {
                    "methods": [],
                    "docstring": "Base exception for file operations.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOpsPermissionError": {
                    "methods": [],
                    "docstring": "Raised when a file operation fails due to permission issues.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOpsIOError": {
                    "methods": [],
                    "docstring": "Raised when a file operation fails due to I/O errors.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DreamOSError": {
                    "methods": [],
                    "docstring": "Legacy Dream.OS error for compatibility.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base exception for bridge-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\utils\\file_ops.py": {
            "language": ".py",
            "functions": [
                "safe_mkdir",
                "ensure_dir",
                "clear_dir",
                "archive_file",
                "extract_agent_id",
                "backup_file",
                "safe_rmdir",
                "read_json",
                "write_json",
                "read_text",
                "write_text",
                "copy_file",
                "safe_delete",
                "__init__"
            ],
            "classes": {
                "AtomicFileManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages atomic file operations with backup support and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "read_json",
                "write_json",
                "ensure_dir",
                "safe_rmdir",
                "get_file_info",
                "restore_backup",
                "find_files",
                "rotate_file"
            ],
            "classes": {
                "FileError": {
                    "methods": [],
                    "docstring": "Stub for FileError exception.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\utils\\json_utils.py": {
            "language": ".py",
            "functions": [
                "validate_json",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "__init__"
            ],
            "classes": {
                "JsonValidationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Raised when JSON validation fails.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "core\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "configure_logging",
                "get_logger",
                "log_platform_event",
                "setup_logging",
                "get_events",
                "clear_events",
                "update_status",
                "get_status",
                "reset_status",
                "__init__",
                "log_event",
                "get_events",
                "clear_events",
                "__init__",
                "update_status",
                "get_status",
                "reset_status"
            ],
            "classes": {
                "PlatformEventLogger": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_events",
                        "clear_events"
                    ],
                    "docstring": "Log platform events with structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StatusTracker": {
                    "methods": [
                        "__init__",
                        "update_status",
                        "get_status",
                        "reset_status"
                    ],
                    "docstring": "Track platform operation status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [],
                    "docstring": "Stub for LogConfig class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\utils\\message_processor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and routes messages between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\utils\\metrics_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "labels",
                "inc",
                "log_event"
            ],
            "classes": {
                "Counter": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "labels",
                        "inc",
                        "log_event"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\utils\\region_finder.py": {
            "language": ".py",
            "functions": [
                "find_cursor_regions",
                "find_region",
                "get_region_center",
                "_load_regions",
                "_save_regions",
                "start_finding",
                "_set_start",
                "_set_end",
                "_quit",
                "get_region",
                "__init__",
                "_load_regions",
                "_save_regions",
                "start_finding",
                "_set_start",
                "_set_end",
                "_quit",
                "get_region"
            ],
            "classes": {
                "RegionError": {
                    "methods": [],
                    "docstring": "Stub exception for region finding errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RegionFinder": {
                    "methods": [
                        "__init__",
                        "_load_regions",
                        "_save_regions",
                        "start_finding",
                        "_set_start",
                        "_set_end",
                        "_quit",
                        "get_region"
                    ],
                    "docstring": "Helps find screen coordinates for UI regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\utils\\retry.py": {
            "language": ".py",
            "functions": [
                "with_retry",
                "decorator",
                "wrapper",
                "with_retry",
                "decorator",
                "wrapper",
                "wrapped",
                "decorator",
                "wrapper",
                "wrapped"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "core\\utils\\safe_io.py": {
            "language": ".py",
            "functions": [
                "safe_file_handle",
                "atomic_write",
                "safe_read",
                "safe_write"
            ],
            "classes": {
                "SafeIOError": {
                    "methods": [],
                    "docstring": "Legacy safe I/O error for compatibility.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\utils\\serialization.py": {
            "language": ".py",
            "functions": [
                "serialize",
                "deserialize",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "restore_backup",
                "read_yaml",
                "load_yaml",
                "write_yaml",
                "save_yaml"
            ],
            "classes": {
                "SerializationError": {
                    "methods": [],
                    "docstring": "Raised when serialization fails.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "core\\utils\\system_ops.py": {
            "language": ".py",
            "functions": [
                "with_retry",
                "transform_coordinates",
                "normalize_coordinates",
                "get_system_info",
                "decorator",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "core\\utils\\yaml_utils.py": {
            "language": ".py",
            "functions": [
                "read_yaml",
                "load_yaml",
                "write_yaml",
                "save_yaml",
                "validate_yaml"
            ],
            "classes": {
                "YamlError": {
                    "methods": [],
                    "docstring": "Exception raised for YAML-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\verification\\verify_beta.py": {
            "language": ".py",
            "functions": [
                "main",
                "__post_init__",
                "to_dict",
                "__init__",
                "_setup_logging",
                "check_mailboxes",
                "check_required_docs",
                "check_unit_tests",
                "check_orphans_and_dupes",
                "check_agent_state_files",
                "check_backlog_and_episodes",
                "check_autonomy_loop",
                "check_discord_commander",
                "check_discord_devlog",
                "check_social_integrations",
                "check_resumer",
                "check_onboarder",
                "check_chatgpt_bridge",
                "check_system_initialization",
                "check_autonomy_system",
                "check_runtime_directories",
                "check_test_coverage",
                "check_security_config",
                "check_monitoring_system",
                "check_error_handling",
                "check_coordinate_system",
                "check_cursor_agent_bridge",
                "check_agent_recovery",
                "check_response_collection",
                "_categorize_check",
                "_determine_severity",
                "_generate_recommendations",
                "run_verification",
                "generate_report"
            ],
            "classes": {
                "CheckResult": {
                    "methods": [
                        "__post_init__",
                        "to_dict"
                    ],
                    "docstring": "Result of a verification check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BetaVerifier": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "check_mailboxes",
                        "check_required_docs",
                        "check_unit_tests",
                        "check_orphans_and_dupes",
                        "check_agent_state_files",
                        "check_backlog_and_episodes",
                        "check_autonomy_loop",
                        "check_discord_commander",
                        "check_discord_devlog",
                        "check_social_integrations",
                        "check_resumer",
                        "check_onboarder",
                        "check_chatgpt_bridge",
                        "check_system_initialization",
                        "check_autonomy_system",
                        "check_runtime_directories",
                        "check_test_coverage",
                        "check_security_config",
                        "check_monitoring_system",
                        "check_error_handling",
                        "check_coordinate_system",
                        "check_cursor_agent_bridge",
                        "check_agent_recovery",
                        "check_response_collection",
                        "_categorize_check",
                        "_determine_severity",
                        "_generate_recommendations",
                        "run_verification",
                        "generate_report"
                    ],
                    "docstring": "Dream.OS Beta Deployment Validator.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 67
        },
        "core\\verification\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "__init__",
                "_load_platforms",
                "_load_post_log",
                "_save_post_log",
                "_compute_hash",
                "_format_devlog_content",
                "process_devlog",
                "start_watching",
                "cleanup"
            ],
            "classes": {
                "DevlogEvent": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles devlog file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogDispatcher": {
                    "methods": [
                        "__init__",
                        "_load_platforms",
                        "_load_post_log",
                        "_save_post_log",
                        "_compute_hash",
                        "_format_devlog_content",
                        "process_devlog",
                        "start_watching",
                        "cleanup"
                    ],
                    "docstring": "Dispatches devlog updates to social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\platform_login.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_load_credentials",
                "get_driver",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "login",
                "login_linkedin",
                "login_twitter",
                "login_facebook",
                "is_instagram_logged_in",
                "login_instagram",
                "login_reddit",
                "login_stocktwits",
                "run_all_logins",
                "cleanup",
                "fb_logged_in",
                "is_logged_in"
            ],
            "classes": {
                "LoginResult": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Result of a login attempt.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlatformLoginManager": {
                    "methods": [
                        "__init__",
                        "_load_credentials",
                        "get_driver",
                        "load_cookies",
                        "save_cookies",
                        "wait_for_manual_login",
                        "login",
                        "login_linkedin",
                        "login_twitter",
                        "login_facebook",
                        "is_instagram_logged_in",
                        "login_instagram",
                        "login_reddit",
                        "login_stocktwits",
                        "run_all_logins",
                        "cleanup"
                    ],
                    "docstring": "Manages social media platform logins with persistent sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 36
        },
        "social\\platform_poster.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_selectors",
                "_parse_selector_markdown",
                "_request_selector",
                "_get_selector",
                "_wait_for_element",
                "_ensure_logged_in",
                "post",
                "_post_to_twitter",
                "_post_to_reddit",
                "cleanup"
            ],
            "classes": {
                "SelectorError": {
                    "methods": [],
                    "docstring": "Raised when a selector fails to find an element.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlatformPoster": {
                    "methods": [
                        "__init__",
                        "_load_selectors",
                        "_parse_selector_markdown",
                        "_request_selector",
                        "_get_selector",
                        "_wait_for_element",
                        "_ensure_logged_in",
                        "post",
                        "_post_to_twitter",
                        "_post_to_reddit",
                        "cleanup"
                    ],
                    "docstring": "Handles posting to social media platforms using browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_refill",
                "acquire",
                "get_tokens",
                "__init__",
                "_load_state",
                "_save_state",
                "can_post",
                "get_wait_time",
                "get_platform_stats"
            ],
            "classes": {
                "RateLimitConfig": {
                    "methods": [],
                    "docstring": "Configuration for platform rate limits.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimitState": {
                    "methods": [],
                    "docstring": "Current state of rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TokenBucket": {
                    "methods": [
                        "__init__",
                        "_refill",
                        "acquire",
                        "get_tokens"
                    ],
                    "docstring": "Token bucket rate limiter implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "can_post",
                        "get_wait_time",
                        "get_platform_stats"
                    ],
                    "docstring": "Manages rate limits for multiple social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "social\\social_formatter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_templates",
                "_wrap",
                "_splice",
                "_format_links",
                "_format_hashtags",
                "_format_mentions",
                "_format_emojis",
                "_truncate_text",
                "_format_dream_core",
                "format_post",
                "format_title"
            ],
            "classes": {
                "SocialFormatter": {
                    "methods": [
                        "__init__",
                        "_load_templates",
                        "_wrap",
                        "_splice",
                        "_format_links",
                        "_format_hashtags",
                        "_format_mentions",
                        "_format_emojis",
                        "_truncate_text",
                        "_format_dream_core",
                        "format_post",
                        "format_title"
                    ],
                    "docstring": "Formats content for different social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\platform_strategy_base.py": {
            "language": ".py",
            "functions": [
                "retry_with_recovery",
                "decorator",
                "__init__",
                "_calculate_retry_delay",
                "_log_error_with_trace",
                "_track_operation_time",
                "_update_memory",
                "_log_action",
                "_handle_media_upload",
                "_validate_media",
                "get_memory_updates",
                "get_operation_stats",
                "is_logged_in",
                "login",
                "post",
                "create_post",
                "_create_post_impl",
                "_find_element",
                "_click_element",
                "_send_keys",
                "initialize",
                "wrapper"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_calculate_retry_delay",
                        "_log_error_with_trace",
                        "_track_operation_time",
                        "_update_memory",
                        "_log_action",
                        "_handle_media_upload",
                        "_validate_media",
                        "get_memory_updates",
                        "get_operation_stats",
                        "is_logged_in",
                        "login",
                        "post",
                        "create_post",
                        "_create_post_impl",
                        "_find_element",
                        "_click_element",
                        "_send_keys",
                        "initialize"
                    ],
                    "docstring": "Base class for all social media platform strategies.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 41
        },
        "social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\base.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BaseUtils": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base utilities for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "social\\utils\\base_log_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Standard log levels for consistent logging across the application.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\cleanup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_file_locked",
                "_force_close_handle",
                "_wait_for_file_unlock",
                "safe_remove",
                "cleanup_directory",
                "cleanup_temp_files"
            ],
            "classes": {
                "FileCleanup": {
                    "methods": [
                        "__init__",
                        "_is_file_locked",
                        "_force_close_handle",
                        "_wait_for_file_unlock",
                        "safe_remove",
                        "cleanup_directory",
                        "cleanup_temp_files"
                    ],
                    "docstring": "Handles safe file cleanup with proper lock handling.",
                    "base_classes": [
                        "BaseUtils"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\utils\\file_locks.py": {
            "language": ".py",
            "functions": [
                "get_file_lock",
                "ensure_log_dir",
                "lock_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "social\\utils\\json_settings.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "__getattr__",
                "__iter__",
                "items",
                "values",
                "__getitem__",
                "as_dict",
                "__init__",
                "reload",
                "convert"
            ],
            "classes": {
                "ConfigNode": {
                    "methods": [
                        "__post_init__",
                        "__getattr__",
                        "__iter__",
                        "items",
                        "values",
                        "__getitem__",
                        "as_dict"
                    ],
                    "docstring": "Data holder that provides attribute access like a dotmap.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JSONConfig": {
                    "methods": [
                        "__init__",
                        "reload"
                    ],
                    "docstring": "Load configuration from a JSON file.",
                    "base_classes": [
                        "ConfigNode"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "social\\utils\\log_batcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_batch_size",
                "is_running"
            ],
            "classes": {
                "LogBatcher": {
                    "methods": [
                        "__init__",
                        "get_batch_size",
                        "is_running"
                    ],
                    "docstring": "Handles batched logging operations for efficiency.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\utils\\log_cleanup.py": {
            "language": ".py",
            "functions": [
                "cleanup_old_logs",
                "rotate_log",
                "compress_old_logs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "social\\utils\\log_config.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "max_bytes",
                "file_path",
                "__eq__"
            ],
            "classes": {
                "LogConfig": {
                    "methods": [
                        "__post_init__",
                        "max_bytes",
                        "file_path",
                        "__eq__"
                    ],
                    "docstring": "Configuration for log files and settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\utils\\log_entry.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "from_dict",
                "_asdict",
                "__eq__",
                "__hash__",
                "__str__"
            ],
            "classes": {
                "LogEntry": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict",
                        "_asdict",
                        "__eq__",
                        "__hash__",
                        "__str__"
                    ],
                    "docstring": "Represents a log entry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\utils\\log_level.py": {
            "language": ".py",
            "functions": [
                "from_str",
                "__str__",
                "value"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [
                        "from_str",
                        "__str__",
                        "value"
                    ],
                    "docstring": "Logging levels for the system.\n\nAttributes:\n    DEBUG: Detailed information for debugging\n    INFO: General information about program execution\n    WARNING: Indicates a potential problem\n    ERROR: A more serious problem\n    CRITICAL: A critical problem that may prevent the program from running",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\utils\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "_setup_logging",
                "logger",
                "write_log",
                "_update_metrics",
                "get_metrics",
                "read_logs",
                "cleanup",
                "__del__",
                "set_level",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "rotate"
            ],
            "classes": {
                "LogEntry": {
                    "methods": [],
                    "docstring": "Represents a log entry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_setup_logging",
                        "logger",
                        "write_log",
                        "_update_metrics",
                        "get_metrics",
                        "read_logs",
                        "cleanup",
                        "__del__",
                        "set_level",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "rotate"
                    ],
                    "docstring": "Manages logging for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 34
        },
        "social\\utils\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "increment_logs",
                "increment_errors",
                "increment_warnings",
                "get_metrics"
            ],
            "classes": {
                "LogMetrics": {
                    "methods": [
                        "__init__",
                        "increment_logs",
                        "increment_errors",
                        "increment_warnings",
                        "get_metrics"
                    ],
                    "docstring": "Tracks metrics for logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\utils\\log_pipeline.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_entry",
                "flush",
                "start",
                "stop",
                "_flush_thread_func",
                "get_log_info",
                "read_logs",
                "cleanup_old_logs",
                "_cleanup_all_locks",
                "__del__"
            ],
            "classes": {
                "LogPipeline": {
                    "methods": [
                        "__init__",
                        "add_entry",
                        "flush",
                        "start",
                        "stop",
                        "_flush_thread_func",
                        "get_log_info",
                        "read_logs",
                        "cleanup_old_logs",
                        "_cleanup_all_locks",
                        "__del__"
                    ],
                    "docstring": "Handles batched log entry processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\utils\\log_rotator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "max_bytes",
                "check_rotation",
                "_rotate_file",
                "rotate_all",
                "_cleanup_old_backups",
                "get_rotation_info",
                "_get_file_size",
                "_get_file_age",
                "rotate"
            ],
            "classes": {
                "LogRotator": {
                    "methods": [
                        "__init__",
                        "max_bytes",
                        "check_rotation",
                        "_rotate_file",
                        "rotate_all",
                        "_cleanup_old_backups",
                        "get_rotation_info",
                        "_get_file_size",
                        "_get_file_age",
                        "rotate"
                    ],
                    "docstring": "Handles log file rotation and compression.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "social\\utils\\log_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "RotationConfig": {
                    "methods": [],
                    "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\log_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_log",
                "get_metrics",
                "get_summary",
                "clear_metrics"
            ],
            "classes": {
                "LogWriter": {
                    "methods": [
                        "__init__",
                        "write_log",
                        "get_metrics",
                        "get_summary",
                        "clear_metrics"
                    ],
                    "docstring": "Handles writing logs to files with proper locking and metrics tracking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\utils\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_files",
                "validate",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_files",
                        "validate",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for upload.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\utils\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_rate_limit",
                "set_rate_limit",
                "reset_limits",
                "get_remaining"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_rate_limit",
                        "set_rate_limit",
                        "reset_limits",
                        "get_remaining"
                    ],
                    "docstring": "Handles rate limiting for API operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\utils\\social_common.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "wait_for_element",
                "wait_for_clickable",
                "retry_click",
                "handle_login",
                "post_content",
                "verify_post_success",
                "validate_media",
                "upload_media"
            ],
            "classes": {
                "SocialConfig": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Configuration for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SocialMediaUtils": {
                    "methods": [
                        "__init__",
                        "wait_for_element",
                        "wait_for_clickable",
                        "retry_click",
                        "handle_login",
                        "post_content",
                        "verify_post_success",
                        "validate_media",
                        "upload_media"
                    ],
                    "docstring": "Common utilities for social media operations.",
                    "base_classes": [
                        "BaseUtils"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\discord_client.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}