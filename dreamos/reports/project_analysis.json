{
    "project_root": "D:\\SWARM\\Dream.OS",
    "num_files_analyzed": 11031,
    "analysis_details": {
        "analyze_dirs.py": {
            "language": ".py",
            "functions": [
                "analyze_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "conftest.py": {
            "language": ".py",
            "functions": [
                "safe_delete",
                "setup_test_environment",
                "clean_test_dirs",
                "test_env",
                "temp_dir",
                "test_config_dir",
                "test_file",
                "test_json",
                "test_yaml",
                "test_log_dir",
                "test_bridge_outbox",
                "test_config",
                "mock_message",
                "mock_agent",
                "MOCK_AGENT_CONFIG",
                "pytest_configure",
                "pytest_collection_modifyitems"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "find_duplicates.py": {
            "language": ".py",
            "functions": [
                "find_duplicates_and_empty_dirs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "fix_imports.py": {
            "language": ".py",
            "functions": [
                "fix_imports_in_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "fix_test_imports.py": {
            "language": ".py",
            "functions": [
                "fix_backslash_imports",
                "find_missing_imports",
                "process_test_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "move_tests.py": {
            "language": ".py",
            "functions": [
                "find_test_files",
                "get_target_path",
                "move_test_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "pyautogui.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "pygetwindow.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "run_overnight.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "run_scanner.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scan_missing_imports.py": {
            "language": ".py",
            "functions": [
                "try_import",
                "scan_test_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agent_tools\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agent_tools\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "agent_tools\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\core\\config\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agent_tools\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agent_tools\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "agent_tools\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "agent_tools\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agent_tools\\core\\monitor\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agent_tools\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "agent_tools\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "agent_tools\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agent_tools\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "agent_tools\\core\\utils\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agent_tools\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agent_tools\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agent_tools\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agent_tools\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agent_tools\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agent_tools\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "agent_tools\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agent_tools\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "agent_tools\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "agent_tools\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "agent_tools\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agent_tools\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "agent_tools\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agent_tools\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "agent_tools\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agent_tools\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agent_tools\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250611_175141\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\utils.py": {
            "language": ".py",
            "functions": [
                "load_yaml",
                "load_json",
                "save_yaml",
                "format_path",
                "validate_log_level",
                "validate_mode",
                "validate_path",
                "merge_configs",
                "validate_webhook_url",
                "validate_ip"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\migration\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\schema\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\utils\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\config\\utils\\validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_175141\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250611_175141\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250611_175141\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_175141\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_175141\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250611_175141\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_175141\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\devlog_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_tags",
                "_parse_entry",
                "on_modified",
                "__init__",
                "_load_config",
                "start",
                "stop"
            ],
            "classes": {
                "DevLogHandler": {
                    "methods": [
                        "__init__",
                        "_extract_tags",
                        "_parse_entry",
                        "on_modified"
                    ],
                    "docstring": "Handle devlog file changes.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogWatcher": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "start",
                        "stop"
                    ],
                    "docstring": "Watch and sync devlogs to Discord.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\discord_devlog.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DiscordDevlog": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Generalized tool for any agent to update their Discord devlog with narrative and interaction updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "_find_valid_files",
                "_detect_encoding",
                "_save_results"
            ],
            "classes": {
                "PathEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder that handles Path objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "_find_valid_files",
                        "_detect_encoding",
                        "_save_results"
                    ],
                    "docstring": "Main scanner class that orchestrates the analysis process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\weekly_digest.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_parse_content",
                "__init__",
                "_load_agent_logs",
                "_generate_agent_stats",
                "_generate_insights",
                "_format_insights",
                "_format_digest"
            ],
            "classes": {
                "DevlogEntry": {
                    "methods": [
                        "__init__",
                        "_parse_content"
                    ],
                    "docstring": "Represents a single devlog entry with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WeeklyDigest": {
                    "methods": [
                        "__init__",
                        "_load_agent_logs",
                        "_generate_agent_stats",
                        "_generate_insights",
                        "_format_insights",
                        "_format_digest"
                    ],
                    "docstring": "Generates weekly summaries of swarm activity.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\__main__.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\dry_scanner.py": {
            "language": ".py",
            "functions": [
                "generate_report",
                "main",
                "__init__",
                "hash_code",
                "normalize",
                "__init__",
                "analyze_file",
                "collect_definitions",
                "__init__",
                "analyze_test_file",
                "collect_test_patterns"
            ],
            "classes": {
                "CodeLocation": {
                    "methods": [],
                    "docstring": "Represents a location of code in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateGroup": {
                    "methods": [],
                    "docstring": "Represents a group of duplicate code elements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeHasher": {
                    "methods": [
                        "__init__",
                        "hash_code"
                    ],
                    "docstring": "Handles code normalization and hashing for duplicate detection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeNormalizer": {
                    "methods": [
                        "normalize"
                    ],
                    "docstring": "Normalizes code for comparison by removing whitespace and comments.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "collect_definitions"
                    ],
                    "docstring": "Analyzes Python AST for code patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_test_file",
                        "collect_test_patterns"
                    ],
                    "docstring": "Analyzes test files for patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_agent_patterns",
                "_identify_agent_pattern",
                "_extract_common_patterns",
                "_find_common_methods",
                "_find_common_attributes",
                "_is_stateful_agent",
                "_is_stateless_agent",
                "_is_reactive_agent",
                "_is_proactive_agent"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_agent_patterns",
                        "_identify_agent_pattern",
                        "_extract_common_patterns",
                        "_find_common_methods",
                        "_find_common_attributes",
                        "_is_stateful_agent",
                        "_is_stateless_agent",
                        "_is_reactive_agent",
                        "_is_proactive_agent"
                    ],
                    "docstring": "Analyzes code for agent patterns and behaviors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\architecture_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_circular_dependencies",
                "_build_dependency_graph",
                "_extract_imports",
                "_find_deep_inheritance",
                "_analyze_inheritance",
                "dfs"
            ],
            "classes": {
                "ArchitectureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_circular_dependencies",
                        "_build_dependency_graph",
                        "_extract_imports",
                        "_find_deep_inheritance",
                        "_analyze_inheritance"
                    ],
                    "docstring": "Analyzes architectural patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\bridge_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "BridgeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes bridge health and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\codex_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "CodexAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Codex validation metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_python_file",
                "_normalize_source",
                "_hash_code",
                "_get_ast_node_source",
                "_calculate_similarity",
                "_analyze_node",
                "_analyze_inheritance",
                "_get_base_name",
                "_check_diamond_inheritance",
                "_get_inheritance_chain",
                "analyze_file",
                "find_duplicates"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "_is_python_file",
                        "_normalize_source",
                        "_hash_code",
                        "_get_ast_node_source",
                        "_calculate_similarity",
                        "_analyze_node",
                        "_analyze_inheritance",
                        "_get_base_name",
                        "_check_diamond_inheritance",
                        "_get_inheritance_chain",
                        "analyze_file",
                        "find_duplicates"
                    ],
                    "docstring": "Analyzes Python code for patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\discord_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "DiscordAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Discord integration metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\feedback_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "FeedbackAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes feedback metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\processor_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_check_import",
                "fix_imports"
            ],
            "classes": {
                "ProcessorImportAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_check_import",
                        "fix_imports"
                    ],
                    "docstring": "Analyzes and fixes processor-related imports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_utility_functions",
                "_is_utility_function",
                "_find_large_classes",
                "_find_complex_methods",
                "_calculate_complexity"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_utility_functions",
                        "_is_utility_function",
                        "_find_large_classes",
                        "_find_complex_methods",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_common_patterns",
                "_find_naming_patterns",
                "_calculate_confidence",
                "_is_singleton",
                "_is_factory",
                "_is_observer",
                "_is_strategy",
                "_is_command"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_common_patterns",
                        "_find_naming_patterns",
                        "_calculate_confidence",
                        "_is_singleton",
                        "_is_factory",
                        "_is_observer",
                        "_is_strategy",
                        "_is_command"
                    ],
                    "docstring": "Analyzes code for themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\analyzers\\ui_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "UIAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes UI metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\core\\file_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_skip_path",
                "find_python_files",
                "generate_init_files"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__",
                        "_should_skip_path",
                        "find_python_files",
                        "generate_init_files"
                    ],
                    "docstring": "Manages file operations for the scanner.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\core\\narrative.py": {
            "language": ".py",
            "functions": [
                "generate"
            ],
            "classes": {
                "NarrativeGenerator": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates narrative summaries of scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\core\\report_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "ReportManager": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Manages report generation and saving.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\core\\scan_results.py": {
            "language": ".py",
            "functions": [
                "format_summary",
                "format_full_report",
                "summary"
            ],
            "classes": {
                "ScanResults": {
                    "methods": [
                        "format_summary",
                        "format_full_report",
                        "summary"
                    ],
                    "docstring": "Results from a project scan.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\reporters\\factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "save_results"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "save_results"
                    ],
                    "docstring": "Factory for creating reporter instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\reporters\\html_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results",
                "_format_duplicate",
                "_format_architectural_issue",
                "_format_agent_category",
                "_format_structural_insight",
                "_format_theme",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "HTMLReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "_format_duplicate",
                        "_format_architectural_issue",
                        "_format_agent_category",
                        "_format_structural_insight",
                        "_format_theme",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "HTML reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\reporters\\json_reporter.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "save_results",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "DateTimeEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder for datetime objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JSONReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "JSON reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\reporters\\reporter_factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "get_supported_types"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "get_supported_types"
                    ],
                    "docstring": "Factory for creating reporters.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\reporters\\text_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "TextReporter": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Text reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\scripts\\fix_processor_imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\utils\\ast_utils.py": {
            "language": ".py",
            "functions": [
                "parse_file",
                "get_function_defs",
                "get_class_defs",
                "get_imports",
                "get_docstrings"
            ],
            "classes": {
                "ASTUtils": {
                    "methods": [
                        "parse_file",
                        "get_function_defs",
                        "get_class_defs",
                        "get_imports",
                        "get_docstrings"
                    ],
                    "docstring": "Utilities for AST analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\utils\\code_utils.py": {
            "language": ".py",
            "functions": [
                "count_imports",
                "count_functions",
                "count_classes",
                "get_complexity",
                "get_docstring_coverage"
            ],
            "classes": {
                "CodeUtils": {
                    "methods": [
                        "count_imports",
                        "count_functions",
                        "count_classes",
                        "get_complexity",
                        "get_docstring_coverage"
                    ],
                    "docstring": "Utilities for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "get_python_files",
                "get_file_size",
                "get_file_lines",
                "read_file"
            ],
            "classes": {
                "FileUtils": {
                    "methods": [
                        "get_python_files",
                        "get_file_size",
                        "get_file_lines",
                        "read_file"
                    ],
                    "docstring": "Utilities for file operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\utils\\metrics_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_code_metrics",
                "aggregate_metrics",
                "format_metrics",
                "calculate_complexity_metrics",
                "calculate_maintainability_metrics"
            ],
            "classes": {
                "MetricsUtils": {
                    "methods": [
                        "calculate_code_metrics",
                        "aggregate_metrics",
                        "format_metrics",
                        "calculate_complexity_metrics",
                        "calculate_maintainability_metrics"
                    ],
                    "docstring": "Utility functions for metrics collection and analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\scanner\\utils\\pattern_utils.py": {
            "language": ".py",
            "functions": [
                "find_patterns",
                "find_duplicates",
                "find_long_functions",
                "find_complex_conditions"
            ],
            "classes": {
                "PatternUtils": {
                    "methods": [
                        "find_patterns",
                        "find_duplicates",
                        "find_long_functions",
                        "find_complex_conditions"
                    ],
                    "docstring": "Utilities for pattern matching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "temp_project_dir",
                "sample_file_analysis",
                "sample_project_analysis"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\tests\\overnight_test_runner.py": {
            "language": ".py",
            "functions": [
                "run",
                "__init__",
                "_load_test_analysis",
                "_load_high_scores",
                "_save_test_analysis",
                "_save_high_scores",
                "send_prompt_to_agent"
            ],
            "classes": {
                "TestRunner": {
                    "methods": [
                        "__init__",
                        "_load_test_analysis",
                        "_load_high_scores",
                        "_save_test_analysis",
                        "_save_high_scores",
                        "send_prompt_to_agent"
                    ],
                    "docstring": "Coordinates test running and agent debugging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_175141\\swarm_tools\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250611_175141\\utils\\duplicate_finder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_175141\\utils\\init_mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\utils\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_175141\\utils\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_175141\\utils\\retry_utils.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\utils.py": {
            "language": ".py",
            "functions": [
                "load_yaml",
                "load_json",
                "save_yaml",
                "format_path",
                "validate_log_level",
                "validate_mode",
                "validate_path",
                "merge_configs",
                "validate_webhook_url",
                "validate_ip"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\migration\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\schema\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\utils\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\config\\utils\\validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_235725\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250611_235725\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250611_235725\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_235725\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_235725\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250611_235725\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_235725\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\devlog_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_tags",
                "_parse_entry",
                "on_modified",
                "__init__",
                "_load_config",
                "start",
                "stop"
            ],
            "classes": {
                "DevLogHandler": {
                    "methods": [
                        "__init__",
                        "_extract_tags",
                        "_parse_entry",
                        "on_modified"
                    ],
                    "docstring": "Handle devlog file changes.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogWatcher": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "start",
                        "stop"
                    ],
                    "docstring": "Watch and sync devlogs to Discord.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\discord_devlog.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DiscordDevlog": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Generalized tool for any agent to update their Discord devlog with narrative and interaction updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "_find_valid_files",
                "_detect_encoding",
                "_save_results"
            ],
            "classes": {
                "PathEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder that handles Path objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "_find_valid_files",
                        "_detect_encoding",
                        "_save_results"
                    ],
                    "docstring": "Main scanner class that orchestrates the analysis process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\weekly_digest.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_parse_content",
                "__init__",
                "_load_agent_logs",
                "_generate_agent_stats",
                "_generate_insights",
                "_format_insights",
                "_format_digest"
            ],
            "classes": {
                "DevlogEntry": {
                    "methods": [
                        "__init__",
                        "_parse_content"
                    ],
                    "docstring": "Represents a single devlog entry with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WeeklyDigest": {
                    "methods": [
                        "__init__",
                        "_load_agent_logs",
                        "_generate_agent_stats",
                        "_generate_insights",
                        "_format_insights",
                        "_format_digest"
                    ],
                    "docstring": "Generates weekly summaries of swarm activity.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\__main__.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\dry_scanner.py": {
            "language": ".py",
            "functions": [
                "generate_report",
                "main",
                "__init__",
                "hash_code",
                "normalize",
                "__init__",
                "analyze_file",
                "collect_definitions",
                "__init__",
                "analyze_test_file",
                "collect_test_patterns"
            ],
            "classes": {
                "CodeLocation": {
                    "methods": [],
                    "docstring": "Represents a location of code in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateGroup": {
                    "methods": [],
                    "docstring": "Represents a group of duplicate code elements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeHasher": {
                    "methods": [
                        "__init__",
                        "hash_code"
                    ],
                    "docstring": "Handles code normalization and hashing for duplicate detection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeNormalizer": {
                    "methods": [
                        "normalize"
                    ],
                    "docstring": "Normalizes code for comparison by removing whitespace and comments.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "collect_definitions"
                    ],
                    "docstring": "Analyzes Python AST for code patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_test_file",
                        "collect_test_patterns"
                    ],
                    "docstring": "Analyzes test files for patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "export_chatgpt_context",
                "load_existing_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "_generate_narrative",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "save_results",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "load_existing_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "_generate_narrative",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type",
                        "save_results"
                    ],
                    "docstring": "A universal project scanner that analyzes code structure and generates reports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_agent_patterns",
                "_identify_agent_pattern",
                "_extract_common_patterns",
                "_find_common_methods",
                "_find_common_attributes",
                "_is_stateful_agent",
                "_is_stateless_agent",
                "_is_reactive_agent",
                "_is_proactive_agent"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_agent_patterns",
                        "_identify_agent_pattern",
                        "_extract_common_patterns",
                        "_find_common_methods",
                        "_find_common_attributes",
                        "_is_stateful_agent",
                        "_is_stateless_agent",
                        "_is_reactive_agent",
                        "_is_proactive_agent"
                    ],
                    "docstring": "Analyzes code for agent patterns and behaviors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\architecture_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_circular_dependencies",
                "_build_dependency_graph",
                "_extract_imports",
                "_find_deep_inheritance",
                "_analyze_inheritance",
                "dfs"
            ],
            "classes": {
                "ArchitectureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_circular_dependencies",
                        "_build_dependency_graph",
                        "_extract_imports",
                        "_find_deep_inheritance",
                        "_analyze_inheritance"
                    ],
                    "docstring": "Analyzes architectural patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\bridge_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "BridgeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes bridge health and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\codex_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "CodexAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Codex validation metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_python_file",
                "_normalize_source",
                "_hash_code",
                "_get_ast_node_source",
                "_calculate_similarity",
                "_analyze_node",
                "_analyze_inheritance",
                "_get_base_name",
                "_check_diamond_inheritance",
                "_get_inheritance_chain",
                "analyze_file",
                "find_duplicates"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "_is_python_file",
                        "_normalize_source",
                        "_hash_code",
                        "_get_ast_node_source",
                        "_calculate_similarity",
                        "_analyze_node",
                        "_analyze_inheritance",
                        "_get_base_name",
                        "_check_diamond_inheritance",
                        "_get_inheritance_chain",
                        "analyze_file",
                        "find_duplicates"
                    ],
                    "docstring": "Analyzes Python code for patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\discord_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "DiscordAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Discord integration metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\feedback_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "FeedbackAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes feedback metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\processor_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_check_import",
                "fix_imports"
            ],
            "classes": {
                "ProcessorImportAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_check_import",
                        "fix_imports"
                    ],
                    "docstring": "Analyzes and fixes processor-related imports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_utility_functions",
                "_is_utility_function",
                "_find_large_classes",
                "_find_complex_methods",
                "_calculate_complexity"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_utility_functions",
                        "_is_utility_function",
                        "_find_large_classes",
                        "_find_complex_methods",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_common_patterns",
                "_find_naming_patterns",
                "_calculate_confidence",
                "_is_singleton",
                "_is_factory",
                "_is_observer",
                "_is_strategy",
                "_is_command"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_common_patterns",
                        "_find_naming_patterns",
                        "_calculate_confidence",
                        "_is_singleton",
                        "_is_factory",
                        "_is_observer",
                        "_is_strategy",
                        "_is_command"
                    ],
                    "docstring": "Analyzes code for themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\analyzers\\ui_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "UIAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes UI metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\core\\file_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_skip_path",
                "find_python_files",
                "generate_init_files"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__",
                        "_should_skip_path",
                        "find_python_files",
                        "generate_init_files"
                    ],
                    "docstring": "Manages file operations for the scanner.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\core\\narrative.py": {
            "language": ".py",
            "functions": [
                "generate"
            ],
            "classes": {
                "NarrativeGenerator": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates narrative summaries of scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\core\\report_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "ReportManager": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Manages report generation and saving.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\core\\scan_results.py": {
            "language": ".py",
            "functions": [
                "format_summary",
                "format_full_report",
                "summary"
            ],
            "classes": {
                "ScanResults": {
                    "methods": [
                        "format_summary",
                        "format_full_report",
                        "summary"
                    ],
                    "docstring": "Results from a project scan.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\reporters\\factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "save_results"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "save_results"
                    ],
                    "docstring": "Factory for creating reporter instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\reporters\\html_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results",
                "_format_duplicate",
                "_format_architectural_issue",
                "_format_agent_category",
                "_format_structural_insight",
                "_format_theme",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "HTMLReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "_format_duplicate",
                        "_format_architectural_issue",
                        "_format_agent_category",
                        "_format_structural_insight",
                        "_format_theme",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "HTML reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\reporters\\json_reporter.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "save_results",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "DateTimeEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder for datetime objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JSONReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "JSON reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\reporters\\reporter_factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "get_supported_types"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "get_supported_types"
                    ],
                    "docstring": "Factory for creating reporters.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\reporters\\text_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "TextReporter": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Text reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\scripts\\fix_processor_imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\utils\\ast_utils.py": {
            "language": ".py",
            "functions": [
                "parse_file",
                "get_function_defs",
                "get_class_defs",
                "get_imports",
                "get_docstrings"
            ],
            "classes": {
                "ASTUtils": {
                    "methods": [
                        "parse_file",
                        "get_function_defs",
                        "get_class_defs",
                        "get_imports",
                        "get_docstrings"
                    ],
                    "docstring": "Utilities for AST analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\utils\\code_utils.py": {
            "language": ".py",
            "functions": [
                "count_imports",
                "count_functions",
                "count_classes",
                "get_complexity",
                "get_docstring_coverage"
            ],
            "classes": {
                "CodeUtils": {
                    "methods": [
                        "count_imports",
                        "count_functions",
                        "count_classes",
                        "get_complexity",
                        "get_docstring_coverage"
                    ],
                    "docstring": "Utilities for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "get_python_files",
                "get_file_size",
                "get_file_lines",
                "read_file"
            ],
            "classes": {
                "FileUtils": {
                    "methods": [
                        "get_python_files",
                        "get_file_size",
                        "get_file_lines",
                        "read_file"
                    ],
                    "docstring": "Utilities for file operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\utils\\metrics_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_code_metrics",
                "aggregate_metrics",
                "format_metrics",
                "calculate_complexity_metrics",
                "calculate_maintainability_metrics"
            ],
            "classes": {
                "MetricsUtils": {
                    "methods": [
                        "calculate_code_metrics",
                        "aggregate_metrics",
                        "format_metrics",
                        "calculate_complexity_metrics",
                        "calculate_maintainability_metrics"
                    ],
                    "docstring": "Utility functions for metrics collection and analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\scanner\\utils\\pattern_utils.py": {
            "language": ".py",
            "functions": [
                "find_patterns",
                "find_duplicates",
                "find_long_functions",
                "find_complex_conditions"
            ],
            "classes": {
                "PatternUtils": {
                    "methods": [
                        "find_patterns",
                        "find_duplicates",
                        "find_long_functions",
                        "find_complex_conditions"
                    ],
                    "docstring": "Utilities for pattern matching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "temp_project_dir",
                "sample_file_analysis",
                "sample_project_analysis"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\tests\\overnight_test_runner.py": {
            "language": ".py",
            "functions": [
                "run",
                "__init__",
                "_load_test_analysis",
                "_load_high_scores",
                "_save_test_analysis",
                "_save_high_scores",
                "send_prompt_to_agent"
            ],
            "classes": {
                "TestRunner": {
                    "methods": [
                        "__init__",
                        "_load_test_analysis",
                        "_load_high_scores",
                        "_save_test_analysis",
                        "_save_high_scores",
                        "send_prompt_to_agent"
                    ],
                    "docstring": "Coordinates test running and agent debugging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250611_235725\\swarm_tools\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250611_235725\\utils\\duplicate_finder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250611_235725\\utils\\init_mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\utils\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250611_235725\\utils\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250611_235725\\utils\\retry_utils.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000821\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250612_000821\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000821\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250612_000821\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000821\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000821\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250612_000821\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000821\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\agent_tools_restructure_20250612_000842\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000842\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\agent_tools_restructure_20250612_000842\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000842\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000842\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\agent_tools_restructure_20250612_000842\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000842\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\agent_tools_restructure_20250612_000842\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\agent_tools_restructure_20250612_000842\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000842\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\agent_tools_restructure_20250612_000842\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250611_233103\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250611_233103\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\config\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_233103\\config\\utils.py": {
            "language": ".py",
            "functions": [
                "load_yaml",
                "load_json",
                "save_yaml",
                "format_path",
                "validate_log_level",
                "validate_mode",
                "validate_path",
                "merge_configs",
                "validate_webhook_url",
                "validate_ip"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "backups\\import_update_20250611_233103\\config\\migration\\migrator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "migrate_file",
                "_load_ini",
                "_transform_config",
                "_format_paths",
                "save_migration_report"
            ],
            "classes": {
                "ConfigMigrator": {
                    "methods": [
                        "__init__",
                        "migrate_file",
                        "_load_ini",
                        "_transform_config",
                        "_format_paths",
                        "save_migration_report"
                    ],
                    "docstring": "Migrates legacy configurations to schema-compliant YAML.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\config\\schema\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_233103\\config\\utils\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\config\\utils\\validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250611_233103\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_233103\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_233103\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_233103\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_233103\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250611_233103\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_233103\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_233103\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_233103\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_233103\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_233103\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250611_233103\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250611_233103\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\devlog_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_tags",
                "_parse_entry",
                "on_modified",
                "__init__",
                "_load_config",
                "start",
                "stop"
            ],
            "classes": {
                "DevLogHandler": {
                    "methods": [
                        "__init__",
                        "_extract_tags",
                        "_parse_entry",
                        "on_modified"
                    ],
                    "docstring": "Handle devlog file changes.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogWatcher": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "start",
                        "stop"
                    ],
                    "docstring": "Watch and sync devlogs to Discord.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\discord_devlog.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DiscordDevlog": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Generalized tool for any agent to update their Discord devlog with narrative and interaction updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "_find_valid_files",
                "_detect_encoding",
                "_save_results"
            ],
            "classes": {
                "PathEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder that handles Path objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "_find_valid_files",
                        "_detect_encoding",
                        "_save_results"
                    ],
                    "docstring": "Main scanner class that orchestrates the analysis process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\weekly_digest.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_parse_content",
                "__init__",
                "_load_agent_logs",
                "_generate_agent_stats",
                "_generate_insights",
                "_format_insights",
                "_format_digest"
            ],
            "classes": {
                "DevlogEntry": {
                    "methods": [
                        "__init__",
                        "_parse_content"
                    ],
                    "docstring": "Represents a single devlog entry with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WeeklyDigest": {
                    "methods": [
                        "__init__",
                        "_load_agent_logs",
                        "_generate_agent_stats",
                        "_generate_insights",
                        "_format_insights",
                        "_format_digest"
                    ],
                    "docstring": "Generates weekly summaries of swarm activity.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\__main__.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\dry_scanner.py": {
            "language": ".py",
            "functions": [
                "generate_report",
                "main",
                "__init__",
                "hash_code",
                "normalize",
                "__init__",
                "analyze_file",
                "collect_definitions",
                "__init__",
                "analyze_test_file",
                "collect_test_patterns"
            ],
            "classes": {
                "CodeLocation": {
                    "methods": [],
                    "docstring": "Represents a location of code in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateGroup": {
                    "methods": [],
                    "docstring": "Represents a group of duplicate code elements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeHasher": {
                    "methods": [
                        "__init__",
                        "hash_code"
                    ],
                    "docstring": "Handles code normalization and hashing for duplicate detection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CodeNormalizer": {
                    "methods": [
                        "normalize"
                    ],
                    "docstring": "Normalizes code for comparison by removing whitespace and comments.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "collect_definitions"
                    ],
                    "docstring": "Analyzes Python AST for code patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_test_file",
                        "collect_test_patterns"
                    ],
                    "docstring": "Analyzes test files for patterns and duplicates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "export_chatgpt_context",
                "load_existing_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "_generate_narrative",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "save_results",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "load_existing_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "_generate_narrative",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type",
                        "save_results"
                    ],
                    "docstring": "A universal project scanner that analyzes code structure and generates reports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_agent_patterns",
                "_identify_agent_pattern",
                "_extract_common_patterns",
                "_find_common_methods",
                "_find_common_attributes",
                "_is_stateful_agent",
                "_is_stateless_agent",
                "_is_reactive_agent",
                "_is_proactive_agent"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_agent_patterns",
                        "_identify_agent_pattern",
                        "_extract_common_patterns",
                        "_find_common_methods",
                        "_find_common_attributes",
                        "_is_stateful_agent",
                        "_is_stateless_agent",
                        "_is_reactive_agent",
                        "_is_proactive_agent"
                    ],
                    "docstring": "Analyzes code for agent patterns and behaviors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\architecture_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_circular_dependencies",
                "_build_dependency_graph",
                "_extract_imports",
                "_find_deep_inheritance",
                "_analyze_inheritance",
                "dfs"
            ],
            "classes": {
                "ArchitectureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_circular_dependencies",
                        "_build_dependency_graph",
                        "_extract_imports",
                        "_find_deep_inheritance",
                        "_analyze_inheritance"
                    ],
                    "docstring": "Analyzes architectural patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\bridge_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "BridgeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes bridge health and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\codex_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "CodexAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Codex validation metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_python_file",
                "_normalize_source",
                "_hash_code",
                "_get_ast_node_source",
                "_calculate_similarity",
                "_analyze_node",
                "_analyze_inheritance",
                "_get_base_name",
                "_check_diamond_inheritance",
                "_get_inheritance_chain",
                "analyze_file",
                "find_duplicates"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "_is_python_file",
                        "_normalize_source",
                        "_hash_code",
                        "_get_ast_node_source",
                        "_calculate_similarity",
                        "_analyze_node",
                        "_analyze_inheritance",
                        "_get_base_name",
                        "_check_diamond_inheritance",
                        "_get_inheritance_chain",
                        "analyze_file",
                        "find_duplicates"
                    ],
                    "docstring": "Analyzes Python code for patterns and issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\discord_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "DiscordAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes Discord integration metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\feedback_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "FeedbackAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes feedback metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\processor_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_check_import",
                "fix_imports"
            ],
            "classes": {
                "ProcessorImportAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_check_import",
                        "fix_imports"
                    ],
                    "docstring": "Analyzes and fixes processor-related imports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_utility_functions",
                "_is_utility_function",
                "_find_large_classes",
                "_find_complex_methods",
                "_calculate_complexity"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_utility_functions",
                        "_is_utility_function",
                        "_find_large_classes",
                        "_find_complex_methods",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_find_common_patterns",
                "_find_naming_patterns",
                "_calculate_confidence",
                "_is_singleton",
                "_is_factory",
                "_is_observer",
                "_is_strategy",
                "_is_command"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_find_common_patterns",
                        "_find_naming_patterns",
                        "_calculate_confidence",
                        "_is_singleton",
                        "_is_factory",
                        "_is_observer",
                        "_is_strategy",
                        "_is_command"
                    ],
                    "docstring": "Analyzes code for themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\analyzers\\ui_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze"
            ],
            "classes": {
                "UIAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze"
                    ],
                    "docstring": "Analyzes UI metrics and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\core\\file_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_skip_path",
                "find_python_files",
                "generate_init_files"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__",
                        "_should_skip_path",
                        "find_python_files",
                        "generate_init_files"
                    ],
                    "docstring": "Manages file operations for the scanner.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\core\\narrative.py": {
            "language": ".py",
            "functions": [
                "generate"
            ],
            "classes": {
                "NarrativeGenerator": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates narrative summaries of scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\core\\report_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "ReportManager": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Manages report generation and saving.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\core\\scan_results.py": {
            "language": ".py",
            "functions": [
                "format_summary",
                "format_full_report",
                "summary"
            ],
            "classes": {
                "ScanResults": {
                    "methods": [
                        "format_summary",
                        "format_full_report",
                        "summary"
                    ],
                    "docstring": "Results from a project scan.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\reporters\\factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "save_results"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "save_results"
                    ],
                    "docstring": "Factory for creating reporter instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\reporters\\html_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results",
                "_format_duplicate",
                "_format_architectural_issue",
                "_format_agent_category",
                "_format_structural_insight",
                "_format_theme",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "HTMLReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "_format_duplicate",
                        "_format_architectural_issue",
                        "_format_agent_category",
                        "_format_structural_insight",
                        "_format_theme",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "HTML reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\reporters\\json_reporter.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "save_results",
                "generate_report",
                "generate_theme_report"
            ],
            "classes": {
                "DateTimeEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder for datetime objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JSONReporter": {
                    "methods": [
                        "__init__",
                        "save_results",
                        "generate_report",
                        "generate_theme_report"
                    ],
                    "docstring": "JSON reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\reporters\\reporter_factory.py": {
            "language": ".py",
            "functions": [
                "create_reporter",
                "get_supported_types"
            ],
            "classes": {
                "ReporterFactory": {
                    "methods": [
                        "create_reporter",
                        "get_supported_types"
                    ],
                    "docstring": "Factory for creating reporters.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\reporters\\text_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "TextReporter": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Text reporter for scan results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\scripts\\fix_processor_imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\utils\\ast_utils.py": {
            "language": ".py",
            "functions": [
                "parse_file",
                "get_function_defs",
                "get_class_defs",
                "get_imports",
                "get_docstrings"
            ],
            "classes": {
                "ASTUtils": {
                    "methods": [
                        "parse_file",
                        "get_function_defs",
                        "get_class_defs",
                        "get_imports",
                        "get_docstrings"
                    ],
                    "docstring": "Utilities for AST analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\utils\\code_utils.py": {
            "language": ".py",
            "functions": [
                "count_imports",
                "count_functions",
                "count_classes",
                "get_complexity",
                "get_docstring_coverage"
            ],
            "classes": {
                "CodeUtils": {
                    "methods": [
                        "count_imports",
                        "count_functions",
                        "count_classes",
                        "get_complexity",
                        "get_docstring_coverage"
                    ],
                    "docstring": "Utilities for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "get_python_files",
                "get_file_size",
                "get_file_lines",
                "read_file"
            ],
            "classes": {
                "FileUtils": {
                    "methods": [
                        "get_python_files",
                        "get_file_size",
                        "get_file_lines",
                        "read_file"
                    ],
                    "docstring": "Utilities for file operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\utils\\metrics_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_code_metrics",
                "aggregate_metrics",
                "format_metrics",
                "calculate_complexity_metrics",
                "calculate_maintainability_metrics"
            ],
            "classes": {
                "MetricsUtils": {
                    "methods": [
                        "calculate_code_metrics",
                        "aggregate_metrics",
                        "format_metrics",
                        "calculate_complexity_metrics",
                        "calculate_maintainability_metrics"
                    ],
                    "docstring": "Utility functions for metrics collection and analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\scanner\\utils\\pattern_utils.py": {
            "language": ".py",
            "functions": [
                "find_patterns",
                "find_duplicates",
                "find_long_functions",
                "find_complex_conditions"
            ],
            "classes": {
                "PatternUtils": {
                    "methods": [
                        "find_patterns",
                        "find_duplicates",
                        "find_long_functions",
                        "find_complex_conditions"
                    ],
                    "docstring": "Utilities for pattern matching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "temp_project_dir",
                "sample_file_analysis",
                "sample_project_analysis"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\tests\\overnight_test_runner.py": {
            "language": ".py",
            "functions": [
                "run",
                "__init__",
                "_load_test_analysis",
                "_load_high_scores",
                "_save_test_analysis",
                "_save_high_scores",
                "send_prompt_to_agent"
            ],
            "classes": {
                "TestRunner": {
                    "methods": [
                        "__init__",
                        "_load_test_analysis",
                        "_load_high_scores",
                        "_save_test_analysis",
                        "_save_high_scores",
                        "send_prompt_to_agent"
                    ],
                    "docstring": "Coordinates test running and agent debugging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_233103\\swarm_tools\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250611_233103\\utils\\duplicate_finder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_233103\\utils\\init_mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\utils\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_inbox",
                "get_outbox",
                "send_message",
                "receive_message",
                "archive_message"
            ],
            "classes": {
                "AgentMailbox": {
                    "methods": [
                        "__init__",
                        "get_inbox",
                        "get_outbox",
                        "send_message",
                        "receive_message",
                        "archive_message"
                    ],
                    "docstring": "Agent mailbox for message handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_233103\\utils\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_233103\\utils\\retry_utils.py": {
            "language": ".py",
            "functions": [
                "retry",
                "with_retry",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235733\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250611_235733\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235733\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_235733\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235733\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_235733\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235733\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250611_235733\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235733\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_235733\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235733\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235733\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_235733\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235733\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235733\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235733\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250611_235820\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235820\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250611_235820\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235820\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_235820\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235820\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235820\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_235820\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235820\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235820\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250611_235820\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235820\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235820\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250611_235820\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235820\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250611_235820\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250611_235820\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235820\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235820\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250611_235820\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250611_235820\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250612_000825\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_000825\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250612_000825\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_000825\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250612_000825\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_000825\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_000825\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250612_000825\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_000825\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_000825\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250612_000825\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_000825\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_000825\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250612_000825\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_000825\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_000825\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250612_000825\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_000825\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_000825\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_000825\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_000825\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "backups\\import_update_20250612_001550\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_check",
                "run_all_checks",
                "_calculate_health_score",
                "print_results"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "run_check",
                        "run_all_checks",
                        "_calculate_health_score",
                        "print_results"
                    ],
                    "docstring": "System diagnostics dashboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\core\\autonomy\\loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog",
                "paste_to_cursor"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog",
                        "paste_to_cursor"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\core\\autonomy\\task_completion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_mentioned_agents",
                "_generate_tags",
                "_format_task_summary",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "TaskCompletionHook": {
                    "methods": [
                        "__init__",
                        "_extract_mentioned_agents",
                        "_generate_tags",
                        "_format_task_summary"
                    ],
                    "docstring": "Hook for handling task completion events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionManager": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Manage task completion hooks for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_001550\\core\\bridge\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "main",
                "__init__",
                "_load_memory",
                "_save_memory",
                "parse_and_update_memory",
                "_merge_memory_updates",
                "get_prompt",
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory",
                "__init__",
                "setup",
                "quit",
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow",
                "load_chat",
                "archive_chat",
                "shutdown",
                "__init__",
                "get_prompt",
                "send_prompt_and_wait",
                "__init__",
                "_load_config",
                "_default_output_callback",
                "append_output",
                "start",
                "_process_pending_requests",
                "_handle_request",
                "_save_response",
                "_send_error",
                "shutdown"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "parse_and_update_memory",
                        "_merge_memory_updates",
                        "get_prompt"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\nHandles template-based prompt generation and memory management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "setup",
                        "quit"
                    ],
                    "docstring": "Manages the Chrome WebDriver instance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow",
                        "load_chat",
                        "archive_chat",
                        "shutdown"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "Handles prompt execution and response retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "_process_pending_requests",
                        "_handle_request",
                        "_save_response",
                        "_send_error",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and response handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "backups\\import_update_20250612_001550\\core\\config\\config_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "_load_yaml",
                "_merge_configs",
                "_format_paths"
            ],
            "classes": {
                "ConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_yaml",
                        "_merge_configs",
                        "_format_paths"
                    ],
                    "docstring": "Loads and validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\core\\config\\schema.py": {
            "language": ".py",
            "functions": [
                "validate_url",
                "validate_path_exists",
                "validate_command",
                "validate_ip",
                "__init__",
                "validate",
                "_validate_paths",
                "_validate_webhook_url",
                "_validate_command_paths",
                "_validate_ips",
                "get_default_config"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_validate_paths",
                        "_validate_webhook_url",
                        "_validate_command_paths",
                        "_validate_ips",
                        "get_default_config"
                    ],
                    "docstring": "Validates configuration against schema and performs additional checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_001550\\core\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\core\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\core\\mailbox\\handlers\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250612_001550\\core\\mailbox\\handlers\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\core\\mailbox\\utils\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_001550\\core\\monitor\\debug_tools.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\core\\monitor\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_001550\\core\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250612_001550\\core\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_001550\\core\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_001550\\core\\security\\security_overlay_generator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "generate_markdown",
                "_format_risks",
                "_format_validation_checks",
                "_format_attack_surfaces",
                "_format_mitigation_steps",
                "_format_dependencies",
                "_format_monitoring",
                "save_overlay",
                "load_template",
                "create_overlay_from_template"
            ],
            "classes": {
                "SecurityRisk": {
                    "methods": [],
                    "docstring": "Represents a potential security risk in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationCheck": {
                    "methods": [],
                    "docstring": "Represents a security validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AttackSurface": {
                    "methods": [],
                    "docstring": "Represents a potential attack surface in a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MitigationStep": {
                    "methods": [],
                    "docstring": "Represents a security mitigation step.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlay": {
                    "methods": [],
                    "docstring": "Represents a complete security overlay for a task.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SecurityOverlayGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown",
                        "_format_risks",
                        "_format_validation_checks",
                        "_format_attack_surfaces",
                        "_format_mitigation_steps",
                        "_format_dependencies",
                        "_format_monitoring",
                        "save_overlay",
                        "load_template",
                        "create_overlay_from_template"
                    ],
                    "docstring": "Generates security overlays for tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "backups\\import_update_20250612_001550\\devlog\\devlog_pitcher.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\general_tools\\config_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_all",
                "_validate_config",
                "_find_used_configs"
            ],
            "classes": {
                "ConfigValidator": {
                    "methods": [
                        "__init__",
                        "validate_all",
                        "_validate_config",
                        "_find_used_configs"
                    ],
                    "docstring": "Validates configuration files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\general_tools\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "visit_ClassDef",
                "__init__",
                "find_duplicates",
                "_calculate_similarity"
            ],
            "classes": {
                "ClassVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef"
                    ],
                    "docstring": "AST visitor for finding class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateClassFinder": {
                    "methods": [
                        "__init__",
                        "find_duplicates",
                        "_calculate_similarity"
                    ],
                    "docstring": "Finds duplicate class definitions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_001550\\general_tools\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_last_activity"
            ],
            "classes": {
                "LoopDriftDetector": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_last_activity"
                    ],
                    "docstring": "Detects agent loop drift and stuck states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_001550\\inject\\captain_prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_sequence_data",
                "_format_waiting_messages",
                "_get_agent_prompt",
                "run"
            ],
            "classes": {
                "CaptainPrompt": {
                    "methods": [
                        "__init__",
                        "_get_sequence_data",
                        "_format_waiting_messages",
                        "_get_agent_prompt",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\inject\\capture_copy_button.py": {
            "language": ".py",
            "functions": [
                "capture_template",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\mailbox\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_sequence",
                "_get_sequence_data",
                "_update_sequence",
                "get_next_agent",
                "send_message",
                "broadcast_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "acknowledge_message",
                "save_response",
                "clear_messages",
                "update_message_status"
            ],
            "classes": {
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_sequence",
                        "_get_sequence_data",
                        "_update_sequence",
                        "get_next_agent",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "acknowledge_message",
                        "save_response",
                        "clear_messages",
                        "update_message_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "backups\\import_update_20250612_001550\\mailbox\\send_task.py": {
            "language": ".py",
            "functions": [
                "send_optimization_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_001550\\mailbox\\standardize.py": {
            "language": ".py",
            "functions": [
                "create_standard_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "backups\\import_update_20250612_001550\\mailbox\\task_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent_task"
            ],
            "classes": {
                "TaskHandler": {
                    "methods": [
                        "__init__",
                        "get_agent_task"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\monitor\\activate_test_debug.py": {
            "language": ".py",
            "functions": [
                "get_agent_coords",
                "send_prompt_to_agent",
                "activate_test_debug_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\monitor\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "backups\\import_update_20250612_001550\\resume\\agent_restart.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "restart_agent",
                "send_initial_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_001550\\resume\\agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_files",
                "_write_json",
                "_read_json",
                "activate_test_debug_mode",
                "increment_cycle",
                "reset_cycle_count",
                "add_test_fix_task",
                "add_blocker_task",
                "log_test_debug",
                "get_test_debug_status"
            ],
            "classes": {
                "AgentResumer": {
                    "methods": [
                        "__init__",
                        "_init_files",
                        "_write_json",
                        "_read_json",
                        "activate_test_debug_mode",
                        "increment_cycle",
                        "reset_cycle_count",
                        "add_test_fix_task",
                        "add_blocker_task",
                        "log_test_debug",
                        "get_test_debug_status"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\agent_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_agents"
            ],
            "classes": {
                "AgentAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_agents"
                    ],
                    "docstring": "Analyzes agent behavior and interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\analyze_logs.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "parse_log_file",
                "summarize",
                "export",
                "clear_logs",
                "rotate_logs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\architectural_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_architecture"
            ],
            "classes": {
                "ArchitecturalAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_architecture"
                    ],
                    "docstring": "Analyzes code architecture and design patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\ast_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_reset_state",
                "_analyze_tree",
                "_analyze_function",
                "_analyze_class",
                "_extract_base_classes"
            ],
            "classes": {
                "ASTAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_reset_state",
                        "_analyze_tree",
                        "_analyze_function",
                        "_analyze_class",
                        "_extract_base_classes"
                    ],
                    "docstring": "Analyzes Python source code using AST.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\code_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file",
                "_calculate_complexity"
            ],
            "classes": {
                "CodeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_calculate_complexity"
                    ],
                    "docstring": "Analyzes code structure and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\dependency_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_dependencies",
                "analyze_file_dependencies",
                "identify_core_components",
                "group_into_modules"
            ],
            "classes": {
                "DependencyAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_dependencies",
                        "analyze_file_dependencies",
                        "identify_core_components",
                        "group_into_modules"
                    ],
                    "docstring": "Analyzes dependencies between files and detects circular dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\duplicate_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_duplicates"
            ],
            "classes": {
                "DuplicateAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_duplicates"
                    ],
                    "docstring": "Analyzes code duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\performance_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_metrics",
                "collect_system_metrics",
                "update_metrics",
                "get_optimization_recommendations",
                "run_monitoring_loop"
            ],
            "classes": {
                "PerformanceMonitor": {
                    "methods": [
                        "__init__",
                        "initialize_metrics",
                        "collect_system_metrics",
                        "update_metrics",
                        "get_optimization_recommendations",
                        "run_monitoring_loop"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\print_metrics_summary.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "print_metrics_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\quality_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_file_quality",
                "_calculate_cyclomatic_complexity",
                "_calculate_code_duplication",
                "analyze_test_coverage"
            ],
            "classes": {
                "QualityAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file_quality",
                        "_calculate_cyclomatic_complexity",
                        "_calculate_code_duplication",
                        "analyze_test_coverage"
                    ],
                    "docstring": "Analyzes code quality metrics including complexity and duplication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\structure_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_structure"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_structure"
                    ],
                    "docstring": "Analyzes code structure and organization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\theme_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_themes"
            ],
            "classes": {
                "ThemeAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_themes"
                    ],
                    "docstring": "Analyzes code themes and patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\analyzers\\visualize_agent_layout.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_draw_point",
                "_draw_region",
                "visualize_agent",
                "visualize_all_agents",
                "analyze_layout"
            ],
            "classes": {
                "AgentLayoutVisualizer": {
                    "methods": [
                        "__init__",
                        "_draw_point",
                        "_draw_region",
                        "visualize_agent",
                        "visualize_all_agents",
                        "analyze_layout"
                    ],
                    "docstring": "Visualizes agent positions and regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_driver",
                "save_cookies",
                "load_cookies"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "set_driver",
                        "save_cookies",
                        "load_cookies"
                    ],
                    "docstring": "Handles saving and loading of browser cookies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\debug_helper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "print_page_info",
                "print_form_elements",
                "print_element_info",
                "wait_for_hotkey",
                "find_element_by_attributes"
            ],
            "classes": {
                "BrowserDebugger": {
                    "methods": [
                        "__init__",
                        "print_page_info",
                        "print_form_elements",
                        "print_element_info",
                        "wait_for_hotkey",
                        "find_element_by_attributes"
                    ],
                    "docstring": "Helper class for debugging browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\example_bridge.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\integration.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "StealthBrowserBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge service for StealthBrowser integration with dreamos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "click_initial_login",
                "click_secondary_login",
                "wait_for_email_input",
                "wait_for_continue_button",
                "wait_for_password_input",
                "input_email",
                "input_password",
                "find_element",
                "find_element_by_text",
                "wait_for_verification_code",
                "check_login_status",
                "handle_verification_code",
                "verify_login",
                "input_codex_message",
                "wait_for_codex_response"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "click_initial_login",
                        "click_secondary_login",
                        "wait_for_email_input",
                        "wait_for_continue_button",
                        "wait_for_password_input",
                        "input_email",
                        "input_password",
                        "find_element",
                        "find_element_by_text",
                        "wait_for_verification_code",
                        "check_login_status",
                        "handle_verification_code",
                        "verify_login",
                        "input_codex_message",
                        "wait_for_codex_response"
                    ],
                    "docstring": "Handles login-related operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\stealth_browser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "check_login_status",
                "print_element_info"
            ],
            "classes": {
                "StealthBrowser": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "check_login_status",
                        "print_element_info"
                    ],
                    "docstring": "Codex-compatible synchronous stealth browser.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\browser\\__main__.py": {
            "language": ".py",
            "functions": [
                "keep_browser_open",
                "handle_login_flow",
                "try_cookie_login",
                "send_codex_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_001550\\swarm\\models\\analysis.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "ClassInfo": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Information about a class in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Analysis results for a single file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectAnalysis": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Complete project analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "backups\\import_update_20250612_001550\\swarm\\scanner\\core\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_results"
            ],
            "classes": {
                "Scanner": {
                    "methods": [
                        "__init__",
                        "save_results"
                    ],
                    "docstring": "Main scanner class for code analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\backup_restore.py": {
            "language": ".py",
            "functions": [
                "add_path",
                "write_metadata",
                "backup_runtime",
                "safe_extract",
                "restore",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\cleanup_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_project",
                "generate_report",
                "consolidate_test_files",
                "clean_temp_files"
            ],
            "classes": {
                "ProjectCleaner": {
                    "methods": [
                        "__init__",
                        "analyze_project",
                        "generate_report",
                        "consolidate_test_files",
                        "clean_temp_files"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "is_valid_file",
                "is_test_file",
                "get_file_extension",
                "normalize_path",
                "create_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\find_large_modules.py": {
            "language": ".py",
            "functions": [
                "scan_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\list_large_files.py": {
            "language": ".py",
            "functions": [
                "find_large_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "backups\\import_update_20250612_001550\\swarm\\utils\\zip_resolver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "__init__",
                "resolve",
                "resolve_batch",
                "get_stats",
                "reset",
                "warm_cache",
                "get_circuit_breaker_status"
            ],
            "classes": {
                "ZipResolverConfig": {
                    "methods": [],
                    "docstring": "Configuration for ZIP code resolution service.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute"
                    ],
                    "docstring": "Circuit breaker pattern implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ZipResolver": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "resolve_batch",
                        "get_stats",
                        "reset",
                        "warm_cache",
                        "get_circuit_breaker_status"
                    ],
                    "docstring": "Service for resolving ZIP codes with caching and rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "crime_report_generator\\main.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "collect_data",
                "process_data",
                "generate_visualizations",
                "generate_report",
                "run_pipeline",
                "run_range"
            ],
            "classes": {
                "CrimeReportGenerator": {
                    "methods": [
                        "__init__",
                        "collect_data",
                        "process_data",
                        "generate_visualizations",
                        "generate_report",
                        "run_pipeline",
                        "run_range"
                    ],
                    "docstring": "Main class for orchestrating the crime report generation pipeline.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "crime_report_generator\\agents\\report_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_data",
                "generate_report",
                "schedule_report",
                "distribute_report",
                "get_scheduled_jobs",
                "remove_job",
                "shutdown"
            ],
            "classes": {
                "ReportAgent": {
                    "methods": [
                        "__init__",
                        "process_data",
                        "generate_report",
                        "schedule_report",
                        "distribute_report",
                        "get_scheduled_jobs",
                        "remove_job",
                        "shutdown"
                    ],
                    "docstring": "Agent for managing crime report generation and distribution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "crime_report_generator\\data_sources\\austin_scraper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "collect_data",
                "_save_raw_data",
                "_parse_crime_type"
            ],
            "classes": {
                "AustinScraper": {
                    "methods": [
                        "__init__",
                        "collect_data",
                        "_save_raw_data",
                        "_parse_crime_type"
                    ],
                    "docstring": "Scraper for Austin Police Department crime data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "crime_report_generator\\data_sources\\houston_scraper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "collect_data",
                "_save_raw_data",
                "_parse_crime_type"
            ],
            "classes": {
                "HoustonScraper": {
                    "methods": [
                        "__init__",
                        "collect_data",
                        "_save_raw_data",
                        "_parse_crime_type"
                    ],
                    "docstring": "Scraper for Houston Police Department crime data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "crime_report_generator\\processors\\aggregator.py": {
            "language": ".py",
            "functions": [
                "aggregate_by_type",
                "aggregate_by_district",
                "top_locations"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "crime_report_generator\\processors\\categorizer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "categorize_offense",
                "categorize_description",
                "categorize_dataframe",
                "_categorize_row",
                "categorize_crime"
            ],
            "classes": {
                "CrimeCategory": {
                    "methods": [],
                    "docstring": "Enumeration of crime categories.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CrimeCategorizer": {
                    "methods": [
                        "__init__",
                        "categorize_offense",
                        "categorize_description",
                        "categorize_dataframe",
                        "_categorize_row",
                        "categorize_crime"
                    ],
                    "docstring": "Class for categorizing crime data into standardized categories.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "crime_report_generator\\processors\\cleaner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "clean",
                "_clean_date",
                "_clean_crime_type",
                "_clean_count",
                "_clean_location",
                "_clean_status"
            ],
            "classes": {
                "DataCleaner": {
                    "methods": [
                        "__init__",
                        "clean",
                        "_clean_date",
                        "_clean_crime_type",
                        "_clean_count",
                        "_clean_location",
                        "_clean_status"
                    ],
                    "docstring": "Class for cleaning and standardizing crime data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "crime_report_generator\\reports\\arcgis_fetcher.py": {
            "language": ".py",
            "functions": [
                "get_bounding_box",
                "fetch_montgomery_arcgis"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "crime_report_generator\\reports\\crimegrade_scraper.py": {
            "language": ".py",
            "functions": [
                "fetch_crimegrade_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "crime_report_generator\\reports\\crime_report_pipeline.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "crime_report_generator\\reports\\report_formatter.py": {
            "language": ".py",
            "functions": [
                "format_markdown_report",
                "format_discord_report",
                "format_instagram_report",
                "format_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "crime_report_generator\\reports\\report_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_markdown_report",
                "generate_html_report",
                "generate_pdf_report",
                "generate_json_report",
                "generate_summary_statistics",
                "_validate_dataframe"
            ],
            "classes": {
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "generate_markdown_report",
                        "generate_html_report",
                        "generate_pdf_report",
                        "generate_json_report",
                        "generate_summary_statistics",
                        "_validate_dataframe"
                    ],
                    "docstring": "Class for generating crime reports in various formats.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "crime_report_generator\\reports\\summarizer.py": {
            "language": ".py",
            "functions": [
                "normalize_crime_types",
                "summarize_arcgis_data",
                "summarize_crimegrade_data",
                "compare_sources"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "crime_report_generator\\reports\\zip_mapper.py": {
            "language": ".py",
            "functions": [
                "get_zip_info",
                "format_location",
                "get_zip_details"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "crime_report_generator\\scheduler\\report_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "schedule_report",
                "generate_report",
                "generate_and_distribute_report",
                "get_scheduled_jobs",
                "remove_job",
                "shutdown"
            ],
            "classes": {
                "ReportScheduler": {
                    "methods": [
                        "__init__",
                        "schedule_report",
                        "generate_report",
                        "generate_and_distribute_report",
                        "get_scheduled_jobs",
                        "remove_job",
                        "shutdown"
                    ],
                    "docstring": "Class for scheduling and automating crime report generation and distribution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "crime_report_generator\\visualizations\\crime_visualizer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_category_pie_chart",
                "create_trend_line_chart",
                "create_location_bar_chart",
                "create_category_trend_chart",
                "save_visualization",
                "_validate_dataframe"
            ],
            "classes": {
                "CrimeVisualizer": {
                    "methods": [
                        "__init__",
                        "create_category_pie_chart",
                        "create_trend_line_chart",
                        "create_location_bar_chart",
                        "create_category_trend_chart",
                        "save_visualization",
                        "_validate_dataframe"
                    ],
                    "docstring": "Class for generating crime data visualizations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "discord_bot\\agent_interface.py": {
            "language": ".py",
            "functions": [
                "send_command",
                "broadcast_command",
                "get_agent_status",
                "clear_agent_messages",
                "cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "discord_bot\\bot.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "setup_metrics",
                "get_help_embed"
            ],
            "classes": {
                "DreamOSBot": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "setup_metrics",
                        "get_help_embed"
                    ],
                    "docstring": "Dream.OS Discord bot implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "discord_bot\\commands.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "cog_unload"
            ],
            "classes": {
                "AgentCommands": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "cog_unload"
                    ],
                    "docstring": "Commands for managing agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "discord_bot\\devlog_commands.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DevlogCommands": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Commands for managing agent development logs.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "discord_bot\\help_menu.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_pages",
                "setup_buttons",
                "__init__"
            ],
            "classes": {
                "HelpMenu": {
                    "methods": [
                        "__init__",
                        "setup_pages",
                        "setup_buttons"
                    ],
                    "docstring": "Interactive help menu for Discord bot commands.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandSearchModal": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Modal for searching commands.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "discord_bot\\log_utils.py": {
            "language": ".py",
            "functions": [
                "get_logs_embed"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "discord_bot\\notifier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_webhooks",
                "_create_embed"
            ],
            "classes": {
                "DiscordNotifier": {
                    "methods": [
                        "__init__",
                        "_load_webhooks",
                        "_create_embed"
                    ],
                    "docstring": "Unified Discord notification system.\n\nThis class provides a centralized way to send notifications to Discord\nchannels and webhooks, with consistent error handling, logging, and\nperformance monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "discord_bot\\tts.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "TTSManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages text-to-speech generation using multiple engines.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "discord_bot\\voicebot.py": {
            "language": ".py",
            "functions": [
                "run_voicebot",
                "__init__",
                "on_created",
                "__init__",
                "_after_playback"
            ],
            "classes": {
                "VoiceQueueHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for the voice queue directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceBot": {
                    "methods": [
                        "__init__",
                        "_after_playback"
                    ],
                    "docstring": "Voice-enabled Discord bot for swarm audio output.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "discord_bot\\voice_cli.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "discord_bot\\cogs\\basic.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BasicCommands": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Basic command handlers for the Discord bot.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "discord_bot\\commands\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_cooldown",
                "get_help_text",
                "__init__",
                "register",
                "get_command",
                "get_commands_by_category"
            ],
            "classes": {
                "CommandCategory": {
                    "methods": [],
                    "docstring": "Categories for organizing commands.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandContext": {
                    "methods": [],
                    "docstring": "Context for command execution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandResult": {
                    "methods": [],
                    "docstring": "Result of command execution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseCommand": {
                    "methods": [
                        "__init__",
                        "check_cooldown",
                        "get_help_text"
                    ],
                    "docstring": "Base class for all commands.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get_command",
                        "get_commands_by_category"
                    ],
                    "docstring": "Registry for managing commands.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "discord_bot\\commands\\system.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "SystemStatusCommand": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Command to show system status.",
                    "base_classes": [
                        "BaseCommand"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RestartCommand": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Command to restart system components.",
                    "base_classes": [
                        "BaseCommand"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MetricsCommand": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Command to show detailed system metrics.",
                    "base_classes": [
                        "BaseCommand"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "docs\\examples\\llm_agent_example.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\bridge.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "parse_hybrid_response",
                "__init__",
                "_load_config",
                "_validate_config",
                "_find_chat_input",
                "_find_send_button",
                "_find_login_button",
                "_save_requests",
                "_save_health",
                "_is_logged_in"
            ],
            "classes": {
                "BridgeRequest": {
                    "methods": [],
                    "docstring": "A request to be processed by the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeHealth": {
                    "methods": [],
                    "docstring": "Health status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses hybrid responses containing both text and structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "_find_chat_input",
                        "_find_send_button",
                        "_find_login_button",
                        "_save_requests",
                        "_save_health",
                        "_is_logged_in"
                    ],
                    "docstring": "Main bridge service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\start_dreamos.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_status_file"
            ],
            "classes": {
                "DreamOSLauncher": {
                    "methods": [
                        "__init__",
                        "_init_status_file"
                    ],
                    "docstring": "Launches and manages Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\bridge\\core\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_validate_config",
                "_find_chat_input",
                "_find_send_button",
                "_find_login_button",
                "_save_requests",
                "_save_health",
                "_is_logged_in"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "_find_chat_input",
                        "_find_send_button",
                        "_find_login_button",
                        "_save_requests",
                        "_save_health",
                        "_is_logged_in"
                    ],
                    "docstring": "Main bridge service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\bridge\\core\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\bridge\\models\\health.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BridgeHealth": {
                    "methods": [],
                    "docstring": "Health status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\bridge\\models\\request.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BridgeRequest": {
                    "methods": [],
                    "docstring": "A request to be processed by the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\bridge\\utils\\response_handler.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "parse_hybrid_response"
            ],
            "classes": {
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses hybrid responses containing both text and structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\bridge_clients\\cursor\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_interface.py": {
            "language": ".py",
            "functions": [
                "send_command",
                "broadcast_command",
                "__init__",
                "send_command",
                "broadcast_command",
                "get_agent_status",
                "clear_agent_messages",
                "cleanup"
            ],
            "classes": {
                "AgentInterface": {
                    "methods": [
                        "__init__",
                        "send_command",
                        "broadcast_command",
                        "get_agent_status",
                        "clear_agent_messages",
                        "cleanup"
                    ],
                    "docstring": "Interface between Discord commands and Dream.OS Cell Phone system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentLoop": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages an agent's processing loop.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\cli.py": {
            "language": ".py",
            "functions": [
                "direct_send_message",
                "bus_send_message",
                "parse_args",
                "validate_priority",
                "load_coordinates",
                "cli_main",
                "send_message",
                "get_status",
                "clear_messages",
                "shutdown",
                "__init__",
                "send_message",
                "get_status",
                "clear_messages",
                "shutdown"
            ],
            "classes": {
                "MessageCLI": {
                    "methods": [
                        "__init__",
                        "send_message",
                        "get_status",
                        "clear_messages",
                        "shutdown"
                    ],
                    "docstring": "Command-line interface for agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "dreamos\\core\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_dir",
                "log_dir"
            ],
            "classes": {
                "Config": {
                    "methods": [
                        "__init__",
                        "log_dir",
                        "log_dir"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "move_to",
                "__init__",
                "move_to",
                "click",
                "type_text",
                "press_enter",
                "press_ctrl_enter",
                "press_ctrl_n",
                "press_ctrl_v",
                "press_ctrl_a"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "move_to",
                        "click",
                        "type_text",
                        "press_enter",
                        "press_ctrl_enter",
                        "press_ctrl_n",
                        "press_ctrl_v",
                        "press_ctrl_a"
                    ],
                    "docstring": "Controls cursor movement and input for agent interaction.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\log_manager.py": {
            "language": ".py",
            "functions": [
                "record_metric",
                "__init__",
                "_setup_logging",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "record_metric",
                "get_metrics",
                "get_summary",
                "save_metrics",
                "load_metrics",
                "clear_metrics"
            ],
            "classes": {
                "LogManager": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "record_metric",
                        "get_metrics",
                        "get_summary",
                        "save_metrics",
                        "load_metrics",
                        "clear_metrics"
                    ],
                    "docstring": "Manages logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\core\\menu.py": {
            "language": ".py",
            "functions": [
                "_init_theme",
                "main",
                "__init__",
                "_init_theme",
                "get_font",
                "get_color",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "__init__",
                "_init_ui",
                "add_item",
                "clear",
                "__init__",
                "add_button",
                "add_header",
                "add_footer",
                "add_separator",
                "build",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "MenuStyle": {
                    "methods": [],
                    "docstring": "Menu styles.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuItemType": {
                    "methods": [],
                    "docstring": "Menu item types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuItem": {
                    "methods": [],
                    "docstring": "Menu item.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuTheme": {
                    "methods": [
                        "__init__",
                        "_init_theme",
                        "get_font",
                        "get_color"
                    ],
                    "docstring": "Menu theme.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuButton": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu button.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuHeader": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu header.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuFooter": {
                    "methods": [
                        "__init__",
                        "_init_ui"
                    ],
                    "docstring": "Menu footer.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuSignals": {
                    "methods": [],
                    "docstring": "Menu signals.",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Menu": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "add_item",
                        "clear"
                    ],
                    "docstring": "Menu widget.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MenuBuilder": {
                    "methods": [
                        "__init__",
                        "add_button",
                        "add_header",
                        "add_footer",
                        "add_separator",
                        "build"
                    ],
                    "docstring": "Menu builder.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QWidget": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QVBoxLayout": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QFrame": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Qt": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "pyqtSignal": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QObject": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QFont": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QColor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AlignmentFlag": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 50
        },
        "dreamos\\core\\message.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\persistent_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_from_disk",
                "_save_to_disk",
                "put",
                "get",
                "qsize",
                "empty",
                "full",
                "clear",
                "get_all"
            ],
            "classes": {
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_load_from_disk",
                        "_save_to_disk",
                        "put",
                        "get",
                        "qsize",
                        "empty",
                        "full",
                        "clear",
                        "get_all"
                    ],
                    "docstring": "A queue that persists its contents to disk.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\response_collector_new.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\start_dreamos.py": {
            "language": ".py",
            "functions": [
                "_init_status_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\system_init.py": {
            "language": ".py",
            "functions": [
                "initialize_core_systems",
                "main",
                "__init__",
                "initialize_core_systems",
                "establish_communication_channels",
                "begin_monitoring",
                "report_status"
            ],
            "classes": {
                "SystemInitializer": {
                    "methods": [
                        "__init__",
                        "initialize_core_systems",
                        "establish_communication_channels",
                        "begin_monitoring",
                        "report_status"
                    ],
                    "docstring": "Handles system initialization and communication setup.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\agents\\perpetual_test_fixer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "__init__",
                "_process_failures",
                "get_status"
            ],
            "classes": {
                "TestFailureHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles test file changes and triggers test runs.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PerpetualTestFixer": {
                    "methods": [
                        "__init__",
                        "_process_failures",
                        "get_status"
                    ],
                    "docstring": "Coordinates test failures with agents and Codex validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\agent_control\\agent_cellphone.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentCellphone": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles direct message injection to agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\agent_control.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_agent",
                "unregister_agent",
                "get_agent",
                "list_agents",
                "update_agent_config"
            ],
            "classes": {
                "AgentControl": {
                    "methods": [
                        "__init__",
                        "register_agent",
                        "unregister_agent",
                        "get_agent",
                        "list_agents",
                        "update_agent_config"
                    ],
                    "docstring": "High-level agent control and management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\agent_control\\agent_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_agent",
                "stop_agent",
                "resume_agent",
                "verify_agent",
                "cleanup_agent",
                "get_agent_status"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "start_agent",
                        "stop_agent",
                        "resume_agent",
                        "verify_agent",
                        "cleanup_agent",
                        "get_agent_status"
                    ],
                    "docstring": "Controls agent lifecycle and coordination.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\agent_control\\agent_operations.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "list_agents",
                "cleanup"
            ],
            "classes": {
                "AgentOperations": {
                    "methods": [
                        "__init__",
                        "list_agents",
                        "cleanup"
                    ],
                    "docstring": "Handles agent-specific operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\agent_control\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_agent_stalled"
            ],
            "classes": {
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "_is_agent_stalled"
                    ],
                    "docstring": "Monitors and restarts stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\agent_control\\agent_selection_dialog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "_handle_selection"
            ],
            "classes": {
                "AgentSelectionDialog": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_handle_selection"
                    ],
                    "docstring": "Dialog for selecting one or more agents.",
                    "base_classes": [
                        "QDialog"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\agent_control\\agent_status.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": "Enum representing possible agent states.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStatusInfo": {
                    "methods": [
                        "__init__",
                        "update",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Class for tracking detailed agent status information.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\agent_control\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_outbox",
                "_save_outbox"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "_load_outbox",
                        "_save_outbox"
                    ],
                    "docstring": "Handles outbox operations for bridge communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\agent_control\\captain.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Captain": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Central coordinator for agents.\n\nThe Captain assigns tasks and routes messages using the\n:class:`MessageSystem`. It also keeps track of tasks via\n:class:`TaskManager`.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_menu_builder",
                "_handle_menu_action",
                "_handle_list_agents",
                "cleanup",
                "run",
                "list_agents",
                "onboard_agent",
                "resume_agent",
                "verify_agent",
                "repair_agent",
                "backup_agent",
                "restore_agent",
                "send_message"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "set_menu_builder",
                        "_handle_menu_action",
                        "_handle_list_agents",
                        "cleanup",
                        "run",
                        "list_agents",
                        "onboard_agent",
                        "resume_agent",
                        "verify_agent",
                        "repair_agent",
                        "backup_agent",
                        "restore_agent",
                        "send_message"
                    ],
                    "docstring": "Main controller for agent operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\core\\agent_control\\coordinate_calibrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_coordinates",
                "save_coordinates",
                "get_coordinates",
                "update_coordinates",
                "calibrate_agent"
            ],
            "classes": {
                "CoordinateCalibrator": {
                    "methods": [
                        "__init__",
                        "load_coordinates",
                        "save_coordinates",
                        "get_coordinates",
                        "update_coordinates",
                        "calibrate_agent"
                    ],
                    "docstring": "Manages UI coordinate calibration for agent interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\agent_control\\coordinate_transformer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_monitors",
                "transform_coordinates",
                "transform_coordinate_dict"
            ],
            "classes": {
                "CoordinateTransformer": {
                    "methods": [
                        "__init__",
                        "_get_monitors",
                        "transform_coordinates",
                        "transform_coordinate_dict"
                    ],
                    "docstring": "Transforms coordinates between monitor and screen space.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\agent_control\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "move_to",
                "click",
                "type_text",
                "press_enter",
                "get_position",
                "wait",
                "move_to_agent",
                "click_input_box",
                "click_copy_button"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "move_to",
                        "click",
                        "type_text",
                        "press_enter",
                        "get_position",
                        "wait",
                        "move_to_agent",
                        "click_input_box",
                        "click_copy_button"
                    ],
                    "docstring": "Controls cursor movement and interaction.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\agent_control\\devlog_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_event",
                "get_log",
                "clear_log",
                "send_embed",
                "shutdown"
            ],
            "classes": {
                "DevLogManager": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_log",
                        "clear_log",
                        "send_embed",
                        "shutdown"
                    ],
                    "docstring": "Manages development logs for agent control.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\agent_control\\high_priority_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "HighPriorityDispatcher": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles high-priority message routing and prompt bouncing between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\main.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\agent_control\\menu_builder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_controller",
                "_handle_menu_action",
                "cleanup",
                "_build_menu",
                "_handle_list_agents",
                "_handle_agent_selection",
                "display_menu",
                "connect_signals",
                "disconnect_signals"
            ],
            "classes": {
                "MenuBuilder": {
                    "methods": [
                        "__init__",
                        "set_controller",
                        "_handle_menu_action",
                        "cleanup",
                        "_build_menu",
                        "_handle_list_agents",
                        "_handle_agent_selection",
                        "display_menu",
                        "connect_signals",
                        "disconnect_signals"
                    ],
                    "docstring": "Builds the agent control menu.",
                    "base_classes": [
                        "BaseMenuBuilder"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\agent_control\\periodic_restart.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_agent_management",
                "stop_agent_management",
                "__init__",
                "start_resume_management",
                "stop_resume_management"
            ],
            "classes": {
                "AgentManager": {
                    "methods": [
                        "__init__",
                        "start_agent_management",
                        "stop_agent_management"
                    ],
                    "docstring": "Manages agent periodic restarts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentResumeManager": {
                    "methods": [
                        "__init__",
                        "start_resume_management",
                        "stop_resume_management"
                    ],
                    "docstring": "Manages agent resumption after restarts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\agent_control\\response_capture.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_coordinates",
                "capture_response",
                "wait_for_copy_button"
            ],
            "classes": {
                "ResponseCapture": {
                    "methods": [
                        "__init__",
                        "_load_coordinates",
                        "capture_response",
                        "wait_for_copy_button"
                    ],
                    "docstring": "Handles capturing and processing UI responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\agent_control\\screenshot_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "capture",
                "get_screenshots",
                "get_latest_screenshot",
                "compare_screenshots",
                "cleanup"
            ],
            "classes": {
                "ScreenshotLogger": {
                    "methods": [
                        "__init__",
                        "capture",
                        "get_screenshots",
                        "get_latest_screenshot",
                        "compare_screenshots",
                        "cleanup"
                    ],
                    "docstring": "Tracks and manages debug screenshots for UI automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\agent_control\\system_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_message_history",
                "_save_message_history",
                "_connect_components",
                "_needs_captain_response"
            ],
            "classes": {
                "MessageRecord": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Record of a message between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SystemOrchestrator": {
                    "methods": [
                        "__init__",
                        "_load_message_history",
                        "_save_message_history",
                        "_connect_components",
                        "_needs_captain_response"
                    ],
                    "docstring": "Orchestrates all Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\agent_control\\task_manager.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "from_dict",
                "validate",
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "create_task",
                "get_task",
                "update_task_status",
                "get_agent_tasks",
                "get_blocked_tasks",
                "get_high_priority_tasks",
                "get_task_context",
                "generate_task_summary",
                "cleanup_completed_tasks"
            ],
            "classes": {
                "Task": {
                    "methods": [
                        "to_dict",
                        "from_dict",
                        "validate"
                    ],
                    "docstring": "Task structure for agent operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "create_task",
                        "get_task",
                        "update_task_status",
                        "get_agent_tasks",
                        "get_blocked_tasks",
                        "get_high_priority_tasks",
                        "get_task_context",
                        "generate_task_summary",
                        "cleanup_completed_tasks"
                    ],
                    "docstring": "Manages task distribution and tracking between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos\\core\\agent_control\\timing.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "wait_focus",
                "wait_click",
                "wait_typing",
                "wait_capture",
                "wait_screenshot",
                "wait_move",
                "wait_scroll",
                "wait_load",
                "wait_refresh"
            ],
            "classes": {
                "Timing": {
                    "methods": [
                        "__init__",
                        "wait_focus",
                        "wait_click",
                        "wait_typing",
                        "wait_capture",
                        "wait_screenshot",
                        "wait_move",
                        "wait_scroll",
                        "wait_load",
                        "wait_refresh"
                    ],
                    "docstring": "Minimal Timing stub for UI/automation flow compatibility.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\agent_control\\ui_automation.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_save_coordinates",
                "_validate_coordinates",
                "_has_duplicate_coordinates",
                "_check_region_overlap",
                "_get_screen_resolution",
                "_is_coordinate_valid",
                "_move_to_coordinate",
                "_click_at_coordinate",
                "_type_text",
                "_clear_text",
                "_delete_text",
                "_wait_for_delay",
                "_capture_region",
                "_get_text_from_region",
                "_handle_interrupt",
                "_calibration_context",
                "_cleanup_calibration",
                "_validate_coordinates",
                "_has_duplicate_coordinates",
                "_check_region_overlap",
                "get_agent_coordinates",
                "get_response_region",
                "_load_config",
                "_save_coordinates",
                "_setup_signal_handlers",
                "_calibration_context",
                "_calibration_loop",
                "start_calibration",
                "_get_screenshot_logger",
                "_validate_window_title",
                "_capture_debug_screenshot",
                "_transform_coordinates",
                "_transform_coordinate_dict",
                "_load_coordinates",
                "_get_default_coordinates",
                "_click_focus",
                "send_message",
                "_load_onboarding_prompt",
                "perform_onboarding_sequence",
                "_split_message",
                "cleanup",
                "move_to",
                "click",
                "type_text",
                "press_key",
                "hotkey",
                "screenshot",
                "_get_response",
                "move_to_agent",
                "click_input_box",
                "click_copy_button",
                "_has_out_of_bounds_coordinates"
            ],
            "classes": {
                "UIAutomation": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_save_coordinates",
                        "_validate_coordinates",
                        "_has_duplicate_coordinates",
                        "_check_region_overlap",
                        "_get_screen_resolution",
                        "_is_coordinate_valid",
                        "_move_to_coordinate",
                        "_click_at_coordinate",
                        "_type_text",
                        "_clear_text",
                        "_delete_text",
                        "_wait_for_delay",
                        "_capture_region",
                        "_get_text_from_region",
                        "_handle_interrupt",
                        "_calibration_context",
                        "_cleanup_calibration",
                        "_validate_coordinates",
                        "_has_duplicate_coordinates",
                        "_check_region_overlap",
                        "get_agent_coordinates",
                        "get_response_region",
                        "_load_config",
                        "_save_coordinates",
                        "_setup_signal_handlers",
                        "_calibration_context",
                        "_calibration_loop",
                        "start_calibration",
                        "_get_screenshot_logger",
                        "_validate_window_title",
                        "_capture_debug_screenshot",
                        "_transform_coordinates",
                        "_transform_coordinate_dict",
                        "_load_coordinates",
                        "_get_default_coordinates",
                        "_click_focus",
                        "send_message",
                        "_load_onboarding_prompt",
                        "perform_onboarding_sequence",
                        "_split_message",
                        "cleanup",
                        "move_to",
                        "click",
                        "type_text",
                        "press_key",
                        "hotkey",
                        "screenshot",
                        "_get_response",
                        "move_to_agent",
                        "click_input_box",
                        "click_copy_button",
                        "_has_out_of_bounds_coordinates"
                    ],
                    "docstring": "UI automation class for handling screen interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 55
        },
        "dreamos\\core\\agent_control\\visual_watchdog.py": {
            "language": ".py",
            "functions": [
                "hash_screen_region",
                "has_region_stabilized"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\__main__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\agent_control\\controllers\\agent_controller.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Controller for managing individual agents.",
                    "base_classes": [
                        "BaseController"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\controllers\\base_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_initialized",
                "is_running",
                "get_config",
                "set_config"
            ],
            "classes": {
                "BaseController": {
                    "methods": [
                        "__init__",
                        "is_initialized",
                        "is_running",
                        "get_config",
                        "set_config"
                    ],
                    "docstring": "Base class for all Dream.OS controllers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\agent_control\\controllers\\system_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_bridge_metrics"
            ],
            "classes": {
                "SystemController": {
                    "methods": [
                        "__init__",
                        "get_bridge_metrics"
                    ],
                    "docstring": "System-wide controller for managing agents and their interactions.",
                    "base_classes": [
                        "BaseController"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\agent_control\\onboarding\\agent_onboarder.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentOnboarder": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles individual agent onboarding.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\agent_control\\onboarding\\captain_onboarder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_agent_id",
                "_get_network_config",
                "get_activation_history"
            ],
            "classes": {
                "CaptainOnboarder": {
                    "methods": [
                        "__init__",
                        "_validate_agent_id",
                        "_get_network_config",
                        "get_activation_history"
                    ],
                    "docstring": "Handles activation and onboarding of multiple agents by a captain.\n\nSafety Features:\n- skip_self: Prevents the captain from onboarding itself\n- duplicate_check: Prevents re-onboarding already active agents\n- activation_tracking: Maintains record of which agents were activated\n- agent_validation: Ensures valid agent IDs and network configuration",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\agent_control\\onboarding\\message_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_get_default_config",
                "_get_template",
                "_generate_message_id",
                "create_network_activation_message",
                "create_individual_activation_message",
                "create_broadcast_message",
                "save_message_to_inbox",
                "get_message_history"
            ],
            "classes": {
                "MessageManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_get_default_config",
                        "_get_template",
                        "_generate_message_id",
                        "create_network_activation_message",
                        "create_individual_activation_message",
                        "create_broadcast_message",
                        "save_message_to_inbox",
                        "get_message_history"
                    ],
                    "docstring": "Manages onboarding messages for agents and network activation.\n\nFeatures:\n- Jinja2 templating for dynamic messages\n- Multiple config sources (JSON/YAML/embedded)\n- Message idempotence and tracking\n- Broadcast support for network-wide announcements",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\agent_control\\recovery\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_can_restart",
                "callback"
            ],
            "classes": {
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "_can_restart"
                    ],
                    "docstring": "Handles agent recovery and restart operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\agent_control\\recovery\\config_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "save_config",
                "get_config",
                "validate"
            ],
            "classes": {
                "RecoveryConfigManager": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "save_config",
                        "get_config",
                        "validate"
                    ],
                    "docstring": "Manages recovery configuration settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\agent_control\\recovery\\heartbeat_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_can_restart",
                "get_failed_agents"
            ],
            "classes": {
                "HeartbeatMonitor": {
                    "methods": [
                        "__init__",
                        "_can_restart",
                        "get_failed_agents"
                    ],
                    "docstring": "Monitors agent heartbeats and manages recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\agent_control\\recovery\\recovery_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_recovery_status"
            ],
            "classes": {
                "RecoveryManager": {
                    "methods": [
                        "__init__",
                        "get_recovery_status"
                    ],
                    "docstring": "Manages agent recovery operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\agent_control\\recovery\\window_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_cursor_window",
                "check_window_idle",
                "activate_window",
                "update_activity",
                "callback"
            ],
            "classes": {
                "WindowManager": {
                    "methods": [
                        "__init__",
                        "find_cursor_window",
                        "check_window_idle",
                        "activate_window",
                        "update_activity"
                    ],
                    "docstring": "Manages window operations for agent recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\ai\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "format_message",
                "format_system_message",
                "format_user_message",
                "format_assistant_message"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "format_message",
                        "format_system_message",
                        "format_user_message",
                        "format_assistant_message"
                    ],
                    "docstring": "Simplified ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\ai\\dreamscribe.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory_corpus",
                "_load_threads",
                "_load_insight_patterns",
                "_save_memory_corpus",
                "_save_thread",
                "_save_insight_patterns",
                "_extract_insights",
                "_find_connections",
                "_update_narratives",
                "process_with_gpt",
                "ingest_devlog",
                "get_memory",
                "get_thread",
                "get_system_insights"
            ],
            "classes": {
                "MemoryFragment": {
                    "methods": [],
                    "docstring": "A single memory fragment from a devlog or system event.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "NarrativeThread": {
                    "methods": [],
                    "docstring": "A connected sequence of memories forming a coherent story.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Dreamscribe": {
                    "methods": [
                        "__init__",
                        "_load_memory_corpus",
                        "_load_threads",
                        "_load_insight_patterns",
                        "_save_memory_corpus",
                        "_save_thread",
                        "_save_insight_patterns",
                        "_extract_insights",
                        "_find_connections",
                        "_update_narratives",
                        "process_with_gpt",
                        "ingest_devlog",
                        "get_memory",
                        "get_thread",
                        "get_system_insights"
                    ],
                    "docstring": "The core memory and narrative system for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\ai\\llm_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_history"
            ],
            "classes": {
                "LLMAgent": {
                    "methods": [
                        "__init__",
                        "get_history"
                    ],
                    "docstring": "Agent that integrates ChatGPT with the messaging system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\ai\\memory_querier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_recent_memory",
                "summarize_topic",
                "_calculate_memory_similarity",
                "find_similar_threads",
                "get_agent_insights",
                "get_task_history"
            ],
            "classes": {
                "MemoryQuerier": {
                    "methods": [
                        "__init__",
                        "get_recent_memory",
                        "summarize_topic",
                        "_calculate_memory_similarity",
                        "find_similar_threads",
                        "get_agent_insights",
                        "get_task_history"
                    ],
                    "docstring": "Provides query interface for agent memory corpus.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\ai\\gpt_router\\engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_conversation"
            ],
            "classes": {
                "Engine": {
                    "methods": [
                        "__init__",
                        "process_conversation"
                    ],
                    "docstring": "Orchestrates prompt delivery and response collection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\ai\\gpt_router\\router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_profile",
                "decide_prompt"
            ],
            "classes": {
                "Router": {
                    "methods": [
                        "__init__",
                        "_load_profile",
                        "decide_prompt"
                    ],
                    "docstring": "Decide which prompt and GPT profile to use based on context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ai\\gpt_router\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_response",
                "validate_code",
                "extract_json"
            ],
            "classes": {
                "CodexValidator": {
                    "methods": [
                        "__init__",
                        "validate_response",
                        "validate_code",
                        "extract_json"
                    ],
                    "docstring": "Validates code and responses from GPT models.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\auth\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "is_valid",
                "time_remaining"
            ],
            "classes": {
                "ExpirableMixin": {
                    "methods": [
                        "__post_init__",
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Mixin providing expiration-related functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\auth\\interface.py": {
            "language": ".py",
            "functions": [
                "login",
                "logout",
                "verify_session",
                "refresh_token"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AbstractAuthInterface": {
                    "methods": [
                        "login",
                        "logout",
                        "verify_session",
                        "refresh_token"
                    ],
                    "docstring": "Abstract base class defining the authentication interface.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\auth\\login_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\auth\\manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "authenticate",
                "validate_token",
                "refresh_token",
                "create_session",
                "get_session",
                "invalidate_session"
            ],
            "classes": {
                "AuthConfig": {
                    "methods": [],
                    "docstring": "Configuration for authentication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "authenticate",
                        "validate_token",
                        "refresh_token",
                        "create_session",
                        "get_session",
                        "invalidate_session"
                    ],
                    "docstring": "Manages authentication and authorization.",
                    "base_classes": [
                        "AbstractAuthInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\auth\\retry.py": {
            "language": ".py",
            "functions": [
                "retry",
                "__init__",
                "calculate_delay",
                "execute",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RetryError": {
                    "methods": [],
                    "docstring": "Base class for retry-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RetryMechanism": {
                    "methods": [
                        "__init__",
                        "calculate_delay",
                        "execute"
                    ],
                    "docstring": "Implements retry logic with exponential backoff.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\auth\\session.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Session": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Session class for managing user sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\auth\\token.py": {
            "language": ".py",
            "functions": [
                "is_valid",
                "time_remaining",
                "__init__",
                "_load_secret_key",
                "generate_token",
                "validate_token",
                "get_token_info",
                "refresh_token",
                "invalidate_token",
                "cleanup_expired",
                "_sign_token"
            ],
            "classes": {
                "TokenInfo": {
                    "methods": [
                        "is_valid",
                        "time_remaining"
                    ],
                    "docstring": "Represents token metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TokenHandler": {
                    "methods": [
                        "__init__",
                        "_load_secret_key",
                        "generate_token",
                        "validate_token",
                        "get_token_info",
                        "refresh_token",
                        "invalidate_token",
                        "cleanup_expired",
                        "_sign_token"
                    ],
                    "docstring": "Handles token generation, validation, and refresh.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\automation\\browser_control.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "navigate_to",
                "wait_for_element",
                "send_keys",
                "click",
                "get_text"
            ],
            "classes": {
                "BrowserControl": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "navigate_to",
                        "wait_for_element",
                        "send_keys",
                        "click",
                        "get_text"
                    ],
                    "docstring": "Controls browser automation for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\autonomy\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_inbox",
                "load_inbox",
                "save_inbox"
            ],
            "classes": {
                "AgentLoop": {
                    "methods": [
                        "__init__",
                        "_load_inbox",
                        "load_inbox",
                        "save_inbox"
                    ],
                    "docstring": "Monitors agent inboxes and processes incoming prompts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\agent_state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_agent_state",
                "get_agent_state",
                "get_idle_agents",
                "is_agent_stuck",
                "get_agent_stats",
                "get_all_stats"
            ],
            "classes": {
                "AgentState": {
                    "methods": [
                        "__init__",
                        "update_agent_state",
                        "get_agent_state",
                        "get_idle_agents",
                        "is_agent_stuck",
                        "get_agent_stats",
                        "get_all_stats"
                    ],
                    "docstring": "Manages agent states and provides auto-resume functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_shutdown",
                "load_tasks",
                "save_devlog"
            ],
            "classes": {
                "AutonomyLoop": {
                    "methods": [
                        "__init__",
                        "_handle_shutdown",
                        "load_tasks",
                        "save_devlog"
                    ],
                    "docstring": "Main autonomy loop for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\autonomy_loop_runner.py": {
            "language": ".py",
            "functions": [
                "run_pytest",
                "__init__",
                "_load_agent_ownership",
                "_should_run_iteration",
                "_determine_responsible_agent",
                "generate_fix_prompt",
                "apply_code_patch",
                "commit_code"
            ],
            "classes": {
                "AutonomyLoopRunner": {
                    "methods": [
                        "__init__",
                        "_load_agent_ownership",
                        "_should_run_iteration",
                        "_determine_responsible_agent",
                        "generate_fix_prompt",
                        "apply_code_patch",
                        "commit_code"
                    ],
                    "docstring": "Manages the autonomous test-fix loop.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\autonomy\\auto_trigger_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_trigger",
                "_determine_responsible_agent"
            ],
            "classes": {
                "AutoTriggerRunner": {
                    "methods": [
                        "__init__",
                        "_should_trigger",
                        "_determine_responsible_agent"
                    ],
                    "docstring": "Manages automatic test failure handling and fix loops.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\autonomy\\base_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_log_failure",
                "_log_success",
                "_load_log"
            ],
            "classes": {
                "BaseTracker": {
                    "methods": [
                        "__init__",
                        "_log_failure",
                        "_log_success",
                        "_load_log"
                    ],
                    "docstring": "Base class for tracking and logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\bridge_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_status"
            ],
            "classes": {
                "BridgeWriter": {
                    "methods": [
                        "__init__",
                        "get_status"
                    ],
                    "docstring": "Manages writing responses to the bridge.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\autonomy\\codex_patch_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_patch_status",
                "get_all_patches"
            ],
            "classes": {
                "CodexPatchTracker": {
                    "methods": [
                        "__init__",
                        "get_patch_status",
                        "get_all_patches"
                    ],
                    "docstring": "Tracks and manages code patches generated by Codex.",
                    "base_classes": [
                        "BaseTracker"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\autonomy\\content_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_content_event",
                "log_task_completion",
                "log_insight",
                "get_content_history"
            ],
            "classes": {
                "ContentLoop": {
                    "methods": [
                        "__init__",
                        "log_content_event",
                        "log_task_completion",
                        "log_insight",
                        "get_content_history"
                    ],
                    "docstring": "Manages content generation and memory integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\autonomy\\controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_agent",
                "register_agent",
                "unregister_agent"
            ],
            "classes": {
                "AgentController": {
                    "methods": [
                        "__init__",
                        "get_agent",
                        "register_agent",
                        "unregister_agent"
                    ],
                    "docstring": "Manages agent lifecycle and coordination.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\core_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_response_processor",
                "_get_response_files",
                "__init__",
                "on_created"
            ],
            "classes": {
                "CoreResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_create_response_processor",
                        "_get_response_files"
                    ],
                    "docstring": "Core response loop daemon implementation.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in bridge outbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\core_response_processor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CoreResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes responses for the core response loop.",
                    "base_classes": [
                        "ResponseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\cursor_agent_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_regions",
                "_inject_to_cursor",
                "__init__",
                "on_created"
            ],
            "classes": {
                "CursorAgentBridge": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_inject_to_cursor"
                    ],
                    "docstring": "Handles automated response collection and feedback loops.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in bridge outbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\enhanced_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_regions",
                "_save_agent_regions",
                "_create_response_processor",
                "_get_response_files",
                "_has_region_stabilized",
                "_hash_region",
                "__init__",
                "on_created"
            ],
            "classes": {
                "EnhancedResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_save_agent_regions",
                        "_create_response_processor",
                        "_get_response_files",
                        "_has_region_stabilized",
                        "_hash_region"
                    ],
                    "docstring": "Enhanced response loop daemon with hybrid completion detection.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EnhancedBridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Enhanced handler for bridge outbox events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\autonomy\\error_tracking.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "get_health_metrics",
                "manual_reset",
                "__init__",
                "record_error",
                "record_success",
                "can_execute",
                "get_error_summary",
                "get_agent_health",
                "get_critical_errors",
                "_archive_unfixable_error",
                "clear_errors",
                "manual_reset"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TrackedError": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Base class for tracked errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ArchiveError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to archiving operations.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptFormatError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to prompt formatting.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentInactivityError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to agent inactivity.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogWriteError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to devlog writing.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RecoveryStrategy": {
                    "methods": [],
                    "docstring": "Recovery strategies for different error types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute",
                        "get_health_metrics",
                        "manual_reset"
                    ],
                    "docstring": "Circuit breaker for error rate monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "record_error",
                        "record_success",
                        "can_execute",
                        "get_error_summary",
                        "get_agent_health",
                        "get_critical_errors",
                        "_archive_unfixable_error",
                        "clear_errors",
                        "manual_reset"
                    ],
                    "docstring": "Tracks errors and provides error analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 30
        },
        "dreamos\\core\\autonomy\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages overnight operations and swarm maintenance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\patch_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_validation_history",
                "get_all_validations"
            ],
            "classes": {
                "PatchValidator": {
                    "methods": [
                        "__init__",
                        "get_validation_history",
                        "get_all_validations"
                    ],
                    "docstring": "Validates patches before they are applied.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\autonomy\\processor_mode.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ProcessorMode": {
                    "methods": [],
                    "docstring": "Processor operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\autonomy\\startup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config"
            ],
            "classes": {
                "AutonomySystem": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Coordinates all autonomy components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\autonomy\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "current_state",
                "transition_history",
                "add_state_handler",
                "remove_state_handler",
                "clear_handlers",
                "get_transitions_since",
                "get_last_transition",
                "reset"
            ],
            "classes": {
                "State": {
                    "methods": [],
                    "docstring": "Possible states for autonomous components.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransition": {
                    "methods": [],
                    "docstring": "Record of a state transition.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [],
                    "docstring": "Error raised when a state transition is invalid.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateManager": {
                    "methods": [
                        "__init__",
                        "current_state",
                        "transition_history",
                        "add_state_handler",
                        "remove_state_handler",
                        "clear_handlers",
                        "get_transitions_since",
                        "get_last_transition",
                        "reset"
                    ],
                    "docstring": "Manages state transitions for autonomous components.\n\nThis class provides functionality to:\n- Track current state\n- Validate state transitions\n- Record transition history\n- Handle state-specific actions",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\autonomy\\validation_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_agent_state"
            ],
            "classes": {
                "ValidationEngine": {
                    "methods": [
                        "__init__",
                        "validate_agent_state"
                    ],
                    "docstring": "Stub for ValidationEngine class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\autonomy\\agent_tools\\agent_cellphone.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_injection_log",
                "_load_coords",
                "_check_cooldown",
                "_update_injection_log",
                "type_message",
                "broadcast_message",
                "force_resume_bridge",
                "mass_resume_bridge"
            ],
            "classes": {
                "AgentCellphone": {
                    "methods": [
                        "__init__",
                        "_init_injection_log",
                        "_load_coords",
                        "_check_cooldown",
                        "_update_injection_log",
                        "type_message",
                        "broadcast_message",
                        "force_resume_bridge",
                        "mass_resume_bridge"
                    ],
                    "docstring": "Direct high-priority message injector for agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\autonomy\\agent_tools\\agent_onboarder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_status_file",
                "onboard_agent",
                "onboard_all_agents",
                "_update_status",
                "get_active_agents"
            ],
            "classes": {
                "AgentOnboarder": {
                    "methods": [
                        "__init__",
                        "_init_status_file",
                        "onboard_agent",
                        "onboard_all_agents",
                        "_update_status",
                        "get_active_agents"
                    ],
                    "docstring": "Handles agent onboarding and recovery.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\agent_tools\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_modified",
                "__init__",
                "start",
                "stop",
                "queue_status_check",
                "_check_agents",
                "_check_agent",
                "_recover_agent",
                "get_stalled_agents"
            ],
            "classes": {
                "StatusHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles agent status file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRestarter": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "queue_status_check",
                        "_check_agents",
                        "_check_agent",
                        "_recover_agent",
                        "get_stalled_agents"
                    ],
                    "docstring": "Handles recovery of stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\autonomy\\agent_tools\\heartbeat_monitor.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "start",
                "stop",
                "_check_agents",
                "get_stalled_agents",
                "__init__",
                "on_modified"
            ],
            "classes": {
                "AgentHeartbeatMonitor": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_check_agents",
                        "get_stalled_agents"
                    ],
                    "docstring": "Monitors agent activity and detects stalled agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles devlog file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\autonomy\\agent_tools\\high_priority_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_modified",
                "__init__",
                "start",
                "stop",
                "queue_agent",
                "_process_queue",
                "_process_agent",
                "_parse_intent",
                "_choose_target",
                "_format_prompt"
            ],
            "classes": {
                "OutboxHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles outbox file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HighPriorityDispatcher": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "queue_agent",
                        "_process_queue",
                        "_process_agent",
                        "_parse_intent",
                        "_choose_target",
                        "_format_prompt"
                    ],
                    "docstring": "Orchestrates dynamic agent-to-agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "dreamos\\core\\autonomy\\agent_tools\\resume_controller.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "inject_prompt",
                "inject_task",
                "log_devlog",
                "force_resume",
                "check_agent_status"
            ],
            "classes": {
                "AgentResumeController": {
                    "methods": [
                        "__init__",
                        "inject_prompt",
                        "inject_task",
                        "log_devlog",
                        "force_resume",
                        "check_agent_status"
                    ],
                    "docstring": "Controls agent reactivation and task enforcement.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\base\\autonomy_loop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AutonomyLoopRunner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Runner for executing autonomy loops.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\base\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\autonomy\\base\\file_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_process",
                "on_created",
                "on_modified",
                "on_deleted",
                "get_file_manager"
            ],
            "classes": {
                "BaseFileHandler": {
                    "methods": [
                        "__init__",
                        "_should_process",
                        "on_created",
                        "on_modified",
                        "on_deleted",
                        "get_file_manager"
                    ],
                    "docstring": "Base class for file system event handlers with unified event processing.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\base\\response_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_response",
                "_validate_response",
                "__init__",
                "clear",
                "is_empty",
                "queue_size"
            ],
            "classes": {
                "ResponseLoopConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for response loops.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseMetadata": {
                    "methods": [],
                    "docstring": "Metadata for response processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseLoop": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "Base class for all response loop daemons.\n\nProvides common functionality for:\n- File polling and response processing\n- State management and transitions\n- Error handling and recovery\n- Resource cleanup",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseLoop": {
                    "methods": [
                        "__init__",
                        "clear",
                        "is_empty",
                        "queue_size"
                    ],
                    "docstring": "Response loop for agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\autonomy\\base\\response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "release",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "ResourceManager": {
                    "methods": [
                        "__init__",
                        "release"
                    ],
                    "docstring": "Manages concurrent resource usage.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseErrorHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles response processing errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response processors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseLoopDaemon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response loop daemons.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\autonomy\\base\\runner_core.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "parse_test_failures"
            ],
            "classes": {
                "RunnerConfig": {
                    "methods": [],
                    "docstring": "Protocol for runner configuration.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RunnerCore": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "parse_test_failures"
                    ],
                    "docstring": "Base class for all runners with common functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\base\\runner_lifecycle.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RunnerConfig": {
                    "methods": [],
                    "docstring": "Configuration protocol for runners.",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RunnerLifecycleMixin": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mixin for managing runner lifecycle.\n\nThis mixin provides core functionality for:\n- Starting/stopping runners\n- Managing state transitions\n- Handling errors and retries\n- Resource cleanup",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\autonomy\\base\\state_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_metrics",
                "_setup_recovery",
                "_validate_backup",
                "get_recovery_events",
                "_validate_transition",
                "get_state",
                "get_metadata",
                "get_history",
                "is_stuck",
                "get_stuck_agents",
                "_update_metrics",
                "get_stats",
                "get_all_stats"
            ],
            "classes": {
                "AgentStateType": {
                    "methods": [],
                    "docstring": "Enumeration of possible agent states.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [],
                    "docstring": "Raised when a state transition is invalid.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateCorruptionError": {
                    "methods": [],
                    "docstring": "Raised when state data is corrupted.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseStateManager": {
                    "methods": [
                        "__init__",
                        "_setup_metrics",
                        "_setup_recovery",
                        "_validate_backup",
                        "get_recovery_events",
                        "_validate_transition",
                        "get_state",
                        "get_metadata",
                        "get_history",
                        "is_stuck",
                        "get_stuck_agents",
                        "_update_metrics",
                        "get_stats",
                        "get_all_stats"
                    ],
                    "docstring": "Base class for unified state management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\autonomy\\error\\base.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__init__",
                "record_failure",
                "record_success",
                "can_execute",
                "get_health_metrics",
                "manual_reset"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TrackedError": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Base class for tracked errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CircuitBreaker": {
                    "methods": [
                        "__init__",
                        "record_failure",
                        "record_success",
                        "can_execute",
                        "get_health_metrics",
                        "manual_reset"
                    ],
                    "docstring": "Circuit breaker for error rate monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\autonomy\\error\\error_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_error_severity",
                "_should_retry",
                "_calculate_retry_delay"
            ],
            "classes": {
                "RetryStrategy": {
                    "methods": [],
                    "docstring": "Retry strategies.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorHandler": {
                    "methods": [
                        "__init__",
                        "_get_error_severity",
                        "_should_retry",
                        "_calculate_retry_delay"
                    ],
                    "docstring": "Handles error recovery and retry logic.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\autonomy\\error\\error_reporter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_report",
                "save_report",
                "_count_by_severity",
                "_count_by_agent",
                "_count_by_type"
            ],
            "classes": {
                "ErrorReporter": {
                    "methods": [
                        "__init__",
                        "generate_report",
                        "save_report",
                        "_count_by_severity",
                        "_count_by_agent",
                        "_count_by_type"
                    ],
                    "docstring": "Handles error reporting and notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\error\\error_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_error",
                "record_success",
                "can_execute",
                "get_error_summary"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "record_error",
                        "record_success",
                        "can_execute",
                        "get_error_summary"
                    ],
                    "docstring": "Tracks and manages error states.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\error\\tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_error",
                "get_error_count",
                "get_recent_errors"
            ],
            "classes": {
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "track_error",
                        "get_error_count",
                        "get_recent_errors"
                    ],
                    "docstring": "Tracks and manages errors in the system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\autonomy\\error\\types.py": {
            "language": ".py",
            "functions": [
                "create_error",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__",
                "__post_init__"
            ],
            "classes": {
                "ArchiveError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to archiving operations.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PromptFormatError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to prompt formatting.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentInactivityError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to agent inactivity.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogWriteError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to devlog writing.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConnectionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to bridge connection.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskExecutionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to task execution.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResourceExhaustionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to resource exhaustion.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateTransitionError": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Error related to state transitions.",
                    "base_classes": [
                        "TrackedError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos\\core\\autonomy\\handlers\\base_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BaseHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all handlers with common functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\handlers\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes agent responses and applies code changes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\handlers\\bridge\\base_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "on_modified"
            ],
            "classes": {
                "BaseBridgeHandler": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "on_modified"
                    ],
                    "docstring": "Base class for all bridge handlers with common functionality.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\autonomy\\handlers\\bridge\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes agent responses and applies code changes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\logging\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log",
                "info",
                "error",
                "warning",
                "debug"
            ],
            "classes": {
                "LogManager": {
                    "methods": [
                        "__init__",
                        "log",
                        "info",
                        "error",
                        "warning",
                        "debug"
                    ],
                    "docstring": "Stub implementation of LogManager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\autonomy\\memory\\response_memory_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "is_processed",
                "track_processing",
                "_save_memory",
                "get_stats",
                "mark_processed"
            ],
            "classes": {
                "ResponseMemoryTracker": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "is_processed",
                        "track_processing",
                        "_save_memory",
                        "get_stats",
                        "mark_processed"
                    ],
                    "docstring": "Tracks processed messages to prevent duplicate processing.",
                    "base_classes": [
                        "BaseTracker"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\memory\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "test_data_dir",
                "test_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\processors\\factory.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\autonomy\\processors\\response.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AutonomyResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and validates responses in the autonomy system.",
                    "base_classes": [
                        "ResponseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\autonomy\\test_debug\\fix_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_analyze_failure",
                "_get_source_content",
                "_write_source_content",
                "_extract_missing_import",
                "_add_import_statement",
                "_extract_assertion_values",
                "_update_assertion",
                "_extract_error_pattern",
                "_apply_generic_fix",
                "_fix_type_error",
                "_fix_value_error",
                "_fix_attribute_error",
                "_fix_key_error"
            ],
            "classes": {
                "FixManager": {
                    "methods": [
                        "__init__",
                        "_analyze_failure",
                        "_get_source_content",
                        "_write_source_content",
                        "_extract_missing_import",
                        "_add_import_statement",
                        "_extract_assertion_values",
                        "_update_assertion",
                        "_extract_error_pattern",
                        "_apply_generic_fix",
                        "_fix_type_error",
                        "_fix_value_error",
                        "_fix_attribute_error",
                        "_fix_key_error"
                    ],
                    "docstring": "Manages test failure analysis and fixes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\core\\autonomy\\test_debug\\task_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "_get_working_tasks",
                "_get_future_tasks",
                "has_pending_changes",
                "_get_test_file"
            ],
            "classes": {
                "TaskManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "_get_working_tasks",
                        "_get_future_tasks",
                        "has_pending_changes",
                        "_get_test_file"
                    ],
                    "docstring": "Manages task creation and updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\test_debug\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_validate_config",
                "get_path",
                "get_test_config",
                "get_fix_config",
                "update_config",
                "_deep_merge"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_validate_config",
                        "get_path",
                        "get_test_config",
                        "get_fix_config",
                        "update_config",
                        "_deep_merge"
                    ],
                    "docstring": "Manages configuration loading and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\autonomy\\test_debug\\utils\\debug_utils.py": {
            "language": ".py",
            "functions": [
                "parse_test_failures",
                "create_fix_request",
                "save_fix_request",
                "load_fix_request",
                "archive_fix_request",
                "extract_agent_id"
            ],
            "classes": {
                "TestDebugUtils": {
                    "methods": [
                        "parse_test_failures",
                        "create_fix_request",
                        "save_fix_request",
                        "load_fix_request",
                        "archive_fix_request"
                    ],
                    "docstring": "Shared utilities for test debugging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebugUtils": {
                    "methods": [
                        "extract_agent_id"
                    ],
                    "docstring": "Utilities for test debugging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\test_debug\\utils\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "save_state",
                "increment_cycle",
                "add_failed_test",
                "add_passed_test",
                "add_processing_test",
                "remove_processing_test",
                "get_state"
            ],
            "classes": {
                "StateManager": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "save_state",
                        "increment_cycle",
                        "add_failed_test",
                        "add_passed_test",
                        "add_processing_test",
                        "remove_processing_test",
                        "get_state"
                    ],
                    "docstring": "Manages state persistence and retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\autonomy\\utils\\async_file_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_file_info",
                "clear_cache",
                "last_check",
                "watched_files"
            ],
            "classes": {
                "AsyncFileWatcher": {
                    "methods": [
                        "__init__",
                        "get_file_info",
                        "clear_cache",
                        "last_check",
                        "watched_files"
                    ],
                    "docstring": "Asynchronously watches a directory for file changes.\n\nThis class provides functionality to monitor a directory for file changes\nusing polling. It maintains a cache of file modification times to detect\nchanges between polls.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\autonomy\\utils\\response_utils.py": {
            "language": ".py",
            "functions": [
                "load_response_file",
                "archive_response_file",
                "extract_agent_id_from_file",
                "validate_response",
                "__init__",
                "__init__"
            ],
            "classes": {
                "ResourceManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages resource allocation and limits.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseErrorHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles response processing errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\autonomy\\validation\\engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_validator",
                "validate",
                "validate_required_fields",
                "validate_field_type"
            ],
            "classes": {
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Result of a validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationEngine": {
                    "methods": [
                        "__init__",
                        "add_validator",
                        "validate",
                        "validate_required_fields",
                        "validate_field_type"
                    ],
                    "docstring": "Engine for validating responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\bridge\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_config",
                "__init__",
                "_load_config",
                "get"
            ],
            "classes": {
                "BaseBridge": {
                    "methods": [
                        "__init__",
                        "_validate_config"
                    ],
                    "docstring": "Base class for all bridge implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "get"
                    ],
                    "docstring": "Bridge configuration manager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\bridge\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge for interacting with ChatGPT API.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\bridge\\daemon.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ResponseLoopDaemon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Daemon that monitors agent mailboxes and processes messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\bridge\\inbox_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_metrics"
            ],
            "classes": {
                "BridgeInboxHandler": {
                    "methods": [
                        "__init__",
                        "get_metrics"
                    ],
                    "docstring": "Handles incoming messages in the bridge system.",
                    "base_classes": [
                        "BaseHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\bridge\\response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "_create_response_processor",
                "_get_response_files",
                "__init__",
                "on_created"
            ],
            "classes": {
                "ResponseLoopDaemon": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "_create_response_processor",
                        "_get_response_files"
                    ],
                    "docstring": "Monitors agent responses and generates new prompts for the ChatGPT bridge.",
                    "base_classes": [
                        "BaseResponseLoopDaemon"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMailboxHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file creation events in agent mailbox.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\bridge\\run_response_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\bridge\\base\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "get",
                "set",
                "__init__"
            ],
            "classes": {
                "ErrorSeverity": {
                    "methods": [],
                    "docstring": "Error severity levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for bridge errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "get",
                        "set"
                    ],
                    "docstring": "Configuration for bridge implementations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\bridge\\base\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_validate_data"
            ],
            "classes": {
                "BaseHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for bridge handlers with unified file system event handling.",
                    "base_classes": [
                        "BaseFileHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeHandler": {
                    "methods": [
                        "__init__",
                        "_validate_data"
                    ],
                    "docstring": "Bridge-specific handler implementation.",
                    "base_classes": [
                        "BaseHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\bridge\\base\\monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "start",
                "stop"
            ],
            "classes": {
                "BaseMonitor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge monitors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMonitor": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop"
                    ],
                    "docstring": "Bridge-specific monitor implementation.",
                    "base_classes": [
                        "BaseMonitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\bridge\\base\\processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "total_processed",
                "total_failed",
                "_update_metrics",
                "get_metrics"
            ],
            "classes": {
                "BridgeProcessor": {
                    "methods": [
                        "__init__",
                        "total_processed",
                        "total_failed",
                        "_update_metrics",
                        "get_metrics"
                    ],
                    "docstring": "Bridge-specific processor implementation.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\bridge\\base\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_validate_required_fields",
                "_validate_field_types",
                "_validate_field_values"
            ],
            "classes": {
                "BaseValidator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all bridge validators.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeValidator": {
                    "methods": [
                        "__init__",
                        "_validate_required_fields",
                        "_validate_field_types",
                        "_validate_field_values"
                    ],
                    "docstring": "Bridge-specific validator implementation.",
                    "base_classes": [
                        "BaseValidator"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\bridge\\cache\\bridge_cache.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_cache_path",
                "add_interaction",
                "get_interactions",
                "get_average_latency"
            ],
            "classes": {
                "BridgeCache": {
                    "methods": [
                        "__init__",
                        "_get_cache_path",
                        "add_interaction",
                        "get_interactions",
                        "get_average_latency"
                    ],
                    "docstring": "Manages caching of bridge interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\bridge\\chatgpt\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "format_message",
                "format_system_message",
                "format_user_message",
                "format_assistant_message"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "format_message",
                        "format_system_message",
                        "format_user_message",
                        "format_assistant_message"
                    ],
                    "docstring": "Unified ChatGPT bridge implementation with enhanced features.",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\bridge\\chatgpt\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_metrics",
                "_update_metrics",
                "_load_config",
                "cleanup",
                "_init_browser",
                "_navigate_to_chatgpt",
                "_wait_for_page_load",
                "_wait_for_response"
            ],
            "classes": {
                "ChatGPTBridgeLoop": {
                    "methods": [
                        "__init__",
                        "_init_metrics",
                        "_update_metrics",
                        "_load_config",
                        "cleanup",
                        "_init_browser",
                        "_navigate_to_chatgpt",
                        "_wait_for_page_load",
                        "_wait_for_response"
                    ],
                    "docstring": "Handles the communication loop with ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\bridge\\chatgpt\\prompt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_template",
                "add_template",
                "remove_template",
                "list_templates"
            ],
            "classes": {
                "PromptManager": {
                    "methods": [
                        "__init__",
                        "_get_template",
                        "add_template",
                        "remove_template",
                        "list_templates"
                    ],
                    "docstring": "Manages prompt generation and template handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\bridge\\chatgpt\\response_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "extract_reply",
                "parse_output"
            ],
            "classes": {
                "ChatGPTResponseHandler": {
                    "methods": [
                        "__init__",
                        "extract_reply",
                        "parse_output"
                    ],
                    "docstring": "Handles processing and validation of ChatGPT responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\bridge\\config\\loader.py": {
            "language": ".py",
            "functions": [
                "load_config",
                "_load_mode_config",
                "_load_agent_config",
                "_merge_configs",
                "_validate_config",
                "save_agent_config",
                "deep_merge",
                "deep_merge",
                "__init__",
                "load_config",
                "_load_mode_config",
                "_load_agent_config",
                "_merge_configs",
                "_validate_config",
                "save_agent_config",
                "deep_merge"
            ],
            "classes": {
                "BridgeMode": {
                    "methods": [],
                    "docstring": "Bridge operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeConfigLoader": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "_load_mode_config",
                        "_load_agent_config",
                        "_merge_configs",
                        "_validate_config",
                        "save_agent_config"
                    ],
                    "docstring": "Loads and validates bridge configurations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\bridge\\cursor\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Bridge implementation for Cursor UI automation.",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\bridge\\handlers\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created"
            ],
            "classes": {
                "BaseBridgeHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Base class for all bridge handlers.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\bridge\\handlers\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Coordinates communication between inbox and outbox handlers.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\bridge\\handlers\\cursor_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorBridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Cursor bridge handler with unified logging and metrics.",
                    "base_classes": [
                        "BridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\bridge\\handlers\\inbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_response"
            ],
            "classes": {
                "BridgeInboxHandler": {
                    "methods": [
                        "__init__",
                        "write_response"
                    ],
                    "docstring": "Handles incoming messages from external sources and routes them to agent mailboxes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\bridge\\handlers\\inbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\bridge\\handlers\\outbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_response",
                "get_metrics"
            ],
            "classes": {
                "BridgeOutboxHandler": {
                    "methods": [
                        "__init__",
                        "write_response",
                        "get_metrics"
                    ],
                    "docstring": "Handles outgoing messages for the bridge system using agent-local mailboxes.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\bridge\\handlers\\outbox_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\bridge\\logging\\logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_loggers",
                "log_message",
                "log_response",
                "log_metric",
                "log_health",
                "log_error",
                "get_logs"
            ],
            "classes": {
                "BridgeLogger": {
                    "methods": [
                        "__init__",
                        "_setup_loggers",
                        "log_message",
                        "log_response",
                        "log_metric",
                        "log_health",
                        "log_error",
                        "get_logs"
                    ],
                    "docstring": "Centralized logging for bridge operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\bridge\\monitoring\\discord.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_color"
            ],
            "classes": {
                "EventType": {
                    "methods": [],
                    "docstring": "Types of events that can be sent to Discord.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DiscordHook": {
                    "methods": [
                        "__init__",
                        "_get_color"
                    ],
                    "docstring": "Handles Discord webhook integration for notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\bridge\\monitoring\\health.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "__init__",
                "_load_health",
                "_save_health",
                "is_healthy",
                "get_health_status"
            ],
            "classes": {
                "BridgeHealth": {
                    "methods": [
                        "__post_init__",
                        "to_dict"
                    ],
                    "docstring": "Bridge health status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMonitor": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_save_health",
                        "is_healthy",
                        "get_health_status"
                    ],
                    "docstring": "Monitors bridge health and status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\bridge\\monitoring\\metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update",
                "to_dict",
                "__init__",
                "update_metrics",
                "get_metrics"
            ],
            "classes": {
                "BridgeHealth": {
                    "methods": [
                        "__init__",
                        "update",
                        "to_dict"
                    ],
                    "docstring": "Tracks bridge health status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeMetrics": {
                    "methods": [
                        "__init__",
                        "update_metrics",
                        "get_metrics"
                    ],
                    "docstring": "Tracks metrics for bridge operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\bridge\\scripts\\run_response_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\bridge\\validation\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate",
                "_is_valid_message_type",
                "_validate_content"
            ],
            "classes": {
                "BridgeMessage": {
                    "methods": [],
                    "docstring": "Bridge message data class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_is_valid_message_type",
                        "_validate_content"
                    ],
                    "docstring": "Validator for bridge messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\captain\\captain.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_task"
            ],
            "classes": {
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Priority levels for tasks.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Task": {
                    "methods": [],
                    "docstring": "Represents a task to be executed by an agent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Captain": {
                    "methods": [
                        "__init__",
                        "create_task"
                    ],
                    "docstring": "Oversees agent coordination and task management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\captain\\task_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "_calculate_priority_score",
                "_is_task_ready",
                "get_scheduled_tasks"
            ],
            "classes": {
                "ScheduledTask": {
                    "methods": [],
                    "docstring": "Represents a task scheduled for execution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskScheduler": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_calculate_priority_score",
                        "_is_task_ready",
                        "get_scheduled_tasks"
                    ],
                    "docstring": "Manages task scheduling and prioritization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\codex\\codex_quality_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_validation_prompt",
                "_log_judgment"
            ],
            "classes": {
                "CodexController": {
                    "methods": [
                        "__init__",
                        "_format_validation_prompt",
                        "_log_judgment"
                    ],
                    "docstring": "Quality control agent using headless Chrome and ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\config\\bridge_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load",
                "save",
                "validate"
            ],
            "classes": {
                "BridgeConfig": {
                    "methods": [
                        "__init__",
                        "load",
                        "save",
                        "validate"
                    ],
                    "docstring": "Configuration for Dream.OS bridges.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\config\\config_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "save_config",
                "get_config_path",
                "config_exists"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "save_config",
                        "get_config_path",
                        "config_exists"
                    ],
                    "docstring": "Manages configuration for the Dream.OS system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\config\\unified_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get",
                "set",
                "validate",
                "_validate_value",
                "__init__",
                "get_section",
                "load_config",
                "save_config",
                "validate_all"
            ],
            "classes": {
                "ConfigValue": {
                    "methods": [],
                    "docstring": "A configuration value with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigSection": {
                    "methods": [
                        "__init__",
                        "get",
                        "set",
                        "validate",
                        "_validate_value"
                    ],
                    "docstring": "A section of configuration values.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "UnifiedConfigManager": {
                    "methods": [
                        "__init__",
                        "get_section",
                        "load_config",
                        "save_config",
                        "validate_all"
                    ],
                    "docstring": "Unified configuration manager for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\cursor\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "type_text",
                "press_ctrl_s"
            ],
            "classes": {
                "CursorController": {
                    "methods": [
                        "__init__",
                        "type_text",
                        "press_ctrl_s"
                    ],
                    "docstring": "Controls the Cursor IDE for applying code changes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\discord_bot\\activity.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ActivityType": {
                    "methods": [],
                    "docstring": "Discord activity types.",
                    "base_classes": [
                        "IntEnum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\errors\\bridge_errors.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "BridgeError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Base exception for bridge-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\gpt_router\\bridge_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log"
            ],
            "classes": {
                "BridgeLogger": {
                    "methods": [
                        "__init__",
                        "log"
                    ],
                    "docstring": "Simple JSON line logger.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\gpt_router\\cli.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\gpt_router\\navigator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__iter__",
                "__next__"
            ],
            "classes": {
                "ConversationNavigator": {
                    "methods": [
                        "__init__",
                        "__iter__",
                        "__next__"
                    ],
                    "docstring": "Cycle through conversation URLs.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\gpt_router\\prompt_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_conversation"
            ],
            "classes": {
                "ChatGPTPromptEngine": {
                    "methods": [
                        "__init__",
                        "process_conversation"
                    ],
                    "docstring": "Orchestrates prompt delivery and response collection.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\gpt_router\\prompt_router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_profile",
                "decide_prompt"
            ],
            "classes": {
                "PromptRouter": {
                    "methods": [
                        "__init__",
                        "_load_profile",
                        "decide_prompt"
                    ],
                    "docstring": "Decide which prompt and GPT profile to use.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\gpt_router\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CodexValidator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Check responses for hallucinations and format errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\handlers\\handler_utils.py": {
            "language": ".py",
            "functions": [
                "structured_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\handlers\\response_processor_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_processor"
            ],
            "classes": {
                "ResponseProcessorFactory": {
                    "methods": [
                        "__init__",
                        "create_processor"
                    ],
                    "docstring": "Factory for creating response processors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\handlers\\unified_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_operation"
            ],
            "classes": {
                "UnifiedHandler": {
                    "methods": [
                        "__init__",
                        "log_operation"
                    ],
                    "docstring": "Base class for all handlers in the system.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\handlers\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "event_loop",
                "test_dir",
                "test_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\integration\\bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_bridge",
                "_create_processor",
                "_create_response"
            ],
            "classes": {
                "BridgeIntegration": {
                    "methods": [
                        "__init__",
                        "_create_bridge",
                        "_create_processor",
                        "_create_response"
                    ],
                    "docstring": "Bridge integration facade.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\integrations\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Main service for ChatGPT integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\io\\atomic.py": {
            "language": ".py",
            "functions": [
                "safe_read",
                "safe_write"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\io\\json_ops.py": {
            "language": ".py",
            "functions": [
                "read_json",
                "write_json",
                "read_json",
                "write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\logging\\agent_logger.py": {
            "language": ".py",
            "functions": [
                "get_logger",
                "__init__",
                "log",
                "_create_inbox_message",
                "get_log",
                "clear_log"
            ],
            "classes": {
                "AgentLogger": {
                    "methods": [
                        "__init__",
                        "log",
                        "_create_inbox_message",
                        "get_log",
                        "clear_log"
                    ],
                    "docstring": "Handles agent development logging and Discord notifications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\logging\\log_config.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "get_log_path",
                "get_metrics_path",
                "get_retention_date",
                "get_log_path",
                "get_metrics_path",
                "get_retention_date",
                "setup_logging",
                "should_log",
                "from_string",
                "to_dict",
                "from_dict",
                "save",
                "load",
                "__str__",
                "__repr__"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [
                        "should_log",
                        "from_string"
                    ],
                    "docstring": "Standardized log levels for Dream.OS logging system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [],
                    "docstring": "Logging configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\logging\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "get_metrics",
                "shutdown"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Log levels with numeric values.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__init__",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "get_metrics",
                        "shutdown"
                    ],
                    "docstring": "Unified logging manager with metrics integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\logging\\log_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_log_path",
                "_get_handle_key",
                "_get_file_handle",
                "write_log",
                "read_logs",
                "clear_log",
                "close"
            ],
            "classes": {
                "LogWriter": {
                    "methods": [
                        "__init__",
                        "_get_log_path",
                        "_get_handle_key",
                        "_get_file_handle",
                        "write_log",
                        "read_logs",
                        "clear_log",
                        "close"
                    ],
                    "docstring": "Thread-safe log writer with proper file locking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\messaging\\agent_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentBridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles communication between agents and the bridge system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\messaging\\base.py": {
            "language": ".py",
            "functions": [
                "validate_message",
                "get_validation_errors"
            ],
            "classes": {
                "MessageType": {
                    "methods": [],
                    "docstring": "Types of messages in the system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessagePriority": {
                    "methods": [],
                    "docstring": "Message priority levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Message": {
                    "methods": [],
                    "docstring": "Base message class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHandler": {
                    "methods": [],
                    "docstring": "Base class for message handlers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageQueue": {
                    "methods": [],
                    "docstring": "Base class for message queues.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageRouter": {
                    "methods": [],
                    "docstring": "Base class for message routers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageValidator": {
                    "methods": [
                        "validate_message",
                        "get_validation_errors"
                    ],
                    "docstring": "Base class for message validators.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\messaging\\bridge_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_enhance_prompt",
                "get_health_status",
                "get_agent_responses"
            ],
            "classes": {
                "BridgeIntegration": {
                    "methods": [
                        "__init__",
                        "_enhance_prompt",
                        "get_health_status",
                        "get_agent_responses"
                    ],
                    "docstring": "Core integration for ChatGPT bridge functionality.\n\nThis class provides a high-level interface for agents to interact with ChatGPT\nthrough the bridge system. It handles message routing, response tracking,\nand health monitoring.\n\nAttributes:\n    bridge: Core ChatGPT bridge instance\n    queue: Request queue for managing messages\n    health: Health monitoring system\n    tracker: Response tracking system\n    config: Bridge configuration",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\messaging\\captain_phone.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "reset_singleton",
                "send_message",
                "broadcast_message",
                "get_messages",
                "acknowledge_message",
                "_monitor_response",
                "_save_response",
                "_get_all_agents",
                "clear_messages"
            ],
            "classes": {
                "CaptainPhone": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "reset_singleton",
                        "send_message",
                        "broadcast_message",
                        "get_messages",
                        "acknowledge_message",
                        "_monitor_response",
                        "_save_response",
                        "_get_all_agents",
                        "clear_messages"
                    ],
                    "docstring": "Captain phone for managing agent communications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\messaging\\cell_phone.py": {
            "language": ".py",
            "functions": [
                "validate_phone_number",
                "format_phone_number",
                "__init__",
                "_load_queue",
                "_save_queue",
                "add_message",
                "get_messages",
                "clear_queue",
                "__init__",
                "_load_coordinates",
                "__new__",
                "__init__",
                "reset_singleton",
                "broadcast_message"
            ],
            "classes": {
                "MessageMode": {
                    "methods": [],
                    "docstring": "Message delivery modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageQueue": {
                    "methods": [
                        "__init__",
                        "_load_queue",
                        "_save_queue",
                        "add_message",
                        "get_messages",
                        "clear_queue"
                    ],
                    "docstring": "Queue for storing and retrieving messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CellPhone": {
                    "methods": [
                        "__init__",
                        "_load_coordinates"
                    ],
                    "docstring": "Handles injecting prompts into agent conversations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CaptainPhone": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "reset_singleton",
                        "broadcast_message"
                    ],
                    "docstring": "Manages messaging for the captain agent.",
                    "base_classes": [
                        "CellPhone"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamos\\core\\messaging\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_health",
                "_update_health",
                "start",
                "stop",
                "_process_request",
                "_worker_loop",
                "_ensure_valid_session",
                "_handle_login",
                "_launch_browser",
                "_send_prompt",
                "_focus_cursor_window",
                "_paste_to_cursor",
                "_load_pending_requests",
                "_save_pending_requests",
                "_worker_loop"
            ],
            "classes": {
                "ChatGPTBridge": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_update_health",
                        "start",
                        "stop",
                        "_process_request",
                        "_worker_loop",
                        "_ensure_valid_session",
                        "_handle_login",
                        "_launch_browser",
                        "_send_prompt",
                        "_focus_cursor_window",
                        "_paste_to_cursor",
                        "_load_pending_requests",
                        "_save_pending_requests",
                        "_worker_loop"
                    ],
                    "docstring": "Manages communication between Dream.OS agents and ChatGPT.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos\\core\\messaging\\common.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "from_dict",
                "to_dict",
                "from_dict",
                "validate"
            ],
            "classes": {
                "MessageContext": {
                    "methods": [
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Context for message processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Message": {
                    "methods": [
                        "to_dict",
                        "from_dict",
                        "validate"
                    ],
                    "docstring": "Base message structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\messaging\\enums.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "MessageMode": {
                    "methods": [],
                    "docstring": "Modes for message delivery.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessagePriority": {
                    "methods": [],
                    "docstring": "Priority levels for messages.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageType": {
                    "methods": [],
                    "docstring": "Types of messages in the system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageStatus": {
                    "methods": [],
                    "docstring": "Message delivery and processing status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\messaging\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_handler",
                "remove_handler",
                "set_default_handler",
                "set_error_handler",
                "is_processing",
                "queue_size"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__",
                        "add_handler",
                        "remove_handler",
                        "set_default_handler",
                        "set_error_handler",
                        "is_processing",
                        "queue_size"
                    ],
                    "docstring": "Processor for handling messages.",
                    "base_classes": [
                        "MessageHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\messaging\\history.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_history",
                "_save_history"
            ],
            "classes": {
                "PersistentMessageHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history"
                    ],
                    "docstring": "Persistent message history implementation.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\messaging\\message.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\messaging\\message_builder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_message",
                "add_template",
                "remove_template"
            ],
            "classes": {
                "MessageType": {
                    "methods": [],
                    "docstring": "Enumeration of message types.\n\nAttributes:\n    SUCCESS: Indicates successful operation completion\n    ERROR: Indicates operation failure\n    INFO: General information message\n    WARNING: Warning message\n    PROGRESS: Progress update message\n    STATUS: Status update message\n    COMMAND: Command-related message\n    SYSTEM: System-level message",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageTemplate": {
                    "methods": [],
                    "docstring": "Template for creating messages.\n\nAttributes:\n    type: The type of message (SUCCESS, ERROR, etc.)\n    template: The template string with placeholders\n    mode: The message mode (TASK, SYSTEM, etc.)\n    default_data: Default values for template placeholders",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageBuilder": {
                    "methods": [
                        "__init__",
                        "create_message",
                        "add_template",
                        "remove_template"
                    ],
                    "docstring": "Builder for creating consistent UI messages.\n\nThis class implements the singleton pattern to ensure a single source of truth\nfor message templates and formatting rules across the application.\n\nAttributes:\n    _templates: Dictionary of message templates by type and name",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\messaging\\message_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_agent_status",
                "_save_agent_status",
                "_load_agent_status",
                "is_valid_message",
                "sanitize_filename",
                "handle_corrupted_inbox",
                "send_message",
                "get_messages",
                "mark_as_processed",
                "cleanup_old_messages",
                "get_agent_status",
                "update_agent_status"
            ],
            "classes": {
                "MessageValidationError": {
                    "methods": [],
                    "docstring": "Raised when message validation fails.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHandler": {
                    "methods": [
                        "__init__",
                        "_init_agent_status",
                        "_save_agent_status",
                        "_load_agent_status",
                        "is_valid_message",
                        "sanitize_filename",
                        "handle_corrupted_inbox",
                        "send_message",
                        "get_messages",
                        "mark_as_processed",
                        "cleanup_old_messages",
                        "get_agent_status",
                        "update_agent_status"
                    ],
                    "docstring": "Handles message routing and delivery between agents with security validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\core\\messaging\\message_loop.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageLoop": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Asynchronous message loop for processing messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\messaging\\message_processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_handler",
                "unregister_handler",
                "_save_message",
                "_load_message"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__",
                        "register_handler",
                        "unregister_handler",
                        "_save_message",
                        "_load_message"
                    ],
                    "docstring": "Handles message processing and routing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\messaging\\message_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_queue",
                "_get_lock",
                "enqueue",
                "dequeue",
                "peek",
                "clear",
                "subscribe",
                "unsubscribe",
                "_notify_subscribers",
                "get_queue_size",
                "get_all_messages"
            ],
            "classes": {
                "MessageQueue": {
                    "methods": [
                        "__init__",
                        "_get_queue",
                        "_get_lock",
                        "enqueue",
                        "dequeue",
                        "peek",
                        "clear",
                        "subscribe",
                        "unsubscribe",
                        "_notify_subscribers",
                        "get_queue_size",
                        "get_all_messages"
                    ],
                    "docstring": "Thread-safe message queue with priority support.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\messaging\\message_record.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_message",
                "get_history",
                "clear_history"
            ],
            "classes": {
                "MessageRecord": {
                    "methods": [
                        "__init__",
                        "record_message",
                        "get_history",
                        "clear_history"
                    ],
                    "docstring": "Tracks message history and persistence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\messaging\\message_system.py": {
            "language": ".py",
            "functions": [
                "enqueue",
                "get_messages",
                "acknowledge",
                "__init__",
                "_load_queue",
                "_save_queue",
                "enqueue",
                "get_messages",
                "acknowledge",
                "record",
                "get_history",
                "__init__",
                "_load_history",
                "_save_history",
                "record",
                "get_history",
                "route",
                "__init__",
                "send",
                "receive",
                "acknowledge",
                "get_history"
            ],
            "classes": {
                "MessageQueue": {
                    "methods": [
                        "enqueue",
                        "get_messages",
                        "acknowledge"
                    ],
                    "docstring": "Abstract base class for message queue implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_load_queue",
                        "_save_queue",
                        "enqueue",
                        "get_messages",
                        "acknowledge"
                    ],
                    "docstring": "Persistent message queue using JSON storage.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHistory": {
                    "methods": [
                        "record",
                        "get_history"
                    ],
                    "docstring": "Abstract base class for message history implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JsonMessageHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history",
                        "record",
                        "get_history"
                    ],
                    "docstring": "Message history implementation using JSON storage.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageRouter": {
                    "methods": [
                        "route"
                    ],
                    "docstring": "Abstract base class for message routing implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageSystem": {
                    "methods": [
                        "__init__",
                        "send",
                        "receive",
                        "acknowledge",
                        "get_history"
                    ],
                    "docstring": "Unified message system for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "dreamos\\core\\messaging\\messaging.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "Message": {
                    "methods": [],
                    "docstring": "Represents a message with metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\messaging\\phones.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "send_message",
                "_monitor_response",
                "_save_response",
                "broadcast_message",
                "_get_all_agents"
            ],
            "classes": {
                "Phone": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base phone interface for agent communication.",
                    "base_classes": [
                        "BaseMessagingComponent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CaptainPhone": {
                    "methods": [
                        "__init__",
                        "send_message",
                        "_monitor_response",
                        "_save_response",
                        "broadcast_message",
                        "_get_all_agents"
                    ],
                    "docstring": "Special phone interface for the captain to communicate with agents.",
                    "base_classes": [
                        "Phone"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\messaging\\pipeline.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessagePipeline": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles the processing of messages through the system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\messaging\\queue.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AsyncMessageQueue": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Asynchronous message queue implementation.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\messaging\\request_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_requests",
                "_save_requests",
                "add_request",
                "update_request",
                "get_pending_requests",
                "clear_completed"
            ],
            "classes": {
                "Request": {
                    "methods": [],
                    "docstring": "Request in the queue.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RequestQueue": {
                    "methods": [
                        "__init__",
                        "_load_requests",
                        "_save_requests",
                        "add_request",
                        "update_request",
                        "get_pending_requests",
                        "clear_completed"
                    ],
                    "docstring": "Manages request queue for bridges.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\messaging\\response_collector.py": {
            "language": ".py",
            "functions": [
                "collect_response",
                "load_regions",
                "save_regions",
                "__init__",
                "load_template",
                "detect_copy_button",
                "click_copy_button",
                "__init__",
                "capture",
                "is_stable",
                "try_copy_response",
                "__init__",
                "_load_agent_regions",
                "_find_cursor_windows",
                "_get_cursor_text",
                "start_collecting",
                "_save_response",
                "get_saved_responses",
                "get_latest_response",
                "clear_responses"
            ],
            "classes": {
                "CopyButtonDetector": {
                    "methods": [
                        "__init__",
                        "load_template",
                        "detect_copy_button",
                        "click_copy_button"
                    ],
                    "docstring": "Detects and interacts with the copy button in Cursor.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRegion": {
                    "methods": [
                        "__init__",
                        "capture",
                        "is_stable",
                        "try_copy_response"
                    ],
                    "docstring": "Defines a region for monitoring agent responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseCollector": {
                    "methods": [
                        "__init__",
                        "_load_agent_regions",
                        "_find_cursor_windows",
                        "_get_cursor_text",
                        "start_collecting",
                        "_save_response",
                        "get_saved_responses",
                        "get_latest_response",
                        "clear_responses"
                    ],
                    "docstring": "Collects and saves Cursor agent responses for SWARM.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "dreamos\\core\\messaging\\response_queue.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_agent_dir",
                "_get_response_path",
                "_load_responses",
                "enqueue_response",
                "update_response_state",
                "archive_response",
                "get_pending_responses",
                "cleanup_old_responses"
            ],
            "classes": {
                "ResponseState": {
                    "methods": [],
                    "docstring": "Response state enumeration.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseQueue": {
                    "methods": [
                        "__init__",
                        "_get_agent_dir",
                        "_get_response_path",
                        "_load_responses",
                        "enqueue_response",
                        "update_response_state",
                        "archive_response",
                        "get_pending_responses",
                        "cleanup_old_responses"
                    ],
                    "docstring": "Thread-safe response queue with persistence and state tracking.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\messaging\\response_tracker.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentResponseTracker": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Tracks agent responses and message history.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\messaging\\response_watcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "__init__",
                "start",
                "stop",
                "_watch_loop"
            ],
            "classes": {
                "ResponseEventHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handler for response file events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseWatcher": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_watch_loop"
                    ],
                    "docstring": "Watches response outbox and forwards responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\core\\messaging\\router.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_route",
                "remove_route",
                "add_handler",
                "remove_handler",
                "set_default_handler"
            ],
            "classes": {
                "AgentMessageRouter": {
                    "methods": [
                        "__init__",
                        "add_route",
                        "remove_route",
                        "add_handler",
                        "remove_handler",
                        "set_default_handler"
                    ],
                    "docstring": "Router for handling message routing between agents.",
                    "base_classes": [
                        "MessageRouter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\messaging\\system.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_route",
                "remove_route",
                "add_handler",
                "remove_handler",
                "set_default_handler",
                "set_rate_limit",
                "set_content_pattern",
                "set_required_fields",
                "queue_size",
                "is_processing"
            ],
            "classes": {
                "MessageSystem": {
                    "methods": [
                        "__init__",
                        "add_route",
                        "remove_route",
                        "add_handler",
                        "remove_handler",
                        "set_default_handler",
                        "set_rate_limit",
                        "set_content_pattern",
                        "set_required_fields",
                        "queue_size",
                        "is_processing"
                    ],
                    "docstring": "Unified message system for agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\messaging\\types.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\messaging\\ui.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "process_message",
                "initialize",
                "shutdown",
                "send_message",
                "get_status",
                "_handle_resume",
                "_handle_sync",
                "_handle_verify",
                "_handle_repair",
                "_handle_backup",
                "_handle_restore",
                "_handle_cleanup",
                "_handle_captain",
                "_handle_task",
                "_handle_integrate"
            ],
            "classes": {
                "MessageUI": {
                    "methods": [
                        "__post_init__",
                        "process_message",
                        "initialize",
                        "shutdown",
                        "send_message",
                        "get_status",
                        "_handle_resume",
                        "_handle_sync",
                        "_handle_verify",
                        "_handle_repair",
                        "_handle_backup",
                        "_handle_restore",
                        "_handle_cleanup",
                        "_handle_captain",
                        "_handle_task",
                        "_handle_integrate"
                    ],
                    "docstring": "UI handler for message processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos\\core\\messaging\\unified_message_system.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_load_messages",
                "_save_messages",
                "__init__",
                "__init__",
                "__init__",
                "__new__",
                "__init__",
                "_setup_components",
                "_load_history",
                "_save_history"
            ],
            "classes": {
                "Message": {
                    "methods": [],
                    "docstring": "Message data class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageQueue": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Abstract base class for message queue implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PersistentMessageQueue": {
                    "methods": [
                        "__init__",
                        "_load_messages",
                        "_save_messages"
                    ],
                    "docstring": "Message queue with persistent storage.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes messages from a queue.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHistory": {
                    "methods": [],
                    "docstring": "Abstract base class for message history implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageRouter": {
                    "methods": [],
                    "docstring": "Abstract base class for message routing implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleRouter": {
                    "methods": [],
                    "docstring": "Simple message router implementation.",
                    "base_classes": [
                        "MessageRouter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleQueue": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Simple message queue implementation.",
                    "base_classes": [
                        "MessageQueue"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleHistory": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Simple message history implementation.",
                    "base_classes": [
                        "MessageHistory"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageSystem": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_setup_components",
                        "_load_history",
                        "_save_history"
                    ],
                    "docstring": "Unified message handling system for Dream.OS.",
                    "base_classes": [
                        "BaseMessagingComponent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "dreamos\\core\\messaging\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_rate_limit",
                "set_content_pattern",
                "set_required_fields"
            ],
            "classes": {
                "MessageValidator": {
                    "methods": [
                        "__init__",
                        "set_rate_limit",
                        "set_content_pattern",
                        "set_required_fields"
                    ],
                    "docstring": "Validator for ensuring message integrity.",
                    "base_classes": [
                        "MessageValidator"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\messaging\\utils\\core_utils.py": {
            "language": ".py",
            "functions": [
                "format_message",
                "parse_message",
                "validate_message",
                "get_message_type",
                "get_message_content",
                "get_message_timestamp",
                "format_timestamp",
                "write_json",
                "read_yaml",
                "ensure_directory_exists",
                "atomic_write",
                "safe_read"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\metrics\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "increment",
                "gauge",
                "histogram",
                "get_metrics",
                "reset",
                "_get_key",
                "_save"
            ],
            "classes": {
                "BaseMetrics": {
                    "methods": [
                        "__init__",
                        "increment",
                        "gauge",
                        "histogram",
                        "get_metrics",
                        "reset",
                        "_get_key",
                        "_save"
                    ],
                    "docstring": "Base class for all metrics implementations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\metrics\\bridge_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_request",
                "record_success",
                "record_error",
                "get_metrics"
            ],
            "classes": {
                "BridgeMetrics": {
                    "methods": [
                        "__init__",
                        "record_request",
                        "record_success",
                        "record_error",
                        "get_metrics"
                    ],
                    "docstring": "Metrics for bridge operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\metrics\\file_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_read",
                "record_write",
                "record_error",
                "record_directory_operation"
            ],
            "classes": {
                "FileMetrics": {
                    "methods": [
                        "__init__",
                        "record_read",
                        "record_write",
                        "record_error",
                        "record_directory_operation"
                    ],
                    "docstring": "Metrics for file operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\metrics\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_log",
                "record_error",
                "record_rotation",
                "get_metrics"
            ],
            "classes": {
                "LogMetrics": {
                    "methods": [
                        "__init__",
                        "record_log",
                        "record_error",
                        "record_rotation",
                        "get_metrics"
                    ],
                    "docstring": "Metrics for logging operations.",
                    "base_classes": [
                        "BaseMetrics"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\monitoring\\bridge_health.py": {
            "language": ".py",
            "functions": [
                "check_health",
                "update_metrics",
                "__init__",
                "check_health",
                "update_metrics"
            ],
            "classes": {
                "BridgeHealthMonitor": {
                    "methods": [
                        "__init__",
                        "check_health",
                        "update_metrics"
                    ],
                    "docstring": "Monitors the health of the bridge system.",
                    "base_classes": [
                        "BaseHealthMonitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\monitoring\\metrics.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\monitoring\\metrics_server.py": {
            "language": ".py",
            "functions": [
                "_load_metrics",
                "metrics",
                "start"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\monitoring\\health\\base.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_health",
                "_save_health",
                "update_health",
                "is_healthy",
                "get_health_status"
            ],
            "classes": {
                "HealthStatus": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Health status data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseHealthMonitor": {
                    "methods": [
                        "__init__",
                        "_load_health",
                        "_save_health",
                        "update_health",
                        "is_healthy",
                        "get_health_status"
                    ],
                    "docstring": "Base class for health monitoring.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\nlp\\keyword_extract.py": {
            "language": ".py",
            "functions": [
                "extract",
                "__init__",
                "extract"
            ],
            "classes": {
                "KeywordExtractor": {
                    "methods": [
                        "__init__",
                        "extract"
                    ],
                    "docstring": "Extracts keywords from text using frequency analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\response\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate",
                "to_dict",
                "is_valid",
                "__init__",
                "__init__",
                "_ensure_storage",
                "store",
                "retrieve"
            ],
            "classes": {
                "BaseResponse": {
                    "methods": [
                        "__init__",
                        "_validate",
                        "to_dict",
                        "is_valid"
                    ],
                    "docstring": "Base class for all response implementations.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseResponseProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for response processors.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseMemory": {
                    "methods": [
                        "__init__",
                        "_ensure_storage",
                        "store",
                        "retrieve"
                    ],
                    "docstring": "Response memory manager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\resumer_v2\\agent_state_manager.py": {
            "language": ".py",
            "functions": [
                "default",
                "__init__",
                "_init_state",
                "_write_state_file",
                "_write_tasks_file",
                "_load_state",
                "_load_tasks",
                "validate_state",
                "validate_tasks"
            ],
            "classes": {
                "TaskStatusEncoder": {
                    "methods": [
                        "default"
                    ],
                    "docstring": "Custom JSON encoder for TaskStatus enum.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStateManager": {
                    "methods": [
                        "__init__",
                        "_init_state",
                        "_write_state_file",
                        "_write_tasks_file",
                        "_load_state",
                        "_load_tasks",
                        "validate_state",
                        "validate_tasks"
                    ],
                    "docstring": "Manages agent state with event hooks and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\resumer_v2\\quantum_agent_resumer.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "QuantumAgentResumer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages agent state persistence and resumption.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\resumer_v2\\schemas.py": {
            "language": ".py",
            "functions": [
                "create_default_state"
            ],
            "classes": {
                "TaskData": {
                    "methods": [],
                    "docstring": "Schema for task data payload.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentState": {
                    "methods": [],
                    "docstring": "Schema for agent state.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\security\\auth_manager.py": {
            "language": ".py",
            "functions": [
                "register_user",
                "authenticate",
                "validate_token",
                "get_user_info",
                "update_user_metadata",
                "assign_role",
                "remove_role",
                "save_users",
                "load_users",
                "is_locked_out",
                "record_failed_attempt",
                "__init__",
                "register_user",
                "authenticate",
                "validate_token",
                "get_user_info",
                "update_user_metadata",
                "assign_role",
                "remove_role",
                "is_locked_out",
                "record_failed_attempt",
                "save_users",
                "load_users"
            ],
            "classes": {
                "AuthError": {
                    "methods": [],
                    "docstring": "Base class for authentication errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AuthManager": {
                    "methods": [
                        "__init__",
                        "register_user",
                        "authenticate",
                        "validate_token",
                        "get_user_info",
                        "update_user_metadata",
                        "assign_role",
                        "remove_role",
                        "is_locked_out",
                        "record_failed_attempt",
                        "save_users",
                        "load_users"
                    ],
                    "docstring": "Manages authentication and authorization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 25
        },
        "dreamos\\core\\security\\identity_utils.py": {
            "language": ".py",
            "functions": [
                "generate_agent_id",
                "validate_password",
                "hash_password",
                "verify_password",
                "generate_token",
                "format_agent_name"
            ],
            "classes": {
                "IdentityUtils": {
                    "methods": [
                        "generate_agent_id",
                        "validate_password",
                        "hash_password",
                        "verify_password",
                        "generate_token",
                        "format_agent_name"
                    ],
                    "docstring": "Utility functions for identity management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\security\\security_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_default_config_path",
                "_load_config",
                "_validate_and_merge_config",
                "_save_config",
                "get_auth_config",
                "get_session_config",
                "get_identity_config",
                "update_config"
            ],
            "classes": {
                "SecurityConfig": {
                    "methods": [
                        "__init__",
                        "_get_default_config_path",
                        "_load_config",
                        "_validate_and_merge_config",
                        "_save_config",
                        "get_auth_config",
                        "get_session_config",
                        "get_identity_config",
                        "update_config"
                    ],
                    "docstring": "Manages security-related configuration settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\security\\session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_start_cleanup_thread",
                "create_session",
                "validate_session",
                "get_session",
                "update_session_metadata",
                "invalidate_session",
                "cleanup_expired_sessions",
                "save_sessions",
                "load_sessions",
                "cleanup_loop"
            ],
            "classes": {
                "SessionError": {
                    "methods": [],
                    "docstring": "Base class for session management errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SessionManager": {
                    "methods": [
                        "__init__",
                        "_start_cleanup_thread",
                        "create_session",
                        "validate_session",
                        "get_session",
                        "update_session_metadata",
                        "invalidate_session",
                        "cleanup_expired_sessions",
                        "save_sessions",
                        "load_sessions"
                    ],
                    "docstring": "Manages user and agent sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\self_discovery\\journal.py": {
            "language": ".py",
            "functions": [
                "init_db",
                "calculate_relapse_risk",
                "add_entry",
                "log_coding_session",
                "get_today_stats",
                "__init__",
                "add_entry",
                "log_coding_session",
                "get_today_stats",
                "calculate_relapse_risk"
            ],
            "classes": {
                "Journal": {
                    "methods": [
                        "__init__",
                        "add_entry",
                        "log_coding_session",
                        "get_today_stats",
                        "calculate_relapse_risk"
                    ],
                    "docstring": "Journal class for managing self-discovery entries.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\self_discovery\\prompts.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\shared\\coordinate_manager.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "save_coordinates",
                "get_coordinates",
                "set_coordinates",
                "__init__",
                "_initialize_monitors",
                "_load_config",
                "_transform_coordinates",
                "_transform_coordinate_dict",
                "validate_coordinates",
                "has_duplicate_coordinates",
                "check_region_overlap",
                "get_agent_coordinates",
                "get_response_region",
                "get",
                "get_all",
                "get_overlap",
                "has_coordinates",
                "get_coordinates",
                "set_coordinates",
                "_save_config"
            ],
            "classes": {
                "CoordinateManager": {
                    "methods": [
                        "__init__",
                        "_initialize_monitors",
                        "_load_config",
                        "_transform_coordinates",
                        "_transform_coordinate_dict",
                        "validate_coordinates",
                        "has_duplicate_coordinates",
                        "check_region_overlap",
                        "get_agent_coordinates",
                        "get_response_region",
                        "get",
                        "get_all",
                        "get_overlap",
                        "has_coordinates",
                        "get_coordinates",
                        "set_coordinates",
                        "_save_config"
                    ],
                    "docstring": "Manages coordinates for UI automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "dreamos\\core\\shared\\coordinate_utils.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "validate_coordinates",
                "has_duplicate_coordinates",
                "regions_overlap",
                "region_overlap"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\shared\\persistent_queue.py": {
            "language": ".py",
            "functions": [
                "load_queue",
                "save_queue",
                "load_queue_file",
                "get_queue_size",
                "__init__",
                "_acquire_lock",
                "_release_lock",
                "_read_queue",
                "_write_queue",
                "_check_rate_limit",
                "get_queue_size",
                "get_message",
                "clear_queue",
                "enqueue",
                "put",
                "get",
                "get_status",
                "add_message",
                "clear_agent",
                "shutdown",
                "get_message_history",
                "clear_history",
                "set_test_mode"
            ],
            "classes": {
                "PersistentQueue": {
                    "methods": [
                        "__init__",
                        "_acquire_lock",
                        "_release_lock",
                        "_read_queue",
                        "_write_queue",
                        "_check_rate_limit",
                        "get_queue_size",
                        "get_message",
                        "clear_queue",
                        "enqueue",
                        "put",
                        "get",
                        "get_status",
                        "add_message",
                        "clear_agent",
                        "shutdown",
                        "get_message_history",
                        "clear_history",
                        "set_test_mode"
                    ],
                    "docstring": "A file-based persistent queue with file locking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "dreamos\\core\\shared\\processors\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_metrics",
                "__str__"
            ],
            "classes": {
                "BaseProcessor": {
                    "methods": [
                        "__init__",
                        "get_metrics",
                        "__str__"
                    ],
                    "docstring": "Base class for all processors in the system.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\shared\\processors\\factory.py": {
            "language": ".py",
            "functions": [
                "register_processor",
                "create",
                "get_available_processors"
            ],
            "classes": {
                "ProcessorFactory": {
                    "methods": [
                        "register_processor",
                        "create",
                        "get_available_processors"
                    ],
                    "docstring": "Factory for creating processor instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\shared\\processors\\message.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and validates messages.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\shared\\processors\\mode.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ProcessorMode": {
                    "methods": [],
                    "docstring": "Processor operation modes.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\core\\shared\\processors\\response.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_metrics",
                "_update_metrics"
            ],
            "classes": {
                "ResponseProcessor": {
                    "methods": [
                        "__init__",
                        "_init_metrics",
                        "_update_metrics"
                    ],
                    "docstring": "Processes and validates responses.",
                    "base_classes": [
                        "BaseProcessor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\shared\\validation\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "validate",
                "add_error",
                "validate_with_metrics",
                "__init__",
                "validate",
                "_get_type"
            ],
            "classes": {
                "ValidationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base exception for validation errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationResult": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Result of a validation operation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "add_error",
                        "validate_with_metrics"
                    ],
                    "docstring": "Base class for all validators in Dream.OS.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SchemaValidator": {
                    "methods": [
                        "__init__",
                        "validate",
                        "_get_type"
                    ],
                    "docstring": "Validator that uses a schema for validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\core\\telemetry\\ws_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "send",
                "run_client"
            ],
            "classes": {
                "WSClient": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "send"
                    ],
                    "docstring": "WebSocket client for receiving telemetry updates.",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\core\\telemetry\\ws_server.py": {
            "language": ".py",
            "functions": [
                "start_server",
                "__init__"
            ],
            "classes": {
                "TelemetryServer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "WebSocket server for broadcasting agent telemetry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos\\core\\ui\\agent_dashboard.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "_log_message"
            ],
            "classes": {
                "AgentDashboard": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "_log_message"
                    ],
                    "docstring": "Main dashboard window for agent monitoring and control.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ui\\agent_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_ui",
                "_add_placeholder_data",
                "refresh_agents",
                "_show_devlog",
                "_force_resume",
                "_onboard_agent",
                "_on_refresh",
                "closeEvent",
                "update_agent_status"
            ],
            "classes": {
                "AgentMonitor": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_add_placeholder_data",
                        "refresh_agents",
                        "_show_devlog",
                        "_force_resume",
                        "_onboard_agent",
                        "_on_refresh",
                        "closeEvent",
                        "update_agent_status"
                    ],
                    "docstring": "Widget for monitoring agent statuses.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\ui\\agent_status_panel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "update_status"
            ],
            "classes": {
                "AgentStatusPanel": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "update_status"
                    ],
                    "docstring": "Panel for displaying agent status information.",
                    "base_classes": [
                        "QFrame"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ui\\log_console.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "log"
            ],
            "classes": {
                "LogConsole": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "log"
                    ],
                    "docstring": "Console widget for displaying log messages.",
                    "base_classes": [
                        "QFrame"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ui\\log_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "refresh_logs",
                "clear_logs",
                "_show_details",
                "closeEvent"
            ],
            "classes": {
                "LogMonitor": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "refresh_logs",
                        "clear_logs",
                        "_show_details",
                        "closeEvent"
                    ],
                    "docstring": "GUI component for monitoring and displaying logs.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\ui\\main_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_ui",
                "_setup_menu"
            ],
            "classes": {
                "MainWindow": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_setup_menu"
                    ],
                    "docstring": "Main application window.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ui\\theme_manager.py": {
            "language": ".py",
            "functions": [
                "get_dialog_stylesheet",
                "get_dialog_stylesheet",
                "apply_dialog_theme",
                "is_dark_theme"
            ],
            "classes": {
                "ThemeManager": {
                    "methods": [
                        "get_dialog_stylesheet",
                        "apply_dialog_theme",
                        "is_dark_theme"
                    ],
                    "docstring": "Manages application-wide UI theming.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\ui\\__main__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\ui\\ws\\client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "stop",
                "on_response"
            ],
            "classes": {
                "ResponseClient": {
                    "methods": [
                        "__init__",
                        "stop"
                    ],
                    "docstring": "WebSocket client for receiving responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\ui\\ws\\server.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "disconnect",
                "run"
            ],
            "classes": {
                "WebSocketManager": {
                    "methods": [
                        "__init__",
                        "disconnect",
                        "run"
                    ],
                    "docstring": "Manages WebSocket connections and broadcasting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\utils\\agent_helpers.py": {
            "language": ".py",
            "functions": [
                "load_agent_ownership",
                "determine_responsible_agent",
                "validate_agent_id",
                "build_agent_message",
                "parse_test_failures",
                "get_test_files",
                "get_agent_status",
                "validate_agent_config",
                "get_agent_status",
                "validate_agent_config"
            ],
            "classes": {
                "AgentError": {
                    "methods": [],
                    "docstring": "Stub for AgentError exception.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\core\\utils\\agent_status.py": {
            "language": ".py",
            "functions": [
                "_ensure_status_file",
                "__init__",
                "_ensure_status_file"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [
                        "__init__",
                        "_ensure_status_file"
                    ],
                    "docstring": "Manages agent status tracking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\core\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "get",
                "set",
                "update",
                "clear",
                "__init__",
                "load",
                "save",
                "get_section",
                "export_yaml",
                "import_yaml"
            ],
            "classes": {
                "ConfigSection": {
                    "methods": [
                        "get",
                        "set",
                        "update",
                        "clear"
                    ],
                    "docstring": "Configuration section with type safety.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "load",
                        "save",
                        "get_section",
                        "export_yaml",
                        "import_yaml"
                    ],
                    "docstring": "Centralized configuration management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\utils\\core_utils.py": {
            "language": ".py",
            "functions": [
                "add_error",
                "async_retry",
                "with_retry",
                "track_operation",
                "format_message",
                "parse_message",
                "get_timestamp",
                "format_duration",
                "is_valid_uuid",
                "get_errors",
                "clear_errors",
                "decorator",
                "safe_move",
                "load_json",
                "save_json",
                "format_timestamp",
                "generate_id",
                "read_yaml",
                "write_yaml",
                "atomic_write",
                "safe_read",
                "safe_write",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "ensure_directory_exists",
                "load_yaml",
                "transform_coordinates",
                "__init__",
                "add_error",
                "get_errors",
                "clear_errors",
                "decorator",
                "decorator",
                "decorator",
                "wrapped",
                "wrapper"
            ],
            "classes": {
                "ErrorTracker": {
                    "methods": [
                        "__init__",
                        "add_error",
                        "get_errors",
                        "clear_errors"
                    ],
                    "docstring": "Track errors with context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 39
        },
        "dreamos\\core\\utils\\exceptions.py": {
            "language": ".py",
            "functions": [
                "handle_error",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "DreamOSError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base exception class for Dream.OS.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOpsError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "File operations error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOpsPermissionError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "File permission error.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOpsIOError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "File I/O error.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Configuration error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Message processing error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Data validation error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResourceError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Resource management error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TimeoutError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Operation timeout error.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "dreamos\\core\\utils\\file_ops.py": {
            "language": ".py",
            "functions": [
                "safe_mkdir",
                "ensure_dir",
                "clear_dir",
                "archive_file",
                "extract_agent_id",
                "backup_file",
                "safe_rmdir",
                "read_json",
                "write_json",
                "read_text",
                "write_text",
                "copy_file",
                "safe_delete",
                "__init__"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Unified file manager with atomic operations, backup support, and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "dreamos\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "read_json",
                "write_json",
                "ensure_dir",
                "safe_rmdir",
                "get_file_info",
                "restore_backup",
                "find_files",
                "rotate_file"
            ],
            "classes": {
                "FileError": {
                    "methods": [],
                    "docstring": "Stub for FileError exception.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "dreamos\\core\\utils\\json_utils.py": {
            "language": ".py",
            "functions": [
                "validate_json",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "__init__"
            ],
            "classes": {
                "JsonValidationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Raised when JSON validation fails.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "configure_logging",
                "get_logger",
                "log_platform_event",
                "setup_logging",
                "get_events",
                "clear_events",
                "update_status",
                "get_status",
                "reset_status",
                "__init__",
                "log_event",
                "get_events",
                "clear_events",
                "__init__",
                "update_status",
                "get_status",
                "reset_status"
            ],
            "classes": {
                "PlatformEventLogger": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_events",
                        "clear_events"
                    ],
                    "docstring": "Log platform events with structured data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StatusTracker": {
                    "methods": [
                        "__init__",
                        "update_status",
                        "get_status",
                        "reset_status"
                    ],
                    "docstring": "Track platform operation status.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [],
                    "docstring": "Stub for LogConfig class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dreamos\\core\\utils\\message_processor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MessageProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Processes and routes messages between agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\core\\utils\\metrics.py": {
            "language": ".py",
            "functions": [
                "log_operation",
                "__init__",
                "counter",
                "gauge",
                "histogram",
                "summary",
                "__init__",
                "_log",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "exception",
                "decorator"
            ],
            "classes": {
                "MetricsManager": {
                    "methods": [
                        "__init__",
                        "counter",
                        "gauge",
                        "histogram",
                        "summary"
                    ],
                    "docstring": "Centralized metrics management with Prometheus integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__init__",
                        "_log",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "exception"
                    ],
                    "docstring": "Centralized logging management with structured logging.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos\\core\\utils\\metrics_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "labels",
                "inc",
                "log_event"
            ],
            "classes": {
                "Counter": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "labels",
                        "inc",
                        "log_event"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\utils\\region_finder.py": {
            "language": ".py",
            "functions": [
                "find_cursor_regions",
                "find_region",
                "get_region_center",
                "_load_regions",
                "_save_regions",
                "start_finding",
                "_set_start",
                "_set_end",
                "_quit",
                "get_region",
                "__init__",
                "_load_regions",
                "_save_regions",
                "start_finding",
                "_set_start",
                "_set_end",
                "_quit",
                "get_region"
            ],
            "classes": {
                "RegionError": {
                    "methods": [],
                    "docstring": "Stub exception for region finding errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RegionFinder": {
                    "methods": [
                        "__init__",
                        "_load_regions",
                        "_save_regions",
                        "start_finding",
                        "_set_start",
                        "_set_end",
                        "_quit",
                        "get_region"
                    ],
                    "docstring": "Helps find screen coordinates for UI regions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "dreamos\\core\\utils\\retry.py": {
            "language": ".py",
            "functions": [
                "with_retry",
                "decorator",
                "wrapper",
                "with_retry",
                "decorator",
                "wrapper",
                "wrapped",
                "decorator",
                "wrapper",
                "wrapped"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\utils\\safe_io.py": {
            "language": ".py",
            "functions": [
                "safe_file_handle",
                "atomic_write",
                "safe_read",
                "safe_write"
            ],
            "classes": {
                "SafeIOError": {
                    "methods": [],
                    "docstring": "Legacy safe I/O error for compatibility.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\core\\utils\\serialization.py": {
            "language": ".py",
            "functions": [
                "serialize",
                "deserialize",
                "load_json",
                "save_json",
                "read_json",
                "write_json",
                "restore_backup",
                "read_yaml",
                "load_yaml",
                "write_yaml",
                "save_yaml"
            ],
            "classes": {
                "SerializationError": {
                    "methods": [],
                    "docstring": "Raised when serialization fails.",
                    "base_classes": [
                        "FileOpsError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\core\\utils\\system_ops.py": {
            "language": ".py",
            "functions": [
                "with_retry",
                "transform_coordinates",
                "normalize_coordinates",
                "get_system_info",
                "decorator",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamos\\core\\utils\\yaml_utils.py": {
            "language": ".py",
            "functions": [
                "read_yaml",
                "load_yaml",
                "write_yaml",
                "save_yaml",
                "validate_yaml",
                "__init__",
                "validate_file",
                "validate"
            ],
            "classes": {
                "YamlError": {
                    "methods": [],
                    "docstring": "Exception raised for YAML-related errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "YAMLValidator": {
                    "methods": [
                        "__init__",
                        "validate_file",
                        "validate"
                    ],
                    "docstring": "Validator for YAML files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\verification\\scanner.py": {
            "language": ".py",
            "functions": [
                "summary",
                "format_full_report",
                "save_reports",
                "__init__",
                "_are_functions_similar",
                "_calculate_similarity",
                "_generate_narrative",
                "_find_top_violators"
            ],
            "classes": {
                "ScanResults": {
                    "methods": [
                        "summary",
                        "format_full_report",
                        "save_reports"
                    ],
                    "docstring": "Results from a code scan.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "_are_functions_similar",
                        "_calculate_similarity",
                        "_generate_narrative",
                        "_find_top_violators"
                    ],
                    "docstring": "Code scanner for detecting duplicates and similar patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamos\\core\\verification\\scanner_cli.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\core\\verification\\verify_beta.py": {
            "language": ".py",
            "functions": [
                "main",
                "__post_init__",
                "to_dict",
                "__init__",
                "_setup_logging",
                "check_mailboxes",
                "check_required_docs",
                "check_unit_tests",
                "check_orphans_and_dupes",
                "check_agent_state_files",
                "check_backlog_and_episodes",
                "check_autonomy_loop",
                "check_discord_commander",
                "check_discord_devlog",
                "check_social_integrations",
                "check_resumer",
                "check_onboarder",
                "check_chatgpt_bridge",
                "check_system_initialization",
                "check_autonomy_system",
                "check_runtime_directories",
                "check_test_coverage",
                "check_security_config",
                "check_monitoring_system",
                "check_error_handling",
                "check_coordinate_system",
                "check_cursor_agent_bridge",
                "check_agent_recovery",
                "check_response_collection",
                "_categorize_check",
                "_determine_severity",
                "_generate_recommendations",
                "run_verification",
                "generate_report"
            ],
            "classes": {
                "CheckResult": {
                    "methods": [
                        "__post_init__",
                        "to_dict"
                    ],
                    "docstring": "Result of a verification check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BetaVerifier": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "check_mailboxes",
                        "check_required_docs",
                        "check_unit_tests",
                        "check_orphans_and_dupes",
                        "check_agent_state_files",
                        "check_backlog_and_episodes",
                        "check_autonomy_loop",
                        "check_discord_commander",
                        "check_discord_devlog",
                        "check_social_integrations",
                        "check_resumer",
                        "check_onboarder",
                        "check_chatgpt_bridge",
                        "check_system_initialization",
                        "check_autonomy_system",
                        "check_runtime_directories",
                        "check_test_coverage",
                        "check_security_config",
                        "check_monitoring_system",
                        "check_error_handling",
                        "check_coordinate_system",
                        "check_cursor_agent_bridge",
                        "check_agent_recovery",
                        "check_response_collection",
                        "_categorize_check",
                        "_determine_severity",
                        "_generate_recommendations",
                        "run_verification",
                        "generate_report"
                    ],
                    "docstring": "Dream.OS Beta Deployment Validator.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 36
        },
        "dreamos\\social\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "__init__",
                "_load_platforms",
                "_load_post_log",
                "_save_post_log",
                "_compute_hash",
                "_format_devlog_content",
                "process_devlog",
                "start_watching",
                "cleanup"
            ],
            "classes": {
                "DevlogEvent": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handles devlog file system events.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevlogDispatcher": {
                    "methods": [
                        "__init__",
                        "_load_platforms",
                        "_load_post_log",
                        "_save_post_log",
                        "_compute_hash",
                        "_format_devlog_content",
                        "process_devlog",
                        "start_watching",
                        "cleanup"
                    ],
                    "docstring": "Dispatches devlog updates to social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\social\\platform_login.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_load_credentials",
                "get_driver",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "login",
                "login_linkedin",
                "login_twitter",
                "login_facebook",
                "is_instagram_logged_in",
                "login_instagram",
                "login_reddit",
                "login_stocktwits",
                "run_all_logins",
                "cleanup",
                "fb_logged_in",
                "is_logged_in"
            ],
            "classes": {
                "LoginResult": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Result of a login attempt.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlatformLoginManager": {
                    "methods": [
                        "__init__",
                        "_load_credentials",
                        "get_driver",
                        "load_cookies",
                        "save_cookies",
                        "wait_for_manual_login",
                        "login",
                        "login_linkedin",
                        "login_twitter",
                        "login_facebook",
                        "is_instagram_logged_in",
                        "login_instagram",
                        "login_reddit",
                        "login_stocktwits",
                        "run_all_logins",
                        "cleanup"
                    ],
                    "docstring": "Manages social media platform logins with persistent sessions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dreamos\\social\\platform_poster.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_selectors",
                "_parse_selector_markdown",
                "_request_selector",
                "_get_selector",
                "_wait_for_element",
                "_ensure_logged_in",
                "post",
                "_post_to_twitter",
                "_post_to_reddit",
                "cleanup"
            ],
            "classes": {
                "SelectorError": {
                    "methods": [],
                    "docstring": "Raised when a selector fails to find an element.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlatformPoster": {
                    "methods": [
                        "__init__",
                        "_load_selectors",
                        "_parse_selector_markdown",
                        "_request_selector",
                        "_get_selector",
                        "_wait_for_element",
                        "_ensure_logged_in",
                        "post",
                        "_post_to_twitter",
                        "_post_to_reddit",
                        "cleanup"
                    ],
                    "docstring": "Handles posting to social media platforms using browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\social\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_refill",
                "acquire",
                "get_tokens",
                "__init__",
                "_load_state",
                "_save_state",
                "can_post",
                "get_wait_time",
                "get_platform_stats"
            ],
            "classes": {
                "RateLimitConfig": {
                    "methods": [],
                    "docstring": "Configuration for platform rate limits.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimitState": {
                    "methods": [],
                    "docstring": "Current state of rate limiting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TokenBucket": {
                    "methods": [
                        "__init__",
                        "_refill",
                        "acquire",
                        "get_tokens"
                    ],
                    "docstring": "Token bucket rate limiter implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "can_post",
                        "get_wait_time",
                        "get_platform_stats"
                    ],
                    "docstring": "Manages rate limits for multiple social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "dreamos\\social\\social_formatter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_templates",
                "_wrap",
                "_splice",
                "_format_links",
                "_format_hashtags",
                "_format_mentions",
                "_format_emojis",
                "_truncate_text",
                "_format_dream_core",
                "format_post",
                "format_title"
            ],
            "classes": {
                "SocialFormatter": {
                    "methods": [
                        "__init__",
                        "_load_templates",
                        "_wrap",
                        "_splice",
                        "_format_links",
                        "_format_hashtags",
                        "_format_mentions",
                        "_format_emojis",
                        "_truncate_text",
                        "_format_dream_core",
                        "format_post",
                        "format_title"
                    ],
                    "docstring": "Formats content for different social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamos\\social\\strategies\\platform_strategy_base.py": {
            "language": ".py",
            "functions": [
                "retry_with_recovery",
                "decorator",
                "__init__",
                "_calculate_retry_delay",
                "_log_error_with_trace",
                "_track_operation_time",
                "_update_memory",
                "_log_action",
                "_handle_media_upload",
                "_validate_media",
                "get_memory_updates",
                "get_operation_stats",
                "is_logged_in",
                "login",
                "post",
                "create_post",
                "_create_post_impl",
                "_find_element",
                "_click_element",
                "_send_keys",
                "initialize",
                "wrapper"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_calculate_retry_delay",
                        "_log_error_with_trace",
                        "_track_operation_time",
                        "_update_memory",
                        "_log_action",
                        "_handle_media_upload",
                        "_validate_media",
                        "get_memory_updates",
                        "get_operation_stats",
                        "is_logged_in",
                        "login",
                        "post",
                        "create_post",
                        "_create_post_impl",
                        "_find_element",
                        "_click_element",
                        "_send_keys",
                        "initialize"
                    ],
                    "docstring": "Base class for all social media platform strategies.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "dreamos\\social\\utils\\base.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BaseUtils": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base utilities for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "dreamos\\social\\utils\\base_log_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Standard log levels for consistent logging across the application.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\social\\utils\\cleanup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_file_locked",
                "_force_close_handle",
                "_wait_for_file_unlock",
                "safe_remove",
                "cleanup_directory",
                "cleanup_temp_files"
            ],
            "classes": {
                "FileCleanup": {
                    "methods": [
                        "__init__",
                        "_is_file_locked",
                        "_force_close_handle",
                        "_wait_for_file_unlock",
                        "safe_remove",
                        "cleanup_directory",
                        "cleanup_temp_files"
                    ],
                    "docstring": "Handles safe file cleanup with proper lock handling.",
                    "base_classes": [
                        "BaseUtils"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\social\\utils\\file_locks.py": {
            "language": ".py",
            "functions": [
                "get_file_lock",
                "ensure_log_dir",
                "lock_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dreamos\\social\\utils\\json_settings.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "__getattr__",
                "__iter__",
                "items",
                "values",
                "__getitem__",
                "as_dict",
                "__init__",
                "reload",
                "convert"
            ],
            "classes": {
                "ConfigNode": {
                    "methods": [
                        "__post_init__",
                        "__getattr__",
                        "__iter__",
                        "items",
                        "values",
                        "__getitem__",
                        "as_dict"
                    ],
                    "docstring": "Data holder that provides attribute access like a dotmap.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JSONConfig": {
                    "methods": [
                        "__init__",
                        "reload"
                    ],
                    "docstring": "Load configuration from a JSON file.",
                    "base_classes": [
                        "ConfigNode"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\social\\utils\\log_batcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_batch_size",
                "is_running"
            ],
            "classes": {
                "LogBatcher": {
                    "methods": [
                        "__init__",
                        "get_batch_size",
                        "is_running"
                    ],
                    "docstring": "Handles batched logging operations for efficiency.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\social\\utils\\log_cleanup.py": {
            "language": ".py",
            "functions": [
                "cleanup_old_logs",
                "rotate_log",
                "compress_old_logs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dreamos\\social\\utils\\log_config.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "max_bytes",
                "file_path",
                "__eq__"
            ],
            "classes": {
                "LogConfig": {
                    "methods": [
                        "__post_init__",
                        "max_bytes",
                        "file_path",
                        "__eq__"
                    ],
                    "docstring": "Configuration for log files and settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\social\\utils\\log_entry.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "from_dict",
                "_asdict",
                "__eq__",
                "__hash__",
                "__str__"
            ],
            "classes": {
                "LogEntry": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict",
                        "_asdict",
                        "__eq__",
                        "__hash__",
                        "__str__"
                    ],
                    "docstring": "Represents a log entry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dreamos\\social\\utils\\log_level.py": {
            "language": ".py",
            "functions": [
                "from_str",
                "__str__",
                "value"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [
                        "from_str",
                        "__str__",
                        "value"
                    ],
                    "docstring": "Logging levels for the system.\n\nAttributes:\n    DEBUG: Detailed information for debugging\n    INFO: General information about program execution\n    WARNING: Indicates a potential problem\n    ERROR: A more serious problem\n    CRITICAL: A critical problem that may prevent the program from running",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamos\\social\\utils\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "_setup_logging",
                "logger",
                "write_log",
                "_update_metrics",
                "get_metrics",
                "read_logs",
                "cleanup",
                "__del__",
                "set_level",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "rotate"
            ],
            "classes": {
                "LogEntry": {
                    "methods": [],
                    "docstring": "Represents a log entry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_setup_logging",
                        "logger",
                        "write_log",
                        "_update_metrics",
                        "get_metrics",
                        "read_logs",
                        "cleanup",
                        "__del__",
                        "set_level",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "rotate"
                    ],
                    "docstring": "Manages logging for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "dreamos\\social\\utils\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "increment_logs",
                "increment_errors",
                "increment_warnings",
                "get_metrics"
            ],
            "classes": {
                "LogMetrics": {
                    "methods": [
                        "__init__",
                        "increment_logs",
                        "increment_errors",
                        "increment_warnings",
                        "get_metrics"
                    ],
                    "docstring": "Tracks metrics for logging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\social\\utils\\log_pipeline.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_entry",
                "flush",
                "start",
                "stop",
                "_flush_thread_func",
                "get_log_info",
                "read_logs",
                "cleanup_old_logs",
                "_cleanup_all_locks",
                "__del__"
            ],
            "classes": {
                "LogPipeline": {
                    "methods": [
                        "__init__",
                        "add_entry",
                        "flush",
                        "start",
                        "stop",
                        "_flush_thread_func",
                        "get_log_info",
                        "read_logs",
                        "cleanup_old_logs",
                        "_cleanup_all_locks",
                        "__del__"
                    ],
                    "docstring": "Handles batched log entry processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\social\\utils\\log_rotator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "max_bytes",
                "check_rotation",
                "_rotate_file",
                "rotate_all",
                "_cleanup_old_backups",
                "get_rotation_info",
                "_get_file_size",
                "_get_file_age",
                "rotate"
            ],
            "classes": {
                "LogRotator": {
                    "methods": [
                        "__init__",
                        "max_bytes",
                        "check_rotation",
                        "_rotate_file",
                        "rotate_all",
                        "_cleanup_old_backups",
                        "get_rotation_info",
                        "_get_file_size",
                        "_get_file_age",
                        "rotate"
                    ],
                    "docstring": "Handles log file rotation and compression.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "dreamos\\social\\utils\\log_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "RotationConfig": {
                    "methods": [],
                    "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dreamos\\social\\utils\\log_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_log",
                "get_metrics",
                "get_summary",
                "clear_metrics"
            ],
            "classes": {
                "LogWriter": {
                    "methods": [
                        "__init__",
                        "write_log",
                        "get_metrics",
                        "get_summary",
                        "clear_metrics"
                    ],
                    "docstring": "Handles writing logs to files with proper locking and metrics tracking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\social\\utils\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_files",
                "validate",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_files",
                        "validate",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for upload.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "dreamos\\social\\utils\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_rate_limit",
                "set_rate_limit",
                "reset_limits",
                "get_remaining"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_rate_limit",
                        "set_rate_limit",
                        "reset_limits",
                        "get_remaining"
                    ],
                    "docstring": "Handles rate limiting for API operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dreamos\\social\\utils\\social_common.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "wait_for_element",
                "wait_for_clickable",
                "retry_click",
                "handle_login",
                "post_content",
                "verify_post_success",
                "validate_media",
                "upload_media"
            ],
            "classes": {
                "SocialConfig": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Configuration for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SocialMediaUtils": {
                    "methods": [
                        "__init__",
                        "wait_for_element",
                        "wait_for_clickable",
                        "retry_click",
                        "handle_login",
                        "post_content",
                        "verify_post_success",
                        "validate_media",
                        "upload_media"
                    ],
                    "docstring": "Common utilities for social media operations.",
                    "base_classes": [
                        "BaseUtils"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "dreamos\\utils\\discord_client.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "examples\\messaging_example.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_menu",
                "_show_about",
                "closeEvent"
            ],
            "classes": {
                "MainWindow": {
                    "methods": [
                        "__init__",
                        "_setup_menu",
                        "_show_about",
                        "closeEvent"
                    ],
                    "docstring": "Main application window.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "gui\\__main__.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "gui\\components\\agent_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run",
                "__init__",
                "_setup_ui",
                "paintEvent",
                "__init__",
                "_setup_ui",
                "_wire",
                "_toggle_batch_mode",
                "_choose_episode",
                "_collect_options",
                "_begin_onboard",
                "_update_progress",
                "_update_stage",
                "_on_worker_finished",
                "_on_live_status",
                "closeEvent",
                "__init__",
                "_setup_ui",
                "refresh_agents",
                "_show_devlog",
                "_force_resume",
                "_onboard_agent",
                "_show_context_menu",
                "_show_devlog_modal",
                "_force_resume_agent",
                "_clear_agent_errors",
                "closeEvent"
            ],
            "classes": {
                "OnboardingOptions": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "_OnboardWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GlassDialog": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "paintEvent"
                    ],
                    "docstring": "Frameless dialog with glass effect.",
                    "base_classes": [
                        "QDialog"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OnboardingDialog": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_wire",
                        "_toggle_batch_mode",
                        "_choose_episode",
                        "_collect_options",
                        "_begin_onboard",
                        "_update_progress",
                        "_update_stage",
                        "_on_worker_finished",
                        "_on_live_status",
                        "closeEvent"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "GlassDialog"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMonitor": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "refresh_agents",
                        "_show_devlog",
                        "_force_resume",
                        "_onboard_agent",
                        "_show_context_menu",
                        "_show_devlog_modal",
                        "_force_resume_agent",
                        "_clear_agent_errors",
                        "closeEvent"
                    ],
                    "docstring": "GUI component for monitoring and controlling agents.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 33
        },
        "gui\\components\\log_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "refresh_logs",
                "clear_logs",
                "_show_details",
                "closeEvent"
            ],
            "classes": {
                "LogMonitor": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "refresh_logs",
                        "clear_logs",
                        "_show_details",
                        "closeEvent"
                    ],
                    "docstring": "GUI component for monitoring and displaying logs.",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "options_bot\\broker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_history",
                "get_option_chain",
                "send_order",
                "get_equity"
            ],
            "classes": {
                "Broker": {
                    "methods": [
                        "__init__",
                        "get_history",
                        "get_option_chain",
                        "send_order",
                        "get_equity"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "options_bot\\data_loader.py": {
            "language": ".py",
            "functions": [
                "fetch_history",
                "fetch_option_chain"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "options_bot\\monte_carlo.py": {
            "language": ".py",
            "functions": [
                "simulate_prices",
                "pop_above",
                "batch_pop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "options_bot\\run_bot.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "options_bot\\strategy_core.py": {
            "language": ".py",
            "functions": [
                "tech_signal"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "options_bot\\trade_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run_cycle",
                "_try_execute",
                "_size_position",
                "_log_trade"
            ],
            "classes": {
                "TradeManager": {
                    "methods": [
                        "__init__",
                        "run_cycle",
                        "_try_execute",
                        "_size_position",
                        "_log_trade"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "runtime\\bridge_inbox\\chatgpt_client.py": {
            "language": ".py",
            "functions": [
                "request_chatgpt",
                "get_pending_count",
                "clear_pending_requests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "runtime\\bridge_inbox\\cursor_chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "load_config",
                "safe_read_json",
                "safe_write_json",
                "setup_temp_profile",
                "launch_chatgpt_browser",
                "send_prompt_and_get_response",
                "focus_cursor_window",
                "paste_into_cursor",
                "ensure_bridge_inbox",
                "main_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "scripts\\analyze_test_dirs.py": {
            "language": ".py",
            "functions": [
                "analyze_directory_structure",
                "check_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\flatten_tests.py": {
            "language": ".py",
            "functions": [
                "flatten_test_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\generate_missing_tests.py": {
            "language": ".py",
            "functions": [
                "get_module_type",
                "get_functions",
                "generate_test_stub",
                "ensure_test_dir",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\isolate_stubborn_tests.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\migrate_auth_to_core.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_environment",
                "create_backup",
                "find_import_references",
                "update_imports",
                "migrate_files",
                "validate_migration",
                "cleanup",
                "generate_report",
                "run"
            ],
            "classes": {
                "AuthMigration": {
                    "methods": [
                        "__init__",
                        "validate_environment",
                        "create_backup",
                        "find_import_references",
                        "update_imports",
                        "migrate_files",
                        "validate_migration",
                        "cleanup",
                        "generate_report",
                        "run"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "scripts\\migrate_bridge_config.py": {
            "language": ".py",
            "functions": [
                "load_old_config",
                "migrate_config",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\move_tests.py": {
            "language": ".py",
            "functions": [
                "get_test_destination",
                "move_test_file",
                "find_test_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "scripts\\prune_dead_files.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_build_impl_cache",
                "_is_empty_test",
                "_is_critical_test",
                "_find_duplicates",
                "_check_fixtures",
                "analyze",
                "_save_analysis",
                "_print_summary",
                "cleanup"
            ],
            "classes": {
                "TestPruner": {
                    "methods": [
                        "__init__",
                        "_build_impl_cache",
                        "_is_empty_test",
                        "_is_critical_test",
                        "_find_duplicates",
                        "_check_fixtures",
                        "analyze",
                        "_save_analysis",
                        "_print_summary",
                        "cleanup"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "scripts\\reorg_tests.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "find_source_modules",
                "find_test_files",
                "get_module_from_test",
                "get_target_path",
                "ensure_init_files",
                "create_readme",
                "move_test_file",
                "reorganize"
            ],
            "classes": {
                "TestReorganizer": {
                    "methods": [
                        "__init__",
                        "find_source_modules",
                        "find_test_files",
                        "get_module_from_test",
                        "get_target_path",
                        "ensure_init_files",
                        "create_readme",
                        "move_test_file",
                        "reorganize"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "scripts\\run_scanner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\run_tests.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_tests",
                "_get_category_from_path",
                "get_test_paths"
            ],
            "classes": {
                "TestRunner": {
                    "methods": [
                        "__init__",
                        "run_tests",
                        "_get_category_from_path",
                        "get_test_paths"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "scripts\\standalone_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "save_reports",
                "__init__",
                "scan_project",
                "_are_functions_similar",
                "_calculate_similarity",
                "_generate_narrative",
                "_find_top_violators"
            ],
            "classes": {
                "ScanResults": {
                    "methods": [
                        "save_reports"
                    ],
                    "docstring": "Results from a code scan.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Scanner": {
                    "methods": [
                        "__init__",
                        "scan_project",
                        "_are_functions_similar",
                        "_calculate_similarity",
                        "_generate_narrative",
                        "_find_top_violators"
                    ],
                    "docstring": "Code scanner for detecting duplicates and similar patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\community\\audience_analytics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_default_config",
                "track_growth",
                "analyze_demographics",
                "generate_insights",
                "export_report",
                "get_audience_metrics",
                "_get_audience_metrics"
            ],
            "classes": {
                "AudienceAnalytics": {
                    "methods": [
                        "__init__",
                        "_create_default_config",
                        "track_growth",
                        "analyze_demographics",
                        "generate_insights",
                        "export_report",
                        "get_audience_metrics",
                        "_get_audience_metrics"
                    ],
                    "docstring": "Analyzes audience engagement and demographics across platforms.",
                    "base_classes": [
                        "CommunityBase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "social\\community\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_logging",
                "_create_default_config",
                "_save_config",
                "_load_config",
                "_update_metrics"
            ],
            "classes": {
                "CommunityBase": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "_create_default_config",
                        "_save_config",
                        "_load_config",
                        "_update_metrics"
                    ],
                    "docstring": "Base class for community management modules.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\community\\content_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_create_default_config",
                "_validate_platform",
                "_validate_content",
                "_validate_scheduled_time",
                "_check_rate_limit",
                "schedule_post",
                "get_schedule",
                "optimize_timing",
                "analyze_performance",
                "_get_optimal_time"
            ],
            "classes": {
                "ContentScheduler": {
                    "methods": [
                        "__init__",
                        "_create_default_config",
                        "_validate_platform",
                        "_validate_content",
                        "_validate_scheduled_time",
                        "_check_rate_limit",
                        "schedule_post",
                        "get_schedule",
                        "optimize_timing",
                        "analyze_performance",
                        "_get_optimal_time"
                    ],
                    "docstring": "Manages content scheduling and optimization across platforms.",
                    "base_classes": [
                        "CommunityBase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\config\\social_config.py": {
            "language": ".py",
            "functions": [
                "__post_init__"
            ],
            "classes": {
                "Platform": {
                    "methods": [],
                    "docstring": "Supported social media platforms.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlatformConfig": {
                    "methods": [],
                    "docstring": "Configuration for a specific social media platform.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SocialConfig": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Configuration for social media integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\constants\\platform_constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\core\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_update_memory",
                "dispatch_all",
                "_process_platform",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "SocialPlatformDispatcher": {
                    "methods": [
                        "__init__",
                        "_update_memory",
                        "dispatch_all",
                        "_process_platform",
                        "_shutdown_all_drivers"
                    ],
                    "docstring": "Main dispatcher for handling social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\core\\driver_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_driver",
                "get_multi_driver_sessions",
                "close_driver",
                "shutdown_all_drivers"
            ],
            "classes": {
                "DriverManager": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "get_multi_driver_sessions",
                        "close_driver",
                        "shutdown_all_drivers"
                    ],
                    "docstring": "Manages browser driver instances for social media platforms.\nThis is a stub implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\core\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "now",
                "__init__",
                "check_limit",
                "record_usage",
                "get_usage"
            ],
            "classes": {
                "TimeProvider": {
                    "methods": [
                        "now"
                    ],
                    "docstring": "Time provider for rate limiter.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_limit",
                        "record_usage",
                        "get_usage"
                    ],
                    "docstring": "Rate limiter implementation for social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\core\\redis_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "configure",
                "get_connection",
                "get_connection_context",
                "set",
                "get",
                "delete",
                "exists",
                "close"
            ],
            "classes": {
                "RedisManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "configure",
                        "get_connection",
                        "get_connection_context",
                        "set",
                        "get",
                        "delete",
                        "exists",
                        "close"
                    ],
                    "docstring": "Manager for Redis connections and operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "social\\driver\\proxy_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_proxy",
                "remove_proxy",
                "get_proxy",
                "rotate_proxy"
            ],
            "classes": {
                "ProxyManager": {
                    "methods": [
                        "__init__",
                        "add_proxy",
                        "remove_proxy",
                        "get_proxy",
                        "rotate_proxy"
                    ],
                    "docstring": "Manages proxy rotation and selection for social media platforms.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\driver\\undetected_driver.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_driver",
                "get_driver",
                "quit"
            ],
            "classes": {
                "UndetectedDriver": {
                    "methods": [
                        "__init__",
                        "create_driver",
                        "get_driver",
                        "quit"
                    ],
                    "docstring": "Wrapper for undetected-chromedriver with anti-bot evasion capabilities.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\driver\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_logged_in",
                "login",
                "post"
            ],
            "classes": {
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "login",
                        "post"
                    ],
                    "docstring": "Enhanced Facebook platform strategy with media support and robust error handling.",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "post"
            ],
            "classes": {
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "post"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "post"
            ],
            "classes": {
                "LinkedInStrategy": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "post"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\platform_strategy_base.py": {
            "language": ".py",
            "functions": [
                "retry_with_recovery",
                "decorator",
                "__init__",
                "_calculate_retry_delay",
                "_log_error_with_trace",
                "_track_operation_time",
                "_update_memory",
                "_log_action",
                "_handle_media_upload",
                "_validate_media",
                "get_memory_updates",
                "get_operation_stats",
                "is_logged_in",
                "login",
                "post",
                "create_post",
                "_create_post_impl",
                "_find_element",
                "_click_element",
                "_send_keys",
                "initialize",
                "wrapper"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_calculate_retry_delay",
                        "_log_error_with_trace",
                        "_track_operation_time",
                        "_update_memory",
                        "_log_action",
                        "_handle_media_upload",
                        "_validate_media",
                        "get_memory_updates",
                        "get_operation_stats",
                        "is_logged_in",
                        "login",
                        "post",
                        "create_post",
                        "_create_post_impl",
                        "_find_element",
                        "_click_element",
                        "_send_keys",
                        "initialize"
                    ],
                    "docstring": "Base class for all social media platform strategies.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "social\\strategies\\reddit_media.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media",
                "upload_media",
                "_create_media_dir"
            ],
            "classes": {
                "RedditMediaHandler": {
                    "methods": [
                        "__init__",
                        "validate_media",
                        "upload_media",
                        "_create_media_dir"
                    ],
                    "docstring": "Handler for Reddit media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_config",
                "_setup_rate_limiter",
                "_check_rate_limit",
                "_handle_error",
                "calculate_retry_delay",
                "_validate_media",
                "_upload_media",
                "_create_media_dir",
                "_verify_post_success",
                "_handle_rate_limit",
                "_handle_retry",
                "retry_operation",
                "login",
                "post_devlog",
                "post",
                "create_post",
                "comment",
                "is_logged_in",
                "record_metric",
                "get_metrics",
                "get_summary",
                "save_metrics",
                "load_metrics",
                "clear_metrics"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "_validate_config",
                        "_setup_rate_limiter",
                        "_check_rate_limit",
                        "_handle_error",
                        "calculate_retry_delay",
                        "_validate_media",
                        "_upload_media",
                        "_create_media_dir",
                        "_verify_post_success",
                        "_handle_rate_limit",
                        "_handle_retry",
                        "retry_operation",
                        "login",
                        "post_devlog",
                        "post",
                        "create_post",
                        "comment",
                        "is_logged_in",
                        "record_metric",
                        "get_metrics",
                        "get_summary",
                        "save_metrics",
                        "load_metrics",
                        "clear_metrics"
                    ],
                    "docstring": "Strategy for interacting with Reddit.",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "social\\strategies\\stocktwits_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "post"
            ],
            "classes": {
                "StockTwitsStrategy": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "post"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\strategy_base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_memory",
                "login",
                "logout",
                "post",
                "_validate_media",
                "_upload_media",
                "_update_memory",
                "calculate_retry_delay",
                "take_screenshot",
                "wait_for_element",
                "wait_for_clickable",
                "record_metric",
                "get_metrics",
                "get_summary",
                "save_metrics",
                "load_metrics",
                "clear_metrics"
            ],
            "classes": {
                "SocialMediaStrategy": {
                    "methods": [
                        "__init__",
                        "_init_memory",
                        "login",
                        "logout",
                        "post",
                        "_validate_media",
                        "_upload_media",
                        "_update_memory",
                        "calculate_retry_delay",
                        "take_screenshot",
                        "wait_for_element",
                        "wait_for_clickable",
                        "record_metric",
                        "get_metrics",
                        "get_summary",
                        "save_metrics",
                        "load_metrics",
                        "clear_metrics"
                    ],
                    "docstring": "Base class for social media strategies.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_rate_limit",
                "_handle_error",
                "login",
                "post",
                "create_post",
                "is_logged_in"
            ],
            "classes": {
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "_handle_rate_limit",
                        "_handle_error",
                        "login",
                        "post",
                        "create_post",
                        "is_logged_in"
                    ],
                    "docstring": "Strategy for interacting with Twitter.",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\strategies\\reddit\\config.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "from_dict",
                "load",
                "save",
                "validate"
            ],
            "classes": {
                "RedditConfig": {
                    "methods": [
                        "__post_init__",
                        "from_dict",
                        "load",
                        "save",
                        "validate"
                    ],
                    "docstring": "Reddit-specific configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\reddit\\exceptions.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "RedditError": {
                    "methods": [],
                    "docstring": "Base class for Reddit strategy exceptions.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogoutError": {
                    "methods": [],
                    "docstring": "Raised when logout fails due to session/auth issues.",
                    "base_classes": [
                        "RedditError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LoginError": {
                    "methods": [],
                    "docstring": "Exception raised when login fails.",
                    "base_classes": [
                        "RedditError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PostError": {
                    "methods": [],
                    "docstring": "Raised when post operations fail.",
                    "base_classes": [
                        "RedditError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MediaError": {
                    "methods": [],
                    "docstring": "Exception raised when media operations fail.",
                    "base_classes": [
                        "RedditError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AuthenticationError": {
                    "methods": [],
                    "docstring": "Raised when authentication fails.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RateLimitError": {
                    "methods": [],
                    "docstring": "Raised when rate limit is exceeded.",
                    "base_classes": [
                        "RedditError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\strategies\\reddit\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "login"
                    ],
                    "docstring": "Handles login functionality for Reddit.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "social\\strategies\\reddit\\media.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media",
                "prepare_media"
            ],
            "classes": {
                "RedditMediaHandler": {
                    "methods": [
                        "__init__",
                        "validate_media",
                        "prepare_media"
                    ],
                    "docstring": "Handles media operations for Reddit posts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\reddit\\post_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post"
            ],
            "classes": {
                "PostHandler": {
                    "methods": [
                        "__init__",
                        "create_post"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "social\\strategies\\reddit\\strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "record_metric",
                "get_metrics",
                "get_summary",
                "save_metrics",
                "load_metrics",
                "clear_metrics",
                "_load_session",
                "_save_session",
                "_is_session_valid",
                "login",
                "is_logged_in",
                "verify_session",
                "create_post",
                "_handle_rate_limit",
                "_handle_error",
                "post",
                "comment",
                "_validate_media",
                "retry_operation"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "record_metric",
                        "get_metrics",
                        "get_summary",
                        "save_metrics",
                        "load_metrics",
                        "clear_metrics",
                        "_load_session",
                        "_save_session",
                        "_is_session_valid",
                        "login",
                        "is_logged_in",
                        "verify_session",
                        "create_post",
                        "_handle_rate_limit",
                        "_handle_error",
                        "post",
                        "comment",
                        "_validate_media",
                        "retry_operation"
                    ],
                    "docstring": "Strategy for interacting with Reddit.",
                    "base_classes": [
                        "PlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "social\\strategies\\reddit\\handlers\\base_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "configure",
                "get_config",
                "validate",
                "cleanup"
            ],
            "classes": {
                "BaseHandler": {
                    "methods": [
                        "__init__",
                        "configure",
                        "get_config",
                        "validate",
                        "cleanup"
                    ],
                    "docstring": "Abstract base handler for Reddit strategy modules.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\reddit\\handlers\\comment_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_comment",
                "_verify_comment_success"
            ],
            "classes": {
                "CommentHandler": {
                    "methods": [
                        "__init__",
                        "add_comment",
                        "_verify_comment_success"
                    ],
                    "docstring": "Handles all comment-related operations for Reddit.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\reddit\\handlers\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_credentials",
                "validate_credentials",
                "_validate_session_cookie",
                "_clear_session",
                "is_logged_in",
                "_handle_login_error",
                "login",
                "verify_session",
                "check_login_state",
                "logout",
                "refresh_session",
                "_save_session",
                "_load_session",
                "get_session",
                "get_headers",
                "get_last_action",
                "get_last_error"
            ],
            "classes": {
                "LoginCredentials": {
                    "methods": [],
                    "docstring": "Reddit login credentials.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LoginSession": {
                    "methods": [],
                    "docstring": "Reddit login session.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LoginError": {
                    "methods": [],
                    "docstring": "Login error.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "set_credentials",
                        "validate_credentials",
                        "_validate_session_cookie",
                        "_clear_session",
                        "is_logged_in",
                        "_handle_login_error",
                        "login",
                        "verify_session",
                        "check_login_state",
                        "logout",
                        "refresh_session",
                        "_save_session",
                        "_load_session",
                        "get_session",
                        "get_headers",
                        "get_last_action",
                        "get_last_error"
                    ],
                    "docstring": "Handles Reddit login operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\reddit\\handlers\\logout_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "LogoutHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles logout operations for Reddit strategy.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "social\\strategies\\reddit\\handlers\\media_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media",
                "process_media"
            ],
            "classes": {
                "MediaHandler": {
                    "methods": [
                        "__init__",
                        "validate_media",
                        "process_media"
                    ],
                    "docstring": "Handles media validation and processing for Reddit posts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\reddit\\handlers\\post_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "_handle_media_upload",
                "_verify_post_success"
            ],
            "classes": {
                "PostHandler": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "_handle_media_upload",
                        "_verify_post_success"
                    ],
                    "docstring": "Handles all post-related operations for Reddit.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\strategies\\reddit\\rate_limiting\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "rate_limit",
                "__init__",
                "set_rate_limit",
                "get_rate_limit",
                "check_rate_limit",
                "reset_rate_limit",
                "get_remaining_calls",
                "rate_limit",
                "_is_within_rate_limit",
                "decorator",
                "wrapper"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "set_rate_limit",
                        "get_rate_limit",
                        "check_rate_limit",
                        "reset_rate_limit",
                        "get_remaining_calls",
                        "rate_limit",
                        "_is_within_rate_limit"
                    ],
                    "docstring": "Rate limiter for API calls.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\strategies\\reddit\\validators\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for Reddit posts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "social\\strategies\\twitter\\login_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "_verify_login",
                "_save_session",
                "_load_session",
                "refresh_session"
            ],
            "classes": {
                "LoginHandler": {
                    "methods": [
                        "__init__",
                        "login",
                        "_verify_login",
                        "_save_session",
                        "_load_session",
                        "refresh_session"
                    ],
                    "docstring": "Handles Twitter login operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\strategies\\twitter\\media_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media",
                "upload_media"
            ],
            "classes": {
                "TwitterMediaHandler": {
                    "methods": [
                        "__init__",
                        "validate_media",
                        "upload_media"
                    ],
                    "docstring": "Handles Twitter media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "social\\strategies\\twitter\\post_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_post",
                "_attach_media",
                "_verify_post"
            ],
            "classes": {
                "PostHandler": {
                    "methods": [
                        "__init__",
                        "create_post",
                        "_attach_media",
                        "_verify_post"
                    ],
                    "docstring": "Handles Twitter post operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\strategies\\twitter\\rate_limiting\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "rate_limit",
                "decorator",
                "__init__",
                "check_rate_limit",
                "get_remaining_operations",
                "get_reset_time",
                "wrapper"
            ],
            "classes": {
                "RateLimiter": {
                    "methods": [
                        "__init__",
                        "check_rate_limit",
                        "get_remaining_operations",
                        "get_reset_time"
                    ],
                    "docstring": "Handles rate limiting for Twitter operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\utils\\cleanup.py": {
            "language": ".py",
            "functions": [
                "cleanup_temp_files",
                "cleanup_old_logs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "social\\utils\\devlog_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_event",
                "get_log",
                "clear_log",
                "add_entry"
            ],
            "classes": {
                "DevLogManager": {
                    "methods": [
                        "__init__",
                        "log_event",
                        "get_log",
                        "clear_log",
                        "add_entry"
                    ],
                    "docstring": "Stub implementation of DevLogManager.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\utils\\log_batcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_log",
                "flush",
                "should_flush"
            ],
            "classes": {
                "LogBatcher": {
                    "methods": [
                        "__init__",
                        "add_log",
                        "flush",
                        "should_flush"
                    ],
                    "docstring": "Handles batching of logs for efficient processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "social\\utils\\log_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_logging",
                "debug",
                "info",
                "warning",
                "error",
                "critical"
            ],
            "classes": {
                "LogLevel": {
                    "methods": [],
                    "docstring": "Log levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogConfig": {
                    "methods": [],
                    "docstring": "Log configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogManager": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                    ],
                    "docstring": "Manages logging for social media operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\utils\\log_rotator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_file_size",
                "_get_file_age",
                "_rotate_file",
                "_cleanup_old_backups",
                "check_rotation",
                "rotate_all",
                "get_rotation_info"
            ],
            "classes": {
                "LogRotator": {
                    "methods": [
                        "__init__",
                        "_get_file_size",
                        "_get_file_age",
                        "_rotate_file",
                        "_cleanup_old_backups",
                        "check_rotation",
                        "rotate_all",
                        "get_rotation_info"
                    ],
                    "docstring": "Handles log file rotation and cleanup.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "social\\utils\\log_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LogTypes": {
                    "methods": [],
                    "docstring": "Enumeration of log types used in the system.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RotationConfig": {
                    "methods": [],
                    "docstring": "Configuration for log rotation.\n\nAttributes:\n    max_size_mb: Maximum size of log file in MB before rotation\n    max_files: Maximum number of backup files to keep\n    max_age_days: Maximum age of log files in days\n    compress_after_days: Number of days after which to compress old logs\n    backup_dir: Optional directory for backup files\n    max_bytes: Maximum size of log file in bytes before rotation",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "social\\utils\\media_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_media"
            ],
            "classes": {
                "MediaValidator": {
                    "methods": [
                        "__init__",
                        "validate_media"
                    ],
                    "docstring": "Validates media files for social media posts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "social\\utils\\social_common.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tasks\\refactor_ui.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\agent_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "mock_bridge_integration",
                "mock_response_tracker",
                "bridge_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\agent_cellphone.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test__init_injection_log",
                "test__load_coords",
                "test__check_cooldown",
                "test__update_injection_log",
                "test_type_message",
                "test_broadcast_message",
                "test_force_resume_bridge",
                "test_mass_resume_bridge"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\agent_control.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_register_agent",
                "test_unregister_agent",
                "test_get_agent",
                "test_list_agents",
                "test_update_agent_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\agent_controller.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\agent_dashboard.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_ui",
                "test__log_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\agent_helpers.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_load_agent_ownership",
                "test_determine_responsible_agent",
                "test_validate_agent_id",
                "test_build_agent_message",
                "test_parse_test_failures",
                "test_get_test_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\agent_logger.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_log",
                "test__create_inbox_message",
                "test_get_log",
                "test_clear_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "mock_controller",
                "agent_loop",
                "sample_inbox_data",
                "test_agent_loop_initialization",
                "test_load_inbox",
                "test_save_inbox"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\agent_monitor.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_ui",
                "test_refresh_agents",
                "test__show_devlog",
                "test__force_resume",
                "test__onboard_agent",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\agent_onboarder.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test__init_status_file",
                "test_onboard_agent",
                "test_onboard_all_agents",
                "test__update_status",
                "test_get_active_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\agent_operations.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_list_agents",
                "test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\agent_restarter.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test_start",
                "test_stop",
                "test_queue_status_check",
                "test__check_agents",
                "test__check_agent",
                "test__recover_agent",
                "test_get_stalled_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\agent_selection_dialog.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_ui",
                "test__handle_selection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\agent_state.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_update_agent_state",
                "test_get_agent_state",
                "test_get_idle_agents",
                "test_is_agent_stuck",
                "test_get_agent_stats",
                "test_get_all_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\agent_state_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\agent_status.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__ensure_status_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\agent_status_panel.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_setup_ui",
                "test_update_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\async_file_watcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_temp_dir",
                "test_file_watcher"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\atomic.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_safe_read",
                "test_safe_write"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\atomic_file_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\auth_manager.py": {
            "language": ".py",
            "functions": [
                "auth_config",
                "security_config",
                "auth_manager",
                "test_register_user",
                "test_authenticate",
                "test_login_attempts",
                "test_token_validation",
                "test_user_info",
                "test_role_management",
                "test_user_persistence",
                "test_concurrent_access",
                "register_and_login"
            ],
            "classes": {
                "TestAuthManager": {
                    "methods": [
                        "test_register_user",
                        "test_authenticate",
                        "test_login_attempts",
                        "test_token_validation",
                        "test_user_info",
                        "test_role_management",
                        "test_user_persistence",
                        "test_concurrent_access"
                    ],
                    "docstring": "Test suite for AuthManager class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "tests\\automation.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__handle_shutdown",
                "test_load_tasks",
                "test_save_devlog"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\autonomy_loop_runner.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\auto_trigger_runner.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__should_trigger",
                "test__determine_responsible_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\base.py": {
            "language": ".py",
            "functions": [
                "base_component",
                "sample_message",
                "test_base_message_handler",
                "__init__"
            ],
            "classes": {
                "TestMessage": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "tests\\base_bridge_handler.py": {
            "language": ".py",
            "functions": [
                "sample_config",
                "watch_dir",
                "mock_agent_loop"
            ],
            "classes": {
                "TestBridgeHandler": {
                    "methods": [],
                    "docstring": "Test implementation of BaseBridgeHandler.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\base_controller.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_is_initialized",
                "test_is_running",
                "test_get_config",
                "test_set_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\base_handler.py": {
            "language": ".py",
            "functions": [
                "sample_config",
                "base_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\bridge.py": {
            "language": ".py",
            "functions": [
                "config",
                "bridge",
                "sample_messages",
                "test_bridge_initialization",
                "test_format_message",
                "test_format_system_message",
                "test_format_user_message",
                "test_format_assistant_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\bridge_config.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_load",
                "test_save",
                "test_validate"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\bridge_health.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_check_health",
                "test_update_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\bridge_integration.py": {
            "language": ".py",
            "functions": [
                "bridge_integration",
                "test_bridge_integration_init",
                "test_enhance_prompt",
                "test_get_health_status",
                "test_get_agent_responses"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\bridge_logger.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "setup_teardown",
                "mock_config",
                "mock_driver",
                "bridge_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\bridge_outbox_handler.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\bridge_processor.py": {
            "language": ".py",
            "functions": [
                "config",
                "processor",
                "valid_data",
                "invalid_data",
                "test_get_metrics",
                "test_update_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\bridge_writer.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\browser_control.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_start",
                "test_stop",
                "test_navigate_to",
                "test_wait_for_element",
                "test_send_keys",
                "test_click",
                "test_get_text"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\calibration.py": {
            "language": ".py",
            "functions": [
                "test_calibration_init",
                "test_calibration_process",
                "test_calibration_accuracy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\captain.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_create_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\captain_phone.py": {
            "language": ".py",
            "functions": [
                "sample_config",
                "captain_phone",
                "test_singleton",
                "test_send_message",
                "test_broadcast_message",
                "test_get_messages",
                "test_acknowledge_message",
                "test_monitor_response",
                "test_save_response",
                "test_get_all_agents",
                "test_clear_messages"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\cellphone_cli.py": {
            "language": ".py",
            "functions": [
                "setup_test_environment",
                "run_cli_command",
                "test_cli_help",
                "test_cli_required_args",
                "test_cli_welcome_message",
                "test_cli_custom_message",
                "test_cli_invalid_priority",
                "test_cli_invalid_mode",
                "test_cli_message_with_mode",
                "test_cli_concurrent_messages"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\cell_phone.py": {
            "language": ".py",
            "functions": [
                "temp_coord_file",
                "cell_phone",
                "captain_phone",
                "temp_queue_file",
                "message_queue",
                "test_validate_phone_number",
                "test_format_phone_number",
                "ensure_test_inbox",
                "test_message_queue_operations",
                "test_cell_phone_initialization",
                "test_recover_from_corrupt_coord_file",
                "test_captain_phone_singleton",
                "test_queue_load_malformed_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\chatgpt_bridge.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "sample_data",
                "test_init",
                "test_load_health",
                "test_update_health",
                "test_start",
                "test_stop",
                "test_process_request",
                "test_worker_loop",
                "test_ensure_valid_session",
                "test_handle_login",
                "test_launch_browser",
                "test_send_prompt",
                "test_focus_cursor_window",
                "test_paste_to_cursor",
                "test_load_pending_requests",
                "test_save_pending_requests",
                "test_browser_launch",
                "test_session_management",
                "test_send_prompt_success",
                "test_send_prompt_retry",
                "test_send_prompt_max_retries",
                "test_request_queuing",
                "test_health_check"
            ],
            "classes": {},
            "routes": [],
            "complexity": 24
        },
        "tests\\cleanup.py": {
            "language": ".py",
            "functions": [
                "cleanup",
                "temp_file",
                "temp_dir",
                "test_initialization",
                "test_file_lock_detection",
                "test_force_close_handle",
                "test_safe_remove_file",
                "test_safe_remove_directory",
                "test_cleanup_directory",
                "test_cleanup_temp_files",
                "test_error_handling",
                "test_wait_for_file_unlock"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\cli.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\cli_smoke.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\codex_patch_tracker.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_track_patch",
                "test_get_patch_status",
                "test_get_all_patches"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\codex_quality_controller.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__format_validation_prompt",
                "test__log_judgment"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\common.py": {
            "language": ".py",
            "functions": [
                "sample_message",
                "sample_context",
                "test_message_to_dict",
                "test_message_from_dict",
                "test_message_sender_id",
                "test_message_validate",
                "test_context_to_dict",
                "test_context_from_dict"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\config.py": {
            "language": ".py",
            "functions": [
                "config",
                "test_config_defaults",
                "test_config_custom_values",
                "test_invalid_log_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\config_loader.py": {
            "language": ".py",
            "functions": [
                "config_dir",
                "base_config",
                "test_config",
                "agent_config",
                "test_load_base_config",
                "test_load_test_config",
                "test_load_agent_config",
                "test_config_validation",
                "test_save_agent_config",
                "test_config_merging",
                "test_config_caching"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\config_manager.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__ensure_config_dir",
                "test__load_config",
                "test__validate_config",
                "test__save_config",
                "test_get",
                "test_set",
                "test_reset",
                "test_get_bridge_config",
                "test_set_bridge_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\config_validator.py": {
            "language": ".py",
            "functions": [
                "test_valid_configs",
                "test_missing_required_field",
                "test_invalid_type",
                "test_strict_mode",
                "test_unused_config"
            ],
            "classes": {
                "TestConfigValidator": {
                    "methods": [
                        "test_valid_configs",
                        "test_missing_required_field",
                        "test_invalid_type",
                        "test_strict_mode",
                        "test_unused_config"
                    ],
                    "docstring": "Test cases for the ConfigValidator class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "safe_delete",
                "test_env",
                "setup_test_environment",
                "test_dirs",
                "test_config",
                "clean_test_dirs",
                "temp_dir",
                "test_config_dir",
                "test_file",
                "test_json",
                "test_yaml",
                "test_log_dir",
                "test_bridge_outbox",
                "mock_message",
                "mock_agent",
                "pytest_configure",
                "pytest_collection_modifyitems",
                "pytest_sessionstart"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "tests\\content_loop.py": {
            "language": ".py",
            "functions": [
                "content_loop",
                "test_content_event_logging",
                "test_task_completion_logging",
                "test_insight_logging",
                "test_content_history_filtering",
                "test_invalid_event_type"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\controller.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_get_agent",
                "test_register_agent",
                "test_unregister_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\coordinate_calibrator.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_load_coordinates",
                "test_save_coordinates",
                "test_get_coordinates",
                "test_update_coordinates",
                "test_calibrate_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\coordinate_manager.py": {
            "language": ".py",
            "functions": [
                "test_coordinate_manager_initialization",
                "test_coordinate_operations",
                "test_invalid_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\coordinate_transform.py": {
            "language": ".py",
            "functions": [
                "test_screen_to_relative",
                "test_relative_to_screen",
                "test_transform_edge_cases"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\coordinate_transformer.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__get_monitors",
                "test_transform_coordinates",
                "test_transform_coordinate_dict"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\coordinate_utils.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_load_coordinates",
                "test_validate_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "config",
                "daemon",
                "agent_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core_response_processor.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core_utils.py": {
            "language": ".py",
            "functions": [
                "sample_message",
                "sample_dict_message",
                "temp_dir",
                "test_format_message_text",
                "test_format_message_dict",
                "test_parse_message_json",
                "test_parse_message_text",
                "test_validate_message_valid",
                "test_validate_message_invalid",
                "test_get_message_type",
                "test_get_message_content",
                "test_get_message_timestamp",
                "test_get_message_timestamp_default",
                "test_format_timestamp",
                "test_write_json",
                "test_write_json_ensure_dir",
                "test_read_yaml",
                "test_ensure_directory_exists",
                "test_atomic_write",
                "test_safe_read_existing",
                "test_safe_read_missing"
            ],
            "classes": {},
            "routes": [],
            "complexity": 21
        },
        "tests\\cursor_agent_bridge.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_agent_regions",
                "test__inject_to_cursor",
                "test___init__",
                "test_on_created"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\cursor_controller.py": {
            "language": ".py",
            "functions": [
                "test_cursor_controller_init",
                "test_cursor_movement",
                "test_cursor_click"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\cursor_handler.py": {
            "language": ".py",
            "functions": [
                "mock_message",
                "mock_response",
                "handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\daemon.py": {
            "language": ".py",
            "functions": [
                "daemon_config",
                "mock_bridge_handler",
                "daemon"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\debug_utils.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_parse_test_failures",
                "test_create_fix_request",
                "test_save_fix_request",
                "test_load_fix_request",
                "test_archive_fix_request",
                "test_extract_agent_id"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\devlog_bridge_isolated_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\devlog_bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\devlog_manager.py": {
            "language": ".py",
            "functions": [
                "temp_log_dir",
                "devlog_manager",
                "test_initialization",
                "test_log_event",
                "test_get_log",
                "test_clear_log",
                "test_multiple_agents",
                "test_error_handling",
                "test_send_embed",
                "test_shutdown",
                "test_invalid_agent_id",
                "test_invalid_event",
                "test_large_data"
            ],
            "classes": {
                "TestDevlogManager": {
                    "methods": [
                        "temp_log_dir",
                        "devlog_manager",
                        "test_initialization",
                        "test_log_event",
                        "test_get_log",
                        "test_clear_log",
                        "test_multiple_agents",
                        "test_error_handling",
                        "test_send_embed",
                        "test_shutdown",
                        "test_invalid_agent_id",
                        "test_invalid_event",
                        "test_large_data"
                    ],
                    "docstring": "Test suite for DevlogManager class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\dialogs.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_dispatcher_init",
                "test_dispatcher_task_routing",
                "test_dispatcher_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\dreamscribe.py": {
            "language": ".py",
            "functions": [
                "dreamscribe",
                "test_memory_ingestion",
                "test_narrative_threading",
                "test_insight_patterns",
                "test_memory_connections"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\engine.py": {
            "language": ".py",
            "functions": [
                "validation_engine",
                "sample_data",
                "config",
                "engine",
                "valid_agent_state",
                "test_validation_engine_init",
                "test_validate",
                "test_add_validator",
                "test_validate_required_fields",
                "test_validate_field_type",
                "test_validator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\enhanced_response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_agent_regions",
                "test__save_agent_regions",
                "test__create_response_processor",
                "test__get_response_files",
                "test__has_region_stabilized",
                "test__hash_region",
                "test___init__",
                "test_on_created"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\environment.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup",
                "cleanup",
                "managed",
                "get_test_dir",
                "create_test_file",
                "create_test_config"
            ],
            "classes": {
                "TestEnvironment": {
                    "methods": [
                        "__init__",
                        "setup",
                        "cleanup",
                        "managed",
                        "get_test_dir",
                        "create_test_file",
                        "create_test_config"
                    ],
                    "docstring": "Manages test environment setup and cleanup.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\env_sanity.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\error_handler.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__get_error_severity",
                "test__should_retry",
                "test__calculate_retry_delay"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\error_reporter.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_generate_report",
                "test_save_report",
                "test__count_by_severity",
                "test__count_by_agent",
                "test__count_by_type"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\error_tracker.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_record_error",
                "test_record_success",
                "test_can_execute",
                "test_get_error_summary"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\error_tracking.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_to_dict",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___init__",
                "test_record_failure",
                "test_record_success",
                "test_can_execute",
                "test_get_health_metrics",
                "test_manual_reset",
                "test___init__",
                "test_record_error",
                "test_record_success",
                "test_can_execute",
                "test_get_error_summary",
                "test_get_agent_health",
                "test_get_critical_errors",
                "test__archive_unfixable_error",
                "test_clear_errors",
                "test_manual_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 22
        },
        "tests\\file_handler.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_on_created",
                "test_on_modified",
                "test_on_deleted"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\file_ops.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "test_dir",
                "test_file",
                "test_subdir",
                "test_files",
                "ensure_test_dirs",
                "safe_remove",
                "safe_rmdir",
                "ensure_dir",
                "get_test_file_path",
                "create_test_file",
                "cleanup_test_environment",
                "test_safe_mkdir_new",
                "test_safe_mkdir_existing",
                "test_safe_mkdir_file_exists",
                "test_safe_mkdir_permission_error",
                "test_safe_mkdir_concurrent",
                "test_ensure_dir",
                "test_ensure_dir_failure",
                "test_clear_dir",
                "test_archive_file",
                "test_archive_file_nonexistent",
                "mkdir_worker"
            ],
            "classes": {},
            "routes": [],
            "complexity": 24
        },
        "tests\\file_utils.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "temp_json_file",
                "test_write_json",
                "test_read_json",
                "test_read_json_nonexistent",
                "test_write_json_invalid_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\find_duplicate_classes.py": {
            "language": ".py",
            "functions": [
                "test_no_duplicates",
                "test_exact_duplicates",
                "test_similar_classes",
                "test_different_bases",
                "test_min_similarity"
            ],
            "classes": {
                "TestDuplicateClassFinder": {
                    "methods": [
                        "test_no_duplicates",
                        "test_exact_duplicates",
                        "test_similar_classes",
                        "test_different_bases",
                        "test_min_similarity"
                    ],
                    "docstring": "Test cases for the DuplicateClassFinder class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\fix_loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__get_next_batch",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\fix_manager.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__analyze_failure",
                "test__get_source_content",
                "test__write_source_content",
                "test__extract_missing_import",
                "test__add_import_statement",
                "test__extract_assertion_values",
                "test__update_assertion",
                "test__extract_error_pattern",
                "test__apply_generic_fix",
                "test__fix_type_error",
                "test__fix_value_error",
                "test__fix_attribute_error",
                "test__fix_key_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\formatter.py": {
            "language": ".py",
            "functions": [
                "formatter",
                "sample_devlog",
                "long_content",
                "test_env",
                "setup_test_environment",
                "snapshot_dir",
                "test_twitter_formatting",
                "test_reddit_formatting",
                "test_discord_formatting",
                "test_unknown_platform",
                "test_empty_content",
                "test_long_content_truncation",
                "test_snapshot_twitter",
                "test_snapshot_reddit",
                "test_snapshot_discord",
                "test_format_post_chain",
                "test_title_formatting",
                "test_twitter_format",
                "test_reddit_format",
                "test_discord_format"
            ],
            "classes": {},
            "routes": [],
            "complexity": 20
        },
        "tests\\gui.py": {
            "language": ".py",
            "functions": [
                "test_main_window_creation",
                "test_tab_widget",
                "test_menu_bar",
                "test_status_bar",
                "test_auto_close"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\gui_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_verify_configs",
                "test_main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\handler.py": {
            "language": ".py",
            "functions": [
                "watch_dir",
                "handler",
                "sample_data",
                "test_handler_init",
                "test_handler_init_with_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\handlers.py": {
            "language": ".py",
            "functions": [
                "handler_config",
                "mock_handler",
                "outbox_dir",
                "test_file",
                "__init__"
            ],
            "classes": {
                "MockBridgeHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock bridge handler for testing.",
                    "base_classes": [
                        "BaseBridgeHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\health.py": {
            "language": ".py",
            "functions": [
                "health_monitor",
                "test_health_monitor_initialization",
                "test_health_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\heartbeat_monitor.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test_start",
                "test_stop",
                "test__check_agents",
                "test_get_stalled_agents",
                "test___init__",
                "test_on_modified"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\helpers_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_load_test_config",
                "test_setup_test_env",
                "test_cleanup_test_env",
                "test_mock_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\high_priority_dispatcher.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test_start",
                "test_stop",
                "test_queue_agent",
                "test__process_queue",
                "test__process_agent",
                "test__parse_intent",
                "test__choose_target",
                "test__format_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\history.py": {
            "language": ".py",
            "functions": [
                "history_dir",
                "history",
                "sample_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\identity_utils.py": {
            "language": ".py",
            "functions": [
                "identity_config",
                "test_generate_agent_id",
                "test_validate_password",
                "test_password_hashing",
                "test_generate_token",
                "test_format_agent_name"
            ],
            "classes": {
                "TestIdentityUtils": {
                    "methods": [
                        "test_generate_agent_id",
                        "test_validate_password",
                        "test_password_hashing",
                        "test_generate_token",
                        "test_format_agent_name"
                    ],
                    "docstring": "Test suite for IdentityUtils class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "tests\\imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\inbox.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\inbox_handler.py": {
            "language": ".py",
            "functions": [
                "config",
                "watch_dir",
                "handler",
                "sample_response",
                "sample_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\inheritance_patterns.py": {
            "language": ".py",
            "functions": [
                "temp_project",
                "patch_tracker",
                "validator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\interface.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_login",
                "test_logout",
                "test_verify_session",
                "test_refresh_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\io_operations.py": {
            "language": ".py",
            "functions": [
                "temp_dir",
                "json_ops",
                "atomic_ops",
                "agent_io",
                "test_json_read_write",
                "test_atomic_file_operations",
                "test_agent_io_operations"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\journal.py": {
            "language": ".py",
            "functions": [
                "test_calculate_relapse_risk",
                "test_add_entry_and_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\json_ops.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_read_json",
                "test_write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\json_settings.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "config_node",
                "json_config_file",
                "test_config_node_initialization",
                "test_config_node_attribute_access",
                "test_config_node_iteration",
                "test_config_node_items",
                "test_config_node_values",
                "test_config_node_getitem",
                "test_config_node_as_dict",
                "test_json_config_initialization",
                "test_json_config_reload",
                "test_json_config_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\json_utils.py": {
            "language": ".py",
            "functions": [
                "temp_json_file",
                "test_load_json",
                "test_load_json_default",
                "test_save_json",
                "test_read_json",
                "test_write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\keyword_extract.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_extract"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\llm_agent.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_get_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\loader.py": {
            "language": ".py",
            "functions": [
                "config_loader",
                "test_config_loader_initialization",
                "test_load_config",
                "test_save_agent_config",
                "test_validate_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\logger.py": {
            "language": ".py",
            "functions": [
                "logger",
                "test_logger_initialization",
                "test_log_message",
                "test_log_response",
                "test_log_metric",
                "test_log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "log_dir",
                "temp_log_dir",
                "platform_logger",
                "status_tracker",
                "test_configure_logging",
                "test_get_logger",
                "test_log_platform_event",
                "test_log_event",
                "test_get_events",
                "test_clear_events",
                "test_update_status",
                "test_get_status",
                "test_reset_status",
                "test_log_file_creation",
                "test_log_rotation",
                "test_log_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "tests\\log_batcher.py": {
            "language": ".py",
            "functions": [
                "log_batcher"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\log_config.py": {
            "language": ".py",
            "functions": [
                "test_log_level_ordering",
                "test_log_level_from_string",
                "test_log_config_defaults",
                "test_log_config_serialization",
                "test_log_paths",
                "test_retention_date"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\log_console.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_setup_ui",
                "test_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\log_entry.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_log_entry_initialization",
                "test_to_dict",
                "test_from_dict"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\log_level.py": {
            "language": ".py",
            "functions": [
                "test_from_str",
                "test___str__",
                "test_value"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\log_manager.py": {
            "language": ".py",
            "functions": [
                "reset_log_manager",
                "cleanup",
                "metrics",
                "test_metrics_initialization",
                "test_metrics_increment_logs",
                "test_metrics_record_error",
                "test_metrics_record_rotation",
                "test_metrics_reset",
                "test_log_rotation",
                "test_log_cleanup"
            ],
            "classes": {
                "TestLogMetrics": {
                    "methods": [
                        "test_metrics_initialization",
                        "test_metrics_increment_logs",
                        "test_metrics_record_error",
                        "test_metrics_record_rotation",
                        "test_metrics_reset"
                    ],
                    "docstring": "Test suite for log metrics functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestLogManager": {
                    "methods": [
                        "test_log_rotation",
                        "test_log_cleanup"
                    ],
                    "docstring": "Test suite for log manager functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\log_monitor.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_ui",
                "test_refresh_logs",
                "test_clear_logs",
                "test__show_details",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\log_pipeline.py": {
            "language": ".py",
            "functions": [
                "temp_log_dir",
                "log_config",
                "pipeline",
                "sample_entry",
                "test_log_pipeline_initialization",
                "test_add_entry",
                "test_flush",
                "test_get_log_info",
                "test_read_logs",
                "test_start_stop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\log_rotator.py": {
            "language": ".py",
            "functions": [
                "rotator",
                "test_log_rotator_initialization",
                "test_rotate_all",
                "test_cleanup_old_backups",
                "test_get_rotation_info",
                "test_get_file_age",
                "test_check_rotation",
                "test_rotate_file",
                "test_get_file_size"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\log_writer.py": {
            "language": ".py",
            "functions": [
                "temp_log_dir",
                "log_config",
                "log_writer",
                "sample_log_entry",
                "test_log_writer_initialization",
                "test_write_log",
                "test_write_log_json",
                "test_read_logs",
                "test_metrics_operations",
                "test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\loop_drift_detector.py": {
            "language": ".py",
            "functions": [
                "test_no_drift",
                "test_drift_detected",
                "test_missing_files",
                "test_resume_agent"
            ],
            "classes": {
                "TestLoopDriftDetector": {
                    "methods": [
                        "test_no_drift",
                        "test_drift_detected",
                        "test_missing_files",
                        "test_resume_agent"
                    ],
                    "docstring": "Test cases for the LoopDriftDetector class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "tests\\loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "error_tracker",
                "test_loop",
                "test_test_loop_initialization",
                "test_test_loop_start_stop",
                "test_get_test_results"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\main.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\main_window.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_menu",
                "test__show_about",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\manager.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_config",
                "test_authenticate",
                "test_validate_token",
                "test_refresh_token",
                "test_create_session",
                "test_get_session",
                "test_invalidate_session"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\media_validator.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_validate_files",
                "test_validate",
                "test_validate_media"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\memory_querier.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "memory_dir",
                "memory_files",
                "test_memory_querier_initialization",
                "test_memory_querier_loading",
                "test_memory_querier_saving",
                "setup_teardown",
                "memory_querier",
                "test_get_recent_memory",
                "test_summarize_topic",
                "test_find_similar_threads",
                "test_get_agent_insights",
                "test_get_task_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\menu.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\menu_builder.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_set_controller",
                "test__handle_menu_action",
                "test_cleanup",
                "test__build_menu",
                "test__handle_list_agents",
                "test__handle_agent_selection",
                "test_display_menu",
                "test_connect_signals",
                "test_disconnect_signals"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\message.py": {
            "language": ".py",
            "functions": [
                "processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\message_handler.py": {
            "language": ".py",
            "functions": [
                "base_dir",
                "handler",
                "sample_message",
                "test_message_validation",
                "test_send_and_get_messages",
                "test_mark_as_processed",
                "test_agent_status",
                "test_cleanup_old_messages"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\message_loop.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\message_processor.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\message_queue.py": {
            "language": ".py",
            "functions": [
                "queue",
                "sample_message",
                "test_enqueue_dequeue",
                "test_peek",
                "test_clear",
                "test_priority_ordering",
                "test_subscribe_unsubscribe",
                "test_get_all_messages",
                "callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\message_record.py": {
            "language": ".py",
            "functions": [
                "record_dir",
                "record",
                "sample_message",
                "test_record_message",
                "test_get_history_with_filter",
                "test_clear_history",
                "test_clear_history_with_filter"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\message_system.py": {
            "language": ".py",
            "functions": [
                "runtime_dir",
                "queue",
                "history",
                "message_system",
                "sample_message",
                "test_message_formatting",
                "test_message_system_send_receive",
                "test_message_system_acknowledge",
                "test_message_system_history_filtering"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\messaging.py": {
            "language": ".py",
            "functions": [
                "mock_agent_control",
                "mock_message_pipeline",
                "gui_test_env",
                "persistent_queue",
                "test_full_message_loop",
                "test_message_loop_error_handling",
                "test_message_loop_invalid_agent",
                "test_queue_clear_agent",
                "test_queue_clear_history",
                "test_response_collector",
                "test_response_collector_mock",
                "test_real_ui_automation",
                "test_message_creation",
                "test_message_serialization"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\metrics.py": {
            "language": ".py",
            "functions": [
                "metrics",
                "test_metrics_initialization",
                "test_record_request",
                "test_record_success",
                "test_record_error",
                "test_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\metrics_server.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test__load_metrics",
                "test_metrics",
                "test_start"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\migrate_tests.py": {
            "language": ".py",
            "functions": [
                "ensure_dir",
                "copy_files",
                "migrate_tests",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\monitoring.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\navigator.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test___iter__",
                "test___next__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\outbox.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\patch_validator.py": {
            "language": ".py",
            "functions": [
                "temp_project",
                "mock_patch_tracker",
                "validator",
                "test_init_creates_default_tracker",
                "test_init_uses_provided_tracker",
                "test_get_validation_history",
                "test_get_all_validations"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\patch_validator_integration.py": {
            "language": ".py",
            "functions": [
                "temp_project",
                "scanner",
                "patch_tracker",
                "validator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\periodic_restart.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_start_agent_management",
                "test_stop_agent_management",
                "test___init__",
                "test_start_resume_management",
                "test_stop_resume_management"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\perpetual_test_fixer.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test__process_failures",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\persistent_queue.py": {
            "language": ".py",
            "functions": [
                "test_queue_initialization",
                "test_queue_operations",
                "test_queue_persistence"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\phones.py": {
            "language": ".py",
            "functions": [
                "mock_ums",
                "phone",
                "captain_phone"
            ],
            "classes": {
                "MockUMS": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\pipeline.py": {
            "language": ".py",
            "functions": [
                "mock_ui_automation",
                "mock_queue",
                "pipeline",
                "valid_message",
                "move_to_agent",
                "click_input_box",
                "send_message",
                "click_copy_button"
            ],
            "classes": {
                "MockUIAutomation": {
                    "methods": [
                        "move_to_agent",
                        "click_input_box",
                        "send_message",
                        "click_copy_button"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "tests\\platform_login.py": {
            "language": ".py",
            "functions": [
                "login_manager",
                "mock_credentials",
                "test_unsupported_platform",
                "test_reddit_login_success",
                "test_reddit_login_failure",
                "test_twitter_login_success",
                "test_twitter_login_failure",
                "test_login_result_creation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\platform_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_config",
                "platform_strategy",
                "test_platform_strategy_initialization",
                "test_platform_strategy_memory_updates",
                "test_platform_strategy_operation_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\processor.py": {
            "language": ".py",
            "functions": [
                "processor",
                "sample_data",
                "test_processor_initialization",
                "test_update_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\processors.py": {
            "language": ".py",
            "functions": [
                "test_processor_mode",
                "test_processor_factory",
                "test_message_processor",
                "test_response_processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\processor_factory.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\prompt.py": {
            "language": ".py",
            "functions": [
                "prompt_manager",
                "test_prompt_manager_initialization",
                "test_add_template",
                "test_remove_template",
                "test_get_template"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\prompt_engine.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_process_conversation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\prompt_router.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "profiles_dir",
                "test_prompt_router_initialization",
                "test_decide_prompt_tmp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\quantum_agent_resumer.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\queue.py": {
            "language": ".py",
            "functions": [
                "queue_dir",
                "message_queue",
                "sample_message",
                "test_initialization"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\rate_limiter.py": {
            "language": ".py",
            "functions": [
                "rate_limiter",
                "test_config",
                "test_token_bucket_refill",
                "test_token_bucket_max_tokens",
                "test_twitter_rate_limit",
                "test_reddit_rate_limit",
                "test_discord_rate_limit",
                "test_unknown_platform",
                "test_concurrent_access",
                "test_state_persistence",
                "test_platform_stats",
                "test_violation_tracking",
                "post_thread"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\region_finder.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_find_cursor_regions",
                "test___init__",
                "test__load_regions",
                "test__save_regions",
                "test_start_finding",
                "test__set_start",
                "test__set_end",
                "test__quit",
                "test_get_region"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\request_queue.py": {
            "language": ".py",
            "functions": [
                "temp_queue_file",
                "queue",
                "test_add_request",
                "test_update_request",
                "test_get_pending_requests",
                "test_clear_completed"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\response.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_response_processor",
                "test_validate_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\response_capture.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_coordinates",
                "test_capture_response",
                "test_wait_for_copy_button"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\response_collector.py": {
            "language": ".py",
            "functions": [
                "response_collector",
                "sample_region",
                "test_initialization",
                "test_agent_region",
                "test_save_and_get_responses"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\response_handler.py": {
            "language": ".py",
            "functions": [
                "bridge_env",
                "mock_bridge",
                "response_handler",
                "test_extract_reply",
                "test_parse_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\response_loop_daemon.py": {
            "language": ".py",
            "functions": [
                "config",
                "daemon",
                "sample_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\response_memory_tracker.py": {
            "language": ".py",
            "functions": [
                "temp_memory_file",
                "memory_tracker",
                "sample_message",
                "test_initialization",
                "test_track_processing",
                "test_is_processed",
                "test_persistence",
                "test_invalid_file_handling",
                "test_get_stats",
                "test_concurrent_access",
                "test_metadata_persistence",
                "test_error_handling",
                "add_hash"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\response_tracker.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\response_utils.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_load_response_file",
                "test_archive_response_file",
                "test_extract_agent_id_from_file",
                "test_validate_response",
                "test___init__",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\resume_controller.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_main",
                "test___init__",
                "test_inject_prompt",
                "test_inject_task",
                "test_log_devlog",
                "test_force_resume",
                "test_check_agent_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\resume_wave.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\retry.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_with_retry",
                "test_decorator",
                "test_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\router.py": {
            "language": ".py",
            "functions": [
                "router",
                "sample_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\runner_core_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_config",
                "test___init__",
                "test_parse_test_failures",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\runner_lifecycle_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_config",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\runner_stress_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_stress_config",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\runner_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__extract_test_name",
                "test__extract_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\safe_io.py": {
            "language": ".py",
            "functions": [
                "test_atomic_write_new_file",
                "test_atomic_write_existing_file",
                "test_atomic_write_encoding",
                "test_atomic_write_binary",
                "test_atomic_write_failure_cleanup",
                "test_safe_read_default",
                "test_safe_read_encoding",
                "test_safe_write_atomic"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\scanner.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "verifier",
                "test_verifier_initialization",
                "test_check_result_creation",
                "test_check_mailboxes",
                "test_check_required_docs",
                "test_check_unit_tests",
                "test_check_orphans_and_dupes",
                "test_verification_report_generation",
                "test_verification_categories_and_severity",
                "test_recommendation_generation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\scheduler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\screenshot_logger.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_capture",
                "test_get_screenshots",
                "test_get_latest_screenshot",
                "test_compare_screenshots",
                "test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\security_config.py": {
            "language": ".py",
            "functions": [
                "temp_config_dir",
                "security_config",
                "test_default_config",
                "test_config_persistence",
                "test_config_validation",
                "test_invalid_section",
                "test_config_file_corruption",
                "test_config_file_permissions",
                "test_config_section_updates",
                "test_config_reload"
            ],
            "classes": {
                "TestSecurityConfig": {
                    "methods": [
                        "test_default_config",
                        "test_config_persistence",
                        "test_config_validation",
                        "test_invalid_section",
                        "test_config_file_corruption",
                        "test_config_file_permissions",
                        "test_config_section_updates",
                        "test_config_reload"
                    ],
                    "docstring": "Test suite for SecurityConfig class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tests\\serialization.py": {
            "language": ".py",
            "functions": [
                "test_json_roundtrip",
                "test_json_corrupted",
                "test_json_nonexistent",
                "test_json_write_permission_error",
                "test_yaml_roundtrip",
                "test_yaml_corrupted",
                "test_yaml_nonexistent",
                "test_yaml_write_permission_error",
                "test_yaml_complex_types",
                "test_json_complex_types"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\session.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\session_manager.py": {
            "language": ".py",
            "functions": [
                "session_config",
                "security_config",
                "session_manager",
                "test_create_session",
                "test_session_limit",
                "test_session_timeout",
                "test_session_metadata",
                "test_invalidate_session",
                "test_session_persistence",
                "test_cleanup_expired_sessions",
                "test_concurrent_access",
                "create_sessions"
            ],
            "classes": {
                "TestSessionManager": {
                    "methods": [
                        "test_create_session",
                        "test_session_limit",
                        "test_session_timeout",
                        "test_session_metadata",
                        "test_invalidate_session",
                        "test_session_persistence",
                        "test_cleanup_expired_sessions",
                        "test_concurrent_access"
                    ],
                    "docstring": "Test suite for SessionManager class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "tests\\smoke.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social_common.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "social_utils",
                "test_wait_for_element",
                "test_wait_for_clickable",
                "test_retry_click",
                "test___init__",
                "test_handle_login",
                "test_post_content",
                "test_verify_post_success",
                "test_validate_media",
                "test_upload_media"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\startup.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\state_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_config",
                "test_state_manager",
                "test_agent_id",
                "test_test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\state_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_state_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\system_controller.py": {
            "language": ".py",
            "functions": [
                "config",
                "controller",
                "sample_message",
                "sample_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\system_ops.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_with_retry",
                "test_transform_coordinates",
                "test_normalize_coordinates",
                "test_decorator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\system_orchestrator.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_to_dict",
                "test_from_dict",
                "test___init__",
                "test__load_message_history",
                "test__save_message_history",
                "test__connect_components",
                "test__needs_captain_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\task_completion.py": {
            "language": ".py",
            "functions": [
                "temp_config",
                "mock_discord_devlog",
                "task_completion_hook",
                "test_extract_mentioned_agents",
                "test_generate_tags",
                "test_format_task_summary",
                "test_load_config"
            ],
            "classes": {
                "TestTaskCompletionHook": {
                    "methods": [
                        "test_extract_mentioned_agents",
                        "test_generate_tags",
                        "test_format_task_summary"
                    ],
                    "docstring": "Test the TaskCompletionHook class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestTaskCompletionManager": {
                    "methods": [
                        "test_load_config"
                    ],
                    "docstring": "Test the TaskCompletionManager class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "tests\\task_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\task_scheduler.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_start",
                "test_stop",
                "test__calculate_priority_score",
                "test__is_task_ready",
                "test_get_scheduled_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\theme_manager.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_get_dialog_stylesheet",
                "test_apply_dialog_theme",
                "test_is_dark_theme"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\timing.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_wait_focus",
                "test_wait_click",
                "test_wait_typing",
                "test_wait_capture",
                "test_wait_screenshot",
                "test_wait_move",
                "test_wait_scroll",
                "test_wait_load",
                "test_wait_refresh"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\token.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_is_valid",
                "test_time_remaining",
                "test___init__",
                "test__load_secret_key",
                "test_generate_token",
                "test_validate_token",
                "test_get_token_info",
                "test_refresh_token",
                "test_invalidate_token",
                "test_cleanup_expired",
                "test__sign_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\tracker.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test_track_error",
                "test_get_error_count",
                "test_get_recent_errors"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\types.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_create_error",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\ui.py": {
            "language": ".py",
            "functions": [
                "mock_processor",
                "mock_cursor_controller",
                "mock_coordinate_manager",
                "ui",
                "sample_message",
                "test_initialize",
                "test_shutdown",
                "test_process_message",
                "test_send_message",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\ui_automation.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__initialize_monitors",
                "test__load_config",
                "test__setup_signal_handlers",
                "test__handle_interrupt",
                "test__calibration_context",
                "test__cleanup_calibration",
                "test__calibration_loop",
                "test_start_calibration",
                "test__get_screenshot_logger",
                "test__validate_window_title",
                "test__capture_debug_screenshot",
                "test__transform_coordinates",
                "test__transform_coordinate_dict",
                "test_get_agent_coordinates",
                "test__validate_coordinates",
                "test__load_coordinates",
                "test__get_default_coordinates",
                "test__click_focus",
                "test_send_message",
                "test__load_onboarding_prompt",
                "test_perform_onboarding_sequence",
                "test__split_message",
                "test_cleanup",
                "test_move_to",
                "test_click",
                "test_type_text",
                "test_press_key",
                "test_hotkey",
                "test_screenshot",
                "test__get_response",
                "test_move_to_agent",
                "test_click_input_box",
                "test_click_copy_button",
                "test_get_response_region",
                "test__has_duplicate_coordinates",
                "test__has_out_of_bounds_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 38
        },
        "tests\\unified_handler.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\unified_message_system.py": {
            "language": ".py",
            "functions": [
                "test_send_and_receive"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\utils.py": {
            "language": ".py",
            "functions": [
                "create_mock_agent",
                "create_mock_bridge",
                "create_mock_cellphone",
                "create_mock_message_processor",
                "create_temp_outbox",
                "write_test_message",
                "read_test_message",
                "ensure_test_dirs",
                "test_output_dir",
                "safe_remove",
                "test_env",
                "setup_test_environment",
                "temp_dir",
                "outbox_dir",
                "test_file",
                "test_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_test_file_manager",
                "test_mock_event_collector",
                "test_performance_timer",
                "test_state_validator",
                "test_create_test_state",
                "test_create_test_task",
                "test___init__",
                "test_corrupt_state_file",
                "test_restore_state_file",
                "test_create_test_task",
                "test_create_test_tasks",
                "test_simulate_file_corruption",
                "test___init__",
                "test_get_events_by_type",
                "test_clear_events",
                "test_register_handler",
                "test___init__",
                "test_start",
                "test_stop",
                "test_get_average_time",
                "test_get_min_time",
                "test_get_max_time",
                "test_validate_state_structure",
                "test_validate_task_structure",
                "test_validate_state_transition",
                "test_validate_task_transition"
            ],
            "classes": {},
            "routes": [],
            "complexity": 28
        },
        "tests\\validator.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_bridge_validator",
                "test_validate_message",
                "test_validate_response",
                "test_validate_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\visual_watchdog.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test_hash_screen_region",
                "test_has_region_stabilized"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\watcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__parse_test_failures",
                "test__get_agent_for_test",
                "test__mark_files_clean",
                "test__get_file_for_test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\window_manager.py": {
            "language": ".py",
            "functions": [
                "window_manager",
                "mock_win32gui",
                "mock_win32process",
                "mock_psutil",
                "test_find_cursor_window",
                "test_check_window_idle",
                "test_activate_window",
                "test_update_activity"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\yaml_utils.py": {
            "language": ".py",
            "functions": [
                "temp_yaml_file",
                "test_load_yaml",
                "test_load_yaml_default",
                "test_save_yaml",
                "test_read_yaml",
                "test_write_yaml"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__validate_config",
                "test___init__",
                "test__load_config",
                "test_get"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_response",
                "bridge"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\conftest.py": {
            "language": ".py",
            "functions": [
                "setup_test_env"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\daemon_test.py": {
            "language": ".py",
            "functions": [
                "daemon",
                "test_daemon_initialization",
                "test_start_daemon",
                "test_stop_daemon",
                "test_process_messages"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\file_ops_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_safe_mkdir",
                "test_ensure_dir",
                "test_clear_dir",
                "test_archive_file",
                "test_extract_agent_id",
                "test_backup_file",
                "test_safe_rmdir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\interface_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_login",
                "test_logout",
                "test_verify_session",
                "test_refresh_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_config",
                "test_authenticate",
                "test_validate_token",
                "test_refresh_token",
                "test_create_session",
                "test_get_session",
                "test_invalidate_session"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\perpetual_test_fixer_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test__process_failures",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\retry_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_retry",
                "test___init__",
                "test_calculate_delay",
                "test_execute",
                "test_decorator",
                "test_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\session_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\token_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_is_valid",
                "test_time_remaining",
                "test___init__",
                "test__load_secret_key",
                "test_generate_token",
                "test_validate_token",
                "test_get_token_info",
                "test_refresh_token",
                "test_invalidate_token",
                "test_cleanup_expired",
                "test__sign_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\agents\\perpetual_test_fixer_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test__process_failures",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\agent_control\\agent_cellphone_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\agent_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_start_agent",
                "test_stop_agent",
                "test_resume_agent",
                "test_verify_agent",
                "test_cleanup_agent",
                "test_get_agent_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\agent_control\\agent_control_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_register_agent",
                "test_unregister_agent",
                "test_get_agent",
                "test_list_agents",
                "test_update_agent_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\agent_control\\agent_onboarder_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\agent_control\\agent_operations_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_list_agents",
                "test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\agent_control\\agent_restarter_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__is_agent_stalled"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\agent_control\\agent_selection_dialog_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__setup_ui",
                "test__handle_selection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\agent_control\\bridge_outbox_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__load_outbox",
                "test__save_outbox"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\agent_control\\captain_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_set_menu_builder",
                "test__handle_menu_action",
                "test__handle_list_agents",
                "test_cleanup",
                "test_run",
                "test_list_agents",
                "test_onboard_agent",
                "test_resume_agent",
                "test_verify_agent",
                "test_repair_agent",
                "test_backup_agent",
                "test_restore_agent",
                "test_send_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\core\\agent_control\\coordinate_calibrator_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_load_coordinates",
                "test_save_coordinates",
                "test_get_coordinates",
                "test_update_coordinates",
                "test_calibrate_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\agent_control\\coordinate_transformer_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__get_monitors",
                "test_transform_coordinates",
                "test_transform_coordinate_dict"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\agent_control\\cursor_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_move_to",
                "test_click",
                "test_type_text",
                "test_press_enter",
                "test_get_position",
                "test_wait",
                "test_move_to_agent",
                "test_click_input_box",
                "test_click_copy_button"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\agent_control\\devlog_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_log_event",
                "test_get_log",
                "test_clear_log",
                "test_send_embed",
                "test_shutdown"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\agent_control\\high_priority_dispatcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\main_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\menu_builder_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_set_controller",
                "test__handle_menu_action",
                "test_cleanup",
                "test__build_menu",
                "test__handle_list_agents",
                "test__handle_agent_selection",
                "test_display_menu",
                "test_connect_signals",
                "test_disconnect_signals"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\agent_control\\periodic_restart_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_start_agent_management",
                "test_stop_agent_management",
                "test___init__",
                "test_start_resume_management",
                "test_stop_resume_management"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\agent_control\\response_capture_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__load_coordinates",
                "test_capture_response",
                "test_wait_for_copy_button"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\agent_control\\screenshot_logger_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_capture",
                "test_get_screenshots",
                "test_get_latest_screenshot",
                "test_compare_screenshots",
                "test_cleanup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\agent_control\\system_orchestrator_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "orchestrator",
                "test___init__",
                "test_to_dict",
                "test_from_dict",
                "test___init__",
                "test__load_message_history",
                "test__save_message_history",
                "test_message_processing",
                "test_agent_status",
                "test_message_filtering",
                "test_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\agent_control\\task_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_to_dict",
                "test_from_dict",
                "test_validate",
                "test___init__",
                "test__load_tasks",
                "test__save_tasks",
                "test_create_task",
                "test_get_task",
                "test_update_task_status",
                "test_get_agent_tasks",
                "test_get_blocked_tasks",
                "test_get_high_priority_tasks",
                "test_get_task_context",
                "test_generate_task_summary",
                "test_cleanup_completed_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\core\\agent_control\\timing_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_wait_focus",
                "test_wait_click",
                "test_wait_typing",
                "test_wait_capture",
                "test_wait_screenshot",
                "test_wait_move",
                "test_wait_scroll",
                "test_wait_load",
                "test_wait_refresh"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\agent_control\\ui_automation_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__initialize_monitors",
                "test__load_config",
                "test__setup_signal_handlers",
                "test__handle_interrupt",
                "test__calibration_context",
                "test__cleanup_calibration",
                "test__calibration_loop",
                "test_start_calibration",
                "test__get_screenshot_logger",
                "test__validate_window_title",
                "test__capture_debug_screenshot",
                "test__transform_coordinates",
                "test__transform_coordinate_dict",
                "test_get_agent_coordinates",
                "test__validate_coordinates",
                "test__load_coordinates",
                "test__get_default_coordinates",
                "test__click_focus",
                "test_send_message",
                "test__load_onboarding_prompt",
                "test_perform_onboarding_sequence",
                "test__split_message",
                "test_cleanup",
                "test_move_to",
                "test_click",
                "test_type_text",
                "test_press_key",
                "test_hotkey",
                "test_screenshot",
                "test__get_response",
                "test_move_to_agent",
                "test_click_input_box",
                "test_click_copy_button",
                "test_get_response_region",
                "test__has_duplicate_coordinates",
                "test__has_out_of_bounds_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 39
        },
        "tests\\core\\agent_control\\visual_watchdog_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_hash_screen_region",
                "test_has_region_stabilized"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\agent_control\\controllers\\agent_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\controllers\\base_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_is_initialized",
                "test_is_running",
                "test_get_config",
                "test_set_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\agent_control\\controllers\\system_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\agent_control\\recovery\\agent_restarter_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__can_restart",
                "test_callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\ai\\chatgpt_bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_format_message",
                "test_format_system_message",
                "test_format_user_message",
                "test_format_assistant_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\ai\\dreamscribe_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_memory_corpus",
                "test__load_threads",
                "test__load_insight_patterns",
                "test__save_memory_corpus",
                "test__save_thread",
                "test__save_insight_patterns",
                "test__extract_insights",
                "test__find_connections",
                "test__update_narratives",
                "test_process_with_gpt",
                "test_ingest_devlog",
                "test_get_memory",
                "test_get_thread",
                "test_get_system_insights"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\core\\ai\\llm_agent_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_get_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\ai\\memory_querier_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_get_recent_memory",
                "test_summarize_topic",
                "test__calculate_memory_similarity",
                "test_find_similar_threads",
                "test_get_agent_insights",
                "test_get_task_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\ai\\gpt_router\\engine_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_process_conversation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\ai\\gpt_router\\router_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_profile",
                "test_decide_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\auth\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___post_init__",
                "test_is_valid",
                "test_time_remaining"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\auth\\interface_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_login",
                "test_logout",
                "test_verify_session",
                "test_refresh_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\auth\\manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_config",
                "test_authenticate",
                "test_validate_token",
                "test_refresh_token",
                "test_create_session",
                "test_get_session",
                "test_invalidate_session"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\auth\\retry_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_retry",
                "test___init__",
                "test_calculate_delay",
                "test_execute",
                "test_decorator",
                "test_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\auth\\session_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\auth\\token_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_is_valid",
                "test_time_remaining",
                "test___init__",
                "test__load_secret_key",
                "test_generate_token",
                "test_validate_token",
                "test_get_token_info",
                "test_refresh_token",
                "test_invalidate_token",
                "test_cleanup_expired",
                "test__sign_token"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\automation\\browser_control_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_start",
                "test_stop",
                "test_navigate_to",
                "test_wait_for_element",
                "test_send_keys",
                "test_click",
                "test_get_text"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\autonomy\\agent_loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__load_inbox",
                "test_load_inbox",
                "test_save_inbox"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\agent_state_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_update_agent_state",
                "test_get_agent_state",
                "test_get_idle_agents",
                "test_is_agent_stuck",
                "test_get_agent_stats",
                "test_get_all_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\autonomy_loop_runner_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_run_pytest",
                "test___init__",
                "test__load_agent_ownership",
                "test__should_run_iteration",
                "test__determine_responsible_agent",
                "test_generate_fix_prompt",
                "test_apply_code_patch",
                "test_commit_code"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\autonomy\\autonomy_loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__handle_shutdown",
                "test_load_tasks",
                "test_save_devlog"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\auto_trigger_runner_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__should_trigger",
                "test__determine_responsible_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\autonomy\\bridge_writer_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_get_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\autonomy\\codex_patch_tracker_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "patch_tracker",
                "mock_scanner_success",
                "mock_scanner_failure",
                "test_init_creates_failure_log_dir",
                "test_validate_with_scanner_success",
                "test_validate_with_scanner_failure",
                "test_validate_with_scanner_error",
                "test_track_patch_with_scanner_success",
                "test_track_patch_with_scanner_failure",
                "test_get_all_patches_includes_scanner_results"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\autonomy\\content_loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_log_content_event",
                "test_log_task_completion",
                "test_log_insight",
                "test_get_content_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\autonomy\\controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_get_agent",
                "test_register_agent",
                "test_unregister_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\core_response_processor_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\cursor_agent_bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__load_agent_regions",
                "test__inject_to_cursor",
                "test___init__",
                "test_on_created"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\autonomy\\enhanced_response_loop_daemon_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_agent_regions",
                "test__save_agent_regions",
                "test__create_response_processor",
                "test__get_response_files",
                "test__has_region_stabilized",
                "test__hash_region",
                "test___init__",
                "test_on_created"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\autonomy\\error_tracking_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_to_dict",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___init__",
                "test_record_failure",
                "test_record_success",
                "test_can_execute",
                "test_get_health_metrics",
                "test_manual_reset",
                "test___init__",
                "test_record_error",
                "test_record_success",
                "test_can_execute",
                "test_get_error_summary",
                "test_get_agent_health",
                "test_get_critical_errors",
                "test__archive_unfixable_error",
                "test_clear_errors",
                "test_manual_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 23
        },
        "tests\\core\\autonomy\\midnight_runner_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\processor_factory_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\autonomy\\startup_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\autonomy\\state_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_current_state",
                "test_transition_history",
                "test_add_state_handler",
                "test_remove_state_handler",
                "test_clear_handlers",
                "test_get_transitions_since",
                "test_get_last_transition",
                "test_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\autonomy\\agent_tools\\agent_cellphone_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test__init_injection_log",
                "test__load_coords",
                "test__check_cooldown",
                "test__update_injection_log",
                "test_type_message",
                "test_broadcast_message",
                "test_force_resume_bridge",
                "test_mass_resume_bridge"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\autonomy\\agent_tools\\agent_onboarder_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test__init_status_file",
                "test_onboard_agent",
                "test_onboard_all_agents",
                "test__update_status",
                "test_get_active_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\agent_tools\\agent_restarter_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test_start",
                "test_stop",
                "test_queue_status_check",
                "test__check_agents",
                "test__check_agent",
                "test__recover_agent",
                "test_get_stalled_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\autonomy\\agent_tools\\heartbeat_monitor_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test_start",
                "test_stop",
                "test__check_agents",
                "test_get_stalled_agents",
                "test___init__",
                "test_on_modified"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\autonomy\\agent_tools\\high_priority_dispatcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test_on_modified",
                "test___init__",
                "test_start",
                "test_stop",
                "test_queue_agent",
                "test__process_queue",
                "test__process_agent",
                "test__parse_intent",
                "test__choose_target",
                "test__format_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\core\\autonomy\\agent_tools\\resume_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test_main",
                "test___init__",
                "test_inject_prompt",
                "test_inject_task",
                "test_log_devlog",
                "test_force_resume",
                "test_check_agent_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\base\\autonomy_loop_runner_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\base\\file_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_on_created",
                "test_on_modified",
                "test_on_deleted"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\base\\response_loop.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__validate_response",
                "test__validate_response",
                "test___init__",
                "test_clear",
                "test_is_empty",
                "test_queue_size"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\base\\response_loop_daemon_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_release",
                "test___init__",
                "test___init__",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\autonomy\\base\\response_loop_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__validate_response",
                "test__validate_response",
                "test___init__",
                "test_clear",
                "test_is_empty",
                "test_queue_size"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\base\\runner_core.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_config",
                "test_parse_test_failures"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\autonomy\\base\\runner_core_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_config",
                "test_parse_test_failures"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\autonomy\\base\\runner_lifecycle.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\autonomy\\base\\runner_lifecycle_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\base\\state_manager.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__setup_metrics",
                "test__setup_recovery",
                "test__validate_backup",
                "test_get_recovery_events",
                "test__validate_transition",
                "test_get_state",
                "test_get_metadata",
                "test_get_history",
                "test_is_stuck",
                "test_get_stuck_agents",
                "test__update_metrics",
                "test_get_stats",
                "test_get_all_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\core\\autonomy\\base\\state_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__setup_metrics",
                "test__setup_recovery",
                "test__validate_backup",
                "test_get_recovery_events",
                "test__validate_transition",
                "test_get_state",
                "test_get_metadata",
                "test_get_history",
                "test_is_stuck",
                "test_get_stuck_agents",
                "test__update_metrics",
                "test_get_stats",
                "test_get_all_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\core\\autonomy\\error\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_to_dict",
                "test___init__",
                "test_record_failure",
                "test_record_success",
                "test_can_execute",
                "test_get_health_metrics",
                "test_manual_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\error\\error_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__get_error_severity",
                "test__should_retry",
                "test__calculate_retry_delay"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\error\\error_reporter_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_generate_report",
                "test_save_report",
                "test__count_by_severity",
                "test__count_by_agent",
                "test__count_by_type"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\error\\error_tracker_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_record_error",
                "test_record_success",
                "test_can_execute",
                "test_get_error_summary"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\autonomy\\error\\tracker_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_track_error",
                "test_get_error_count",
                "test_get_recent_errors"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\autonomy\\error\\types_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_create_error",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__",
                "test___post_init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\autonomy\\handlers\\base_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\handlers\\bridge_outbox_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\handlers\\bridge\\bridge_outbox_handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\autonomy\\logging\\log_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_log",
                "test_info",
                "test_error",
                "test_warning",
                "test_debug"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\memory\\response_memory_tracker_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_memory",
                "test_is_processed",
                "test_track_processing",
                "test__save_memory",
                "test_get_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\memory\\tests\\conftest_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_test_data_dir",
                "test_test_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\autonomy\\test_debug\\fix_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__analyze_failure",
                "test__get_source_content",
                "test__write_source_content",
                "test__extract_missing_import",
                "test__add_import_statement",
                "test__extract_assertion_values",
                "test__update_assertion",
                "test__extract_error_pattern",
                "test__apply_generic_fix",
                "test__fix_type_error",
                "test__fix_value_error",
                "test__fix_attribute_error",
                "test__fix_key_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\core\\autonomy\\test_debug\\task_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_tasks",
                "test__save_tasks",
                "test__get_working_tasks",
                "test__get_future_tasks",
                "test_has_pending_changes",
                "test__get_test_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\autonomy\\test_debug\\utils\\config_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_config",
                "test__validate_config",
                "test_get_path",
                "test_get_test_config",
                "test_get_fix_config",
                "test_update_config",
                "test__deep_merge"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\autonomy\\test_debug\\utils\\debug_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_parse_test_failures",
                "test_create_fix_request",
                "test_save_fix_request",
                "test_load_fix_request",
                "test_archive_fix_request",
                "test_extract_agent_id"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\test_debug\\utils\\state.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "test___init__",
                "test__load_state",
                "test_save_state",
                "test_increment_cycle",
                "test_add_failed_test",
                "test_add_passed_test",
                "test_add_processing_test",
                "test_remove_processing_test",
                "test_get_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\autonomy\\test_debug\\utils\\state_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_state",
                "test_save_state",
                "test_increment_cycle",
                "test_add_failed_test",
                "test_add_passed_test",
                "test_add_processing_test",
                "test_remove_processing_test",
                "test_get_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\autonomy\\utils\\async_file_watcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_dir",
                "temp_file",
                "watcher",
                "test___init__",
                "test_get_file_info",
                "test_clear_cache",
                "test_last_check",
                "test_watched_files",
                "test___init__",
                "test_get_file_info",
                "test_get_file_info_nonexistent",
                "test_clear_cache",
                "test_last_check",
                "test_watched_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\core\\autonomy\\utils\\response_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_load_response_file",
                "test_archive_response_file",
                "test_extract_agent_id_from_file",
                "test_validate_response",
                "test___init__",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\autonomy\\validation\\engine_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_add_validator",
                "test_validate",
                "test_validate_required_fields",
                "test_validate_field_type"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\base\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "bridge_config",
                "test___init__",
                "test_bridge_config_get",
                "test_bridge_config_set",
                "test_bridge_error",
                "test_bridge_error_with_context"
            ],
            "classes": {
                "TestBridge": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\base\\handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\base\\processor_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\bridge\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__validate_config",
                "test___init__",
                "test__load_config",
                "test_get"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\bridge\\conftest.py": {
            "language": ".py",
            "functions": [
                "setup_test_env"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\bridge\\daemon_test.py": {
            "language": ".py",
            "functions": [
                "daemon",
                "test_daemon_initialization",
                "test_start_daemon",
                "test_stop_daemon",
                "test_process_messages"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\bridge\\base\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "bridge_config",
                "test___init__",
                "test_bridge_config_get",
                "test_bridge_config_set",
                "test_bridge_error",
                "test_bridge_error_with_context"
            ],
            "classes": {
                "TestBridge": {
                    "methods": [],
                    "docstring": "",
                    "base_classes": [
                        "BaseBridge"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\bridge\\base\\handler_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\bridge\\base\\processor_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\core\\bridge\\chatgpt\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_format_message",
                "test_format_system_message",
                "test_format_user_message",
                "test_format_assistant_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\bridge\\chatgpt\\prompt_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__get_template",
                "test_add_template",
                "test_remove_template",
                "test_list_templates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\bridge\\config\\config_test.py": {
            "language": ".py",
            "functions": [
                "test_config_dir",
                "base_config",
                "mode_config",
                "agent_config",
                "test_load_config",
                "test_save_agent_config",
                "test_config_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\bridge\\config\\loader_test.py": {
            "language": ".py",
            "functions": [
                "test_config_dir",
                "base_config",
                "mode_config",
                "agent_config",
                "test_bridge_config_loader",
                "test_load_config",
                "test_save_agent_config",
                "test_config_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\bridge\\handlers\\inbox_test.py": {
            "language": ".py",
            "functions": [
                "handler",
                "test_handler_initialization",
                "test_add_message",
                "test_get_next_message",
                "test_clear_queue"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\bridge\\handlers\\outbox_test.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "outbox_dir",
                "outbox_handler",
                "test_outbox_handler_initialization",
                "test_write_response",
                "test_write_response_creates_expected_file",
                "test_write_response_overwrites_existing"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\bridge\\monitoring\\health_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_is_healthy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\bridge\\monitoring\\metrics_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_record_request",
                "test_record_success",
                "test_record_error",
                "test_get_metrics",
                "test_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\bridge\\processors\\message_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__validate_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\bridge\\processors\\response_test.py": {
            "language": ".py",
            "functions": [
                "processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\captain\\captain_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_create_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\captain\\task_scheduler_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_start",
                "test_stop",
                "test__calculate_priority_score",
                "test__is_task_ready",
                "test_get_scheduled_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\chatgpt\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_format_message",
                "test_format_system_message",
                "test_format_user_message",
                "test_format_assistant_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\chatgpt\\prompt_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__get_template",
                "test_add_template",
                "test_remove_template",
                "test_list_templates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\codex\\codex_quality_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__format_validation_prompt",
                "test__log_judgment"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\config\\bridge_config_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_load",
                "test_save",
                "test_validate"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\config\\config_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__ensure_config_dir",
                "test__load_config",
                "test__validate_config",
                "test__save_config",
                "test_get",
                "test_set",
                "test_reset",
                "test_get_bridge_config",
                "test_set_bridge_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\cursor\\cursor_controller_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_type_text",
                "test_press_ctrl_s"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\gpt_router\\bridge_logger_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\gpt_router\\cli_test.py": {
            "language": ".py",
            "functions": [
                "mock_cli",
                "mock_stdin",
                "test_main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\gpt_router\\navigator_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test___iter__",
                "test___next__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\gpt_router\\prompt_engine_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_process_conversation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\gpt_router\\prompt_router_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__load_profile",
                "test_decide_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\gpt_router\\validator_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_validate"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\handlers\\tests\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle",
                "get_handled_event"
            ],
            "classes": {
                "TestHandler": {
                    "methods": [
                        "__init__",
                        "handle",
                        "get_handled_event"
                    ],
                    "docstring": "Test handler implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\handlers\\tests\\runner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\integration\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__create_bridge",
                "test__create_processor",
                "test__create_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\io\\atomic_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_safe_read",
                "test_safe_write"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\io\\json_ops_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_read_json",
                "test_write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\logging\\agent_logger_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_log",
                "test__create_inbox_message",
                "test_get_log",
                "test_clear_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\logging\\log_config_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_get_log_path",
                "test_get_metrics_path",
                "test_get_retention_date",
                "test_setup_logging",
                "test_should_log",
                "test_from_string",
                "test___post_init__",
                "test_to_dict",
                "test_from_dict",
                "test_save",
                "test_load",
                "test___str__",
                "test___repr__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\core\\logging\\log_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_configure",
                "test__setup_logging",
                "test_debug",
                "test_info",
                "test_warning",
                "test_error",
                "test_critical",
                "test_get_metrics",
                "test_shutdown"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\logging\\log_writer_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__get_log_path",
                "test__get_handle_key",
                "test__get_file_handle",
                "test_write_log",
                "test_read_logs",
                "test_clear_log",
                "test_close"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\messaging\\utils\\core_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_format_message",
                "test_parse_message",
                "test_validate_message",
                "test_get_message_type",
                "test_get_message_content",
                "test_get_message_timestamp",
                "test_format_timestamp",
                "test_write_json",
                "test_read_yaml",
                "test_ensure_directory_exists",
                "test_atomic_write",
                "test_safe_read"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\core\\metrics\\base_metrics.py": {
            "language": ".py",
            "functions": [
                "metrics",
                "test_metrics_initialization",
                "test_increment_counter",
                "test_increment_with_tags",
                "test_gauge",
                "test_histogram",
                "test_get_metrics",
                "test_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\metrics\\bridge_metrics.py": {
            "language": ".py",
            "functions": [
                "bridge_metrics",
                "test_bridge_metrics_initialization",
                "test_record_request",
                "test_record_success",
                "test_record_error",
                "test_get_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\metrics\\conftest.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\core\\metrics\\file_metrics.py": {
            "language": ".py",
            "functions": [
                "file_metrics",
                "test_file_metrics_initialization",
                "test_record_read",
                "test_record_write",
                "test_record_error",
                "test_record_directory_operation",
                "test_get_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\metrics\\log_metrics.py": {
            "language": ".py",
            "functions": [
                "log_metrics",
                "test_log_metrics_initialization",
                "test_record_log",
                "test_record_error",
                "test_record_rotation",
                "test_get_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\monitoring\\bridge_health_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_check_health",
                "test_update_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\monitoring\\metrics_server_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test__load_metrics",
                "test_metrics",
                "test_start"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\monitoring\\metrics_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_increment_logs",
                "test_record_error",
                "test_record_rotation",
                "test_reset",
                "test__save",
                "test_get_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\monitoring\\health\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___post_init__",
                "test_to_dict",
                "test_from_dict",
                "test___init__",
                "test__load_health",
                "test__save_health",
                "test_update_health",
                "test_is_healthy",
                "test_get_health_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\nlp\\keyword_extract_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_extract"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\processors\\message_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__validate_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\processors\\response_test.py": {
            "language": ".py",
            "functions": [
                "processor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\response\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__validate",
                "test_to_dict",
                "test_is_valid",
                "test___init__",
                "test___init__",
                "test__ensure_storage",
                "test_store",
                "test_retrieve"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\resumer_v2\\agent_state_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__init_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\resumer_v2\\atomic_file_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\resumer_v2\\quantum_agent_resumer_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__init_event_handlers"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\security\\auth_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_register_user",
                "test_authenticate",
                "test_validate_token",
                "test_get_user_info",
                "test_update_user_metadata",
                "test_assign_role",
                "test_remove_role",
                "test__is_locked_out",
                "test__record_failed_attempt",
                "test_save_users",
                "test_load_users"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\core\\security\\identity_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_generate_agent_id",
                "test_validate_password",
                "test_hash_password",
                "test_verify_password",
                "test_generate_token",
                "test_format_agent_name"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\security\\security_config_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__get_default_config_path",
                "test__load_config",
                "test__validate_and_merge_config",
                "test__save_config",
                "test_get_auth_config",
                "test_get_session_config",
                "test_get_identity_config",
                "test_update_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\security\\session_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__start_cleanup_thread",
                "test_create_session",
                "test_validate_session",
                "test_get_session",
                "test_update_session_metadata",
                "test_invalidate_session",
                "test_cleanup_expired_sessions",
                "test_save_sessions",
                "test_load_sessions",
                "test_cleanup_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\self_discovery\\journal_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_init_db",
                "test_calculate_relapse_risk",
                "test_add_entry",
                "test_log_coding_session",
                "test_get_today_stats",
                "test___init__",
                "test_add_entry",
                "test_log_coding_session",
                "test_get_today_stats",
                "test_calculate_relapse_risk"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\shared\\coordinate_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_load_coordinates",
                "test_save_coordinates",
                "test__process_raw",
                "test_get_coordinates",
                "test_set_coordinates",
                "test_get_agent_coordinates",
                "test_get_input_box_coordinates",
                "test_get_copy_button_coordinates",
                "test_list_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\shared\\coordinate_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_load_coordinates",
                "test_validate_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\core\\shared\\persistent_queue_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "queue",
                "test_load_queue",
                "test_save_queue",
                "test_load_queue_file",
                "test___init__",
                "test__acquire_lock",
                "test__release_lock",
                "test__read_queue",
                "test__write_queue",
                "test__check_rate_limit",
                "test_get_queue_size",
                "test_get_message",
                "test_clear_queue",
                "test_enqueue",
                "test_put",
                "test_get",
                "test_get_status",
                "test_add_message",
                "test_clear_agent",
                "test_queue_size_limit",
                "test_rate_limiting",
                "test_message_priority",
                "test_message_history",
                "test_invalid_message",
                "test_shutdown",
                "test_get_message_history",
                "test_clear_history",
                "test_set_test_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 30
        },
        "tests\\core\\social\\base.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_social_base"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\core\\social\\base_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\social\\cleanup_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__is_file_locked",
                "test__force_close_handle",
                "test__wait_for_file_unlock",
                "test_safe_remove",
                "test_cleanup_directory",
                "test_cleanup_temp_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\social\\conftest.py": {
            "language": ".py",
            "functions": [
                "_kwarg_alias",
                "pytest_configure",
                "sample_log_entry",
                "decorator",
                "_ensure_tmp_log_dir",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\social\\json_settings_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___post_init__",
                "test___getattr__",
                "test___iter__",
                "test_items",
                "test_values",
                "test___getitem__",
                "test_as_dict",
                "test___init__",
                "test_reload",
                "test_convert"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\core\\social\\log_batcher_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_get_batch_size",
                "test_is_running"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\social\\log_config_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___post_init__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\core\\social\\log_entry_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___post_init__",
                "test_to_dict",
                "test_from_dict"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\social\\log_level_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_from_str",
                "test___str__",
                "test_value"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\social\\log_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test___new__",
                "test___init__",
                "test_set_level",
                "test__setup_logging",
                "test_write_log",
                "test_get_metrics",
                "test_read_logs",
                "test_cleanup",
                "test_rotate",
                "test_debug",
                "test_info",
                "test_warning",
                "test_error",
                "test_critical"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\core\\social\\log_pipeline_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__get_file_lock",
                "test__is_file_locked",
                "test__force_close_handle",
                "test__wait_for_file_unlock",
                "test_add_entry",
                "test_flush",
                "test_read_logs",
                "test_get_log_info",
                "test_stop",
                "test___del__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "tests\\core\\social\\log_rotator_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__get_file_size",
                "test__get_file_age",
                "test__rotate_file",
                "test__cleanup_old_backups",
                "test_check_rotation",
                "test_rotate_all",
                "test_get_rotation_info",
                "test_rotate"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\social\\log_writer_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_write_json_log",
                "test___init__",
                "test__ensure_log_dir",
                "test__cleanup_all_locks",
                "test__get_file_lock",
                "test_write_log",
                "test_write_log_json",
                "test_read_logs",
                "test_cleanup_old_logs",
                "test_record_metric",
                "test_get_metrics",
                "test_get_summary",
                "test_save_metrics",
                "test_load_metrics",
                "test_clear_metrics"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\core\\social\\media_validator_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_validate_files",
                "test_validate",
                "test_validate_media"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\social\\rate_limiter_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_check_rate_limit",
                "test_set_rate_limit",
                "test_reset_limits",
                "test_get_remaining"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\core\\social\\social_common_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_wait_for_element",
                "test_wait_for_clickable",
                "test_retry_click",
                "test_handle_login",
                "test_post_content",
                "test_verify_post_success",
                "test_validate_media",
                "test_upload_media"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\ui\\agent_dashboard_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent_ops",
                "mock_agent_restarter",
                "mock_agent_onboarder",
                "test_init",
                "test_setup_ui",
                "test_log_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\ui\\agent_monitor_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test__setup_ui",
                "test_refresh_agents",
                "test__show_devlog",
                "test__force_resume",
                "test__onboard_agent",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\ui\\agent_status_panel_test.py": {
            "language": ".py",
            "functions": [
                "mock_agent",
                "mock_agent_bus",
                "test___init__",
                "test_setup_ui",
                "test_update_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\ui\\log_console_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test_setup_ui",
                "test_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\ui\\log_monitor_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__setup_ui",
                "test_refresh_logs",
                "test_clear_logs",
                "test__show_details",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\core\\ui\\main_window_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test___init__",
                "test__setup_menu",
                "test__show_about",
                "test_closeEvent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\core\\ui\\theme_manager_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_get_dialog_stylesheet",
                "test_apply_dialog_theme",
                "test_is_dark_theme"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\utils\\file_ops_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_safe_mkdir",
                "test_ensure_dir",
                "test_clear_dir",
                "test_archive_file",
                "test_extract_agent_id",
                "test_backup_file",
                "test_safe_rmdir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\fixtures\\runner_fixtures.py": {
            "language": ".py",
            "functions": [
                "runner_config",
                "mock_logger",
                "mock_bridge_handler",
                "mock_agent_error",
                "test_data_dir",
                "sample_test_output",
                "mock_file_operations",
                "runner",
                "_create_error",
                "__init__",
                "write_file",
                "read_file",
                "exists",
                "remove"
            ],
            "classes": {
                "MockFileOps": {
                    "methods": [
                        "__init__",
                        "write_file",
                        "read_file",
                        "exists",
                        "remove"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\integration\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "test_env",
                "setup_test_environment",
                "log_dir",
                "runtime_dir",
                "clean_log_dir",
                "test_log_config",
                "test_log_manager",
                "mock_agent_ops",
                "mock_agent_status",
                "mock_agent_cellphone",
                "mock_chatgpt_bridge",
                "mock_message_processor",
                "temp_outbox"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\integration\\core\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__create_bridge",
                "test__create_processor",
                "test__create_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\integration\\core\\tests\\core_runner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\integration\\core\\tests\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle",
                "get_handled_event"
            ],
            "classes": {
                "TestHandler": {
                    "methods": [
                        "__init__",
                        "handle",
                        "get_handled_event"
                    ],
                    "docstring": "Test handler implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\integration\\features\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "test_env",
                "setup_test_environment",
                "log_dir",
                "runtime_dir",
                "clean_log_dir",
                "test_log_config",
                "test_log_manager",
                "mock_agent_ops",
                "mock_agent_status",
                "mock_agent_cellphone",
                "mock_chatgpt_bridge",
                "mock_message_processor",
                "temp_outbox"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\integration\\features\\core\\bridge_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test__create_bridge",
                "test__create_processor",
                "test__create_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\integration\\features\\core\\tests\\features_runner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\integration\\features\\core\\tests\\handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle",
                "get_handled_event"
            ],
            "classes": {
                "TestHandler": {
                    "methods": [
                        "__init__",
                        "handle",
                        "get_handled_event"
                    ],
                    "docstring": "Test handler implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\ui\\conftest.py": {
            "language": ".py",
            "functions": [
                "main_window",
                "auto_close_timer",
                "_create_timer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\unit\\core\\config\\config_test.py": {
            "language": ".py",
            "functions": [
                "test_config_dir",
                "base_config",
                "mode_config",
                "agent_config",
                "test_load_config",
                "test_save_agent_config",
                "test_config_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\unit\\core\\config\\loader_test.py": {
            "language": ".py",
            "functions": [
                "test_config_dir",
                "base_config",
                "mode_config",
                "agent_config",
                "test_bridge_config_loader",
                "test_load_config",
                "test_save_agent_config",
                "test_config_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\unit\\core\\handlers\\inbox_test.py": {
            "language": ".py",
            "functions": [
                "handler",
                "test_handler_initialization",
                "test_add_message",
                "test_get_next_message",
                "test_clear_queue"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\unit\\core\\handlers\\outbox_test.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "outbox_dir",
                "outbox_handler",
                "test_outbox_handler_initialization",
                "test_write_response",
                "test_write_response_creates_expected_file",
                "test_write_response_overwrites_existing"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\unit\\core\\monitoring\\health_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_is_healthy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\unit\\core\\monitoring\\metrics_test.py": {
            "language": ".py",
            "functions": [
                "mock_bridge",
                "mock_config",
                "test___init__",
                "test_record_request",
                "test_record_success",
                "test_record_error",
                "test_get_metrics",
                "test_reset"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\unit\\core\\utils\\core_utils_test.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "temp_file",
                "test_format_message",
                "test_parse_message",
                "test_validate_message",
                "test_get_message_type",
                "test_get_message_content",
                "test_get_message_timestamp",
                "test_format_timestamp",
                "test_write_json",
                "test_read_yaml",
                "test_ensure_directory_exists",
                "test_atomic_write",
                "test_safe_read"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\unit\\features\\conftest.py": {
            "language": ".py",
            "functions": [
                "main_window",
                "auto_close_timer",
                "_create_timer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\utils\\bridge_test_utils.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "setup_test_environment",
                "bridge_dir",
                "outbox_dir",
                "agent_dir",
                "test_files",
                "__init__",
                "to_dict",
                "to_json",
                "__init__",
                "create_test_message",
                "create_test_response",
                "get_messages",
                "get_responses",
                "clear_messages",
                "clear_responses",
                "cleanup",
                "__init__"
            ],
            "classes": {
                "MockBridgeResponse": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "to_json"
                    ],
                    "docstring": "Mock bridge response for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BridgeTestEnvironment": {
                    "methods": [
                        "__init__",
                        "create_test_message",
                        "create_test_response",
                        "get_messages",
                        "get_responses",
                        "clear_messages",
                        "clear_responses",
                        "cleanup"
                    ],
                    "docstring": "Test environment for bridge testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockBridge": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock bridge for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "tests\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get",
                "set",
                "load"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "get",
                        "set",
                        "load"
                    ],
                    "docstring": "Manages test configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "tests\\utils\\conftest.py": {
            "language": ".py",
            "functions": [
                "tmp_file",
                "tmp_dir",
                "tmp_json",
                "tmp_yaml"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\utils\\mock_discord.py": {
            "language": ".py",
            "functions": [
                "create_mock_embed",
                "create_mock_context",
                "create_mock_guild",
                "create_mock_member",
                "create_mock_channel",
                "create_mock_message",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "add_field",
                "__init__",
                "__init__",
                "command",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "get_member",
                "get_channel",
                "__init__",
                "__init__",
                "__init__",
                "load",
                "__init__",
                "load_opus",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "get_voice_client",
                "__init__",
                "__init__",
                "__init__",
                "get_voice_websocket",
                "__init__",
                "__init__",
                "__init__",
                "get_voice_websocket_voice",
                "__init__",
                "__init__",
                "__init__",
                "get_voice_websocket_voice_websocket",
                "__init__",
                "default",
                "all",
                "decorator"
            ],
            "classes": {
                "Guild": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Guild.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Member": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Member.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TextChannel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Text Channel.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Message": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Message.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Interaction": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Interaction.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractionResponse": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Interaction Response.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractionFollowup": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Interaction Followup.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Context": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Embed": {
                    "methods": [
                        "add_field"
                    ],
                    "docstring": "Mock Discord Embed.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandError": {
                    "methods": [],
                    "docstring": "Base class for command errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandNotFound": {
                    "methods": [],
                    "docstring": "Command not found error.",
                    "base_classes": [
                        "CommandError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MissingRequiredArgument": {
                    "methods": [],
                    "docstring": "Missing required argument error.",
                    "base_classes": [
                        "CommandError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BadArgument": {
                    "methods": [],
                    "docstring": "Bad argument error.",
                    "base_classes": [
                        "CommandError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Command": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord command.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Bot": {
                    "methods": [
                        "__init__",
                        "command"
                    ],
                    "docstring": "Mock Discord bot.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "commands": {
                    "methods": [],
                    "docstring": "Mock discord.ext.commands module.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ext": {
                    "methods": [],
                    "docstring": "Mock discord.ext module.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockMessage": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord message object.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockUser": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord user object.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockChannel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord channel object.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockGuild": {
                    "methods": [
                        "__init__",
                        "get_member",
                        "get_channel"
                    ],
                    "docstring": "Mock Discord guild object.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceClient": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice Client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Gateway": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Gateway.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Opus": {
                    "methods": [
                        "__init__",
                        "load"
                    ],
                    "docstring": "Mock Discord Opus.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OpusLoader": {
                    "methods": [
                        "__init__",
                        "load_opus"
                    ],
                    "docstring": "Mock Discord Opus Loader.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceState": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice State.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceProtocol": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice Protocol.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceRegion": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice Region.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceRecv": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice Receiver.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceSend": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice Sender.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceUtils": {
                    "methods": [
                        "get_voice_client"
                    ],
                    "docstring": "Mock Discord Voice Utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocket": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketClient": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketServer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketUtils": {
                    "methods": [
                        "get_voice_websocket"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoice": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceClient": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice Client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceServer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice Server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceUtils": {
                    "methods": [
                        "get_voice_websocket_voice"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice Utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocket": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice WebSocket.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketClient": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice WebSocket Client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketServer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice WebSocket Server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketUtils": {
                    "methods": [
                        "get_voice_websocket_voice_websocket"
                    ],
                    "docstring": "Mock Discord Voice WebSocket Voice WebSocket Utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Intents": {
                    "methods": [
                        "__init__",
                        "default",
                        "all"
                    ],
                    "docstring": "Mock Discord Intents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 96
        },
        "tests\\utils\\mock_factory.py": {
            "language": ".py",
            "functions": [
                "create_mock_guild",
                "create_mock_member",
                "create_mock_channel",
                "create_mock_message",
                "create_mock_interaction",
                "create_mock_context",
                "create_mock_embed",
                "clear_all_mocks",
                "__init__",
                "create",
                "get",
                "clear",
                "__init__",
                "create_guild",
                "create_member",
                "create_channel",
                "create_message",
                "create_interaction",
                "create_context",
                "create_embed",
                "clear_all"
            ],
            "classes": {
                "MockFactory": {
                    "methods": [
                        "__init__",
                        "create",
                        "get",
                        "clear"
                    ],
                    "docstring": "Base factory for creating mock objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DiscordMockFactory": {
                    "methods": [
                        "__init__",
                        "create_guild",
                        "create_member",
                        "create_channel",
                        "create_message",
                        "create_interaction",
                        "create_context",
                        "create_embed",
                        "clear_all"
                    ],
                    "docstring": "Factory for creating Discord-related mock objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\utils\\mock_discord\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "cog_unload",
                "__init__",
                "__init__",
                "__init__",
                "default",
                "blue",
                "red",
                "green",
                "__int__"
            ],
            "classes": {
                "Cog": {
                    "methods": [
                        "__init__",
                        "cog_unload"
                    ],
                    "docstring": "Mock Discord Cog class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Guild": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Guild class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Context": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Context class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandError": {
                    "methods": [],
                    "docstring": "Mock Discord CommandError class.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Command": {
                    "methods": [],
                    "docstring": "Mock Discord command.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Color": {
                    "methods": [
                        "__init__",
                        "default",
                        "blue",
                        "red",
                        "green",
                        "__int__"
                    ],
                    "docstring": "Mock Discord Color class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\utils\\mock_discord\\client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "is_ready",
                "is_closed",
                "get_cog",
                "get_command",
                "add_cog",
                "remove_cog",
                "add_command",
                "remove_command",
                "event",
                "listen",
                "get_command",
                "get_cog",
                "get_guild",
                "stop",
                "__init__",
                "wrapper",
                "wrapper"
            ],
            "classes": {
                "MockCommand": {
                    "methods": [],
                    "docstring": "Mock Discord command.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ClientUser": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord client user.",
                    "base_classes": [
                        "MockMember"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Client": {
                    "methods": [
                        "__init__",
                        "is_ready",
                        "is_closed",
                        "get_cog",
                        "get_command",
                        "add_cog",
                        "remove_cog",
                        "add_command",
                        "remove_command",
                        "event",
                        "listen"
                    ],
                    "docstring": "Mock Discord client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockBot": {
                    "methods": [
                        "get_command",
                        "get_cog",
                        "get_guild"
                    ],
                    "docstring": "Mock Discord bot.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockCog": {
                    "methods": [],
                    "docstring": "Mock Discord cog.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceClient": {
                    "methods": [
                        "stop"
                    ],
                    "docstring": "Mock Discord VoiceClient class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockContext": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Minimal mock for Discord command context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\utils\\mock_discord\\commands.py": {
            "language": ".py",
            "functions": [
                "command",
                "cog_unload",
                "add_cog",
                "remove_cog",
                "get_cog",
                "add_command",
                "remove_command",
                "get_command",
                "decorator"
            ],
            "classes": {
                "Command": {
                    "methods": [],
                    "docstring": "Mock command.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Group": {
                    "methods": [
                        "command"
                    ],
                    "docstring": "Mock command group.",
                    "base_classes": [
                        "Command"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Cog": {
                    "methods": [
                        "cog_unload"
                    ],
                    "docstring": "Mock cog.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Bot": {
                    "methods": [
                        "add_cog",
                        "remove_cog",
                        "get_cog",
                        "add_command",
                        "remove_command",
                        "get_command"
                    ],
                    "docstring": "Mock Discord bot.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Context": {
                    "methods": [],
                    "docstring": "Mock command context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\utils\\mock_discord\\discord.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "from_rgb",
                "from_str",
                "__init__",
                "add_command",
                "__init__"
            ],
            "classes": {
                "Status": {
                    "methods": [],
                    "docstring": "Mock Status enum.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChannelType": {
                    "methods": [],
                    "docstring": "Mock ChannelType enum.",
                    "base_classes": [
                        "int",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ActivityType": {
                    "methods": [],
                    "docstring": "Mock activity types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Activity": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Activity class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Intents": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Intents class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Color": {
                    "methods": [
                        "__init__",
                        "from_rgb",
                        "from_str"
                    ],
                    "docstring": "Mock Discord color class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Client": {
                    "methods": [
                        "__init__",
                        "add_command"
                    ],
                    "docstring": "Mock Discord Client class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Command": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Command class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\utils\\mock_discord\\helpers.py": {
            "language": ".py",
            "functions": [
                "create_mock_guild",
                "create_mock_context",
                "create_mock_bot",
                "create_mock_embed",
                "create_mock_webhook",
                "create_mock_file",
                "run_async_test",
                "async_test",
                "mock_command_decorator",
                "wrapper",
                "decorator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\utils\\mock_discord\\interaction.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "Interaction": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Interaction class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractionResponse": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord InteractionResponse class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractionFollowup": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord InteractionFollowup class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\utils\\mock_discord\\models.py": {
            "language": ".py",
            "functions": [
                "create_mock_embed",
                "__init__",
                "__init__",
                "get_role",
                "get_member",
                "get_channel",
                "__init__",
                "add_member",
                "remove_member",
                "__init__",
                "add_role",
                "remove_role",
                "__init__",
                "__init__",
                "__init__",
                "add_field",
                "set_footer",
                "set_image",
                "set_thumbnail",
                "__init__",
                "__init__",
                "__init__",
                "add_field",
                "set_footer",
                "set_image",
                "set_thumbnail",
                "__init__",
                "__init__",
                "__eq__",
                "default",
                "blue",
                "dark_blue",
                "green",
                "dark_green",
                "red",
                "dark_red",
                "gold",
                "dark_gold",
                "purple",
                "dark_purple",
                "teal",
                "dark_teal",
                "orange",
                "dark_orange",
                "grey",
                "dark_grey",
                "darker_grey",
                "light_grey",
                "dark_theme",
                "blurple",
                "dark_blurple"
            ],
            "classes": {
                "Activity": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Activity for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockGuild": {
                    "methods": [
                        "__init__",
                        "get_role",
                        "get_member",
                        "get_channel"
                    ],
                    "docstring": "Mock Discord Guild for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockRole": {
                    "methods": [
                        "__init__",
                        "add_member",
                        "remove_member"
                    ],
                    "docstring": "Mock Discord Role for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockMember": {
                    "methods": [
                        "__init__",
                        "add_role",
                        "remove_role"
                    ],
                    "docstring": "Mock Discord Member for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockChannel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Channel for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockMessage": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Message for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockEmbed": {
                    "methods": [
                        "__init__",
                        "add_field",
                        "set_footer",
                        "set_image",
                        "set_thumbnail"
                    ],
                    "docstring": "Mock Discord Embed for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockFile": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord File for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockWebhook": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Webhook for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Embed": {
                    "methods": [
                        "__init__",
                        "add_field",
                        "set_footer",
                        "set_image",
                        "set_thumbnail"
                    ],
                    "docstring": "Mock Discord Embed class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ButtonStyle": {
                    "methods": [],
                    "docstring": "Mock Discord ButtonStyle class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Interaction": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord Interaction class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Color": {
                    "methods": [
                        "__init__",
                        "__eq__",
                        "default",
                        "blue",
                        "dark_blue",
                        "green",
                        "dark_green",
                        "red",
                        "dark_red",
                        "gold",
                        "dark_gold",
                        "purple",
                        "dark_purple",
                        "teal",
                        "dark_teal",
                        "orange",
                        "dark_orange",
                        "grey",
                        "dark_grey",
                        "darker_grey",
                        "light_grey",
                        "dark_theme",
                        "blurple",
                        "dark_blurple"
                    ],
                    "docstring": "Mock Discord Color class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 64
        },
        "tests\\utils\\mock_discord\\ui.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_item",
                "__init__",
                "__init__",
                "add_option",
                "__init__",
                "__init__",
                "add_item"
            ],
            "classes": {
                "ButtonStyle": {
                    "methods": [],
                    "docstring": "Mock button styles.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "View": {
                    "methods": [
                        "__init__",
                        "add_item"
                    ],
                    "docstring": "Mock Discord view.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Button": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord button.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Select": {
                    "methods": [
                        "__init__",
                        "add_option"
                    ],
                    "docstring": "Mock Discord select menu.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TextInput": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock Discord text input.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Modal": {
                    "methods": [
                        "__init__",
                        "add_item"
                    ],
                    "docstring": "Mock Discord modal.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\utils\\mock_discord\\voice.py": {
            "language": ".py",
            "functions": [
                "stop"
            ],
            "classes": {
                "VoiceClient": {
                    "methods": [
                        "stop"
                    ],
                    "docstring": "Simplified mock of ``discord.VoiceClient``.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Gateway": {
                    "methods": [],
                    "docstring": "Mock of discord.gateway.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Opus": {
                    "methods": [],
                    "docstring": "Mock of discord.opus.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OpusLoader": {
                    "methods": [],
                    "docstring": "Mock of discord.opus_loader.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceState": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_state.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceProtocol": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_protocol.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceRegion": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_region.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceRecv": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_recv.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceSend": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_send.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceUtils": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocket": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketClient": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketServer": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketUtils": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoice": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceClient": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceServer": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceUtils": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocket": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_websocket.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketClient": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_websocket_client.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketServer": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_websocket_server.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceWebSocketVoiceWebSocketUtils": {
                    "methods": [],
                    "docstring": "Mock of discord.voice_websocket_voice_websocket_utils.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\utils\\mock_discord\\webhook.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "MockWebhook": {
                    "methods": [],
                    "docstring": "Mock Discord webhook.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "tests\\utils\\mock_factories\\channel_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_next_id",
                "create_text_channel",
                "create_voice_channel",
                "create_category",
                "create_thread",
                "create_dm_channel"
            ],
            "classes": {
                "MockChannel": {
                    "methods": [],
                    "docstring": "Base mock channel class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockChannelFactory": {
                    "methods": [
                        "__init__",
                        "_get_next_id",
                        "create_text_channel",
                        "create_voice_channel",
                        "create_category",
                        "create_thread",
                        "create_dm_channel"
                    ],
                    "docstring": "Factory for creating mock Discord channels.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "tests\\utils\\mock_factories\\guild_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_next_id",
                "create_basic_guild",
                "create_community_guild",
                "create_partner_guild",
                "create_gaming_guild"
            ],
            "classes": {
                "MockGuild": {
                    "methods": [],
                    "docstring": "Base mock guild class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockGuildFactory": {
                    "methods": [
                        "__init__",
                        "_get_next_id",
                        "create_basic_guild",
                        "create_community_guild",
                        "create_partner_guild",
                        "create_gaming_guild"
                    ],
                    "docstring": "Factory for creating mock Discord guilds.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\utils\\mock_factories\\interaction_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_next_id",
                "create_basic_interaction",
                "create_command_interaction",
                "create_button_interaction",
                "create_modal_interaction"
            ],
            "classes": {
                "MockInteraction": {
                    "methods": [],
                    "docstring": "Base mock interaction class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockInteractionFactory": {
                    "methods": [
                        "__init__",
                        "_get_next_id",
                        "create_basic_interaction",
                        "create_command_interaction",
                        "create_button_interaction",
                        "create_modal_interaction"
                    ],
                    "docstring": "Factory for creating mock Discord interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\utils\\mock_factories\\message_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_next_id",
                "create_basic_message",
                "create_embed_message",
                "create_reaction_message",
                "create_thread_message"
            ],
            "classes": {
                "MockMessage": {
                    "methods": [],
                    "docstring": "Base mock message class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockMessageFactory": {
                    "methods": [
                        "__init__",
                        "_get_next_id",
                        "create_basic_message",
                        "create_embed_message",
                        "create_reaction_message",
                        "create_thread_message"
                    ],
                    "docstring": "Factory for creating mock Discord messages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tools\\analyze_restructure.py": {
            "language": ".py",
            "functions": [
                "load_move_map",
                "analyze_directory",
                "generate_tree",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tools\\autopitch_machine.py": {
            "language": ".py",
            "functions": [
                "parse_devlog",
                "create_visual",
                "send_to_discord"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\calibrate_coordinates.py": {
            "language": ".py",
            "functions": [
                "get_mouse_position",
                "calibrate_agent",
                "calibrate_multiple_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\check_cursor_coords.py": {
            "language": ".py",
            "functions": [
                "on_click",
                "on_press"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tools\\create_minimal_core.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tools\\daily_trigger.py": {
            "language": ".py",
            "functions": [
                "send_notification",
                "check_activities",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\exec_overnight_tests.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tools\\layout_snapshot.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_get_screen_info",
                "_compute_hash",
                "create_snapshot",
                "_save_snapshot",
                "load_snapshot",
                "list_snapshots",
                "compare_snapshots"
            ],
            "classes": {
                "LayoutSnapshot": {
                    "methods": [],
                    "docstring": "Represents a snapshot of agent layouts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LayoutSnapshotManager": {
                    "methods": [
                        "__init__",
                        "_get_screen_info",
                        "_compute_hash",
                        "create_snapshot",
                        "_save_snapshot",
                        "load_snapshot",
                        "list_snapshots",
                        "compare_snapshots"
                    ],
                    "docstring": "Manages layout snapshots.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tools\\life_os_dashboard.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tools\\odyssey_board.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "dragEnterEvent",
                "dragMoveEvent",
                "dropEvent",
                "__init__",
                "_build_tabs",
                "closeEvent",
                "_persist_board"
            ],
            "classes": {
                "KanbanColumn": {
                    "methods": [
                        "__init__",
                        "dragEnterEvent",
                        "dragMoveEvent",
                        "dropEvent"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "QListWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OdysseyBoard": {
                    "methods": [
                        "__init__",
                        "_build_tabs",
                        "closeEvent",
                        "_persist_board"
                    ],
                    "docstring": "",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tools\\odyssey_generator.py": {
            "language": ".py",
            "functions": [
                "_extract_identity",
                "generate_odyssey",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\prepare_release.py": {
            "language": ".py",
            "functions": [
                "generate_changelog",
                "prepare_release"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tools\\recalibrate_coords.py": {
            "language": ".py",
            "functions": [
                "get_window_info",
                "capture_point",
                "validate_unique_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tools\\restructure_agent_tools.py": {
            "language": ".py",
            "functions": [
                "create_backup",
                "create_directories",
                "find_pycache_dirs",
                "find_empty_dirs",
                "move_files",
                "cleanup_old_dirs",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tools\\run_menu.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tools\\run_overnight_tests.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tools\\run_tests.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run_test",
                "save_results",
                "print_summary",
                "run_all"
            ],
            "classes": {
                "TestRunner": {
                    "methods": [
                        "__init__",
                        "run_test",
                        "save_results",
                        "print_summary",
                        "run_all"
                    ],
                    "docstring": "",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "tools\\skip_broken_tests.py": {
            "language": ".py",
            "functions": [
                "should_skip",
                "process_file",
                "walk_and_patch"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\start_metrics_server.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tools\\update_imports.py": {
            "language": ".py",
            "functions": [
                "create_backup",
                "load_move_map",
                "parse_imports",
                "update_imports",
                "format_file",
                "run_tests",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        }
    }
}