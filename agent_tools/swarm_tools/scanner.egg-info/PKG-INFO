Metadata-Version: 2.4
Name: scanner
Version: 0.1.0
Summary: A modular and extensible project analysis tool
Home-page: https://github.com/yourusername/project-scanner
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Testing
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pytest>=7.0.0
Requires-Dist: pytest-asyncio>=0.21.0
Requires-Dist: pytest-cov>=4.1.0
Requires-Dist: black>=23.0.0
Requires-Dist: isort>=5.12.0
Requires-Dist: mypy>=1.0.0
Requires-Dist: flake8>=6.0.0
Requires-Dist: flake8-docstrings>=1.7.0
Requires-Dist: types-setuptools>=65.0.0
Requires-Dist: types-PyYAML>=6.0.0
Requires-Dist: types-requests>=2.28.0
Requires-Dist: types-urllib3>=1.26.0
Requires-Dist: types-python-dateutil>=2.8.0
Requires-Dist: types-pytz>=2023.3.0
Requires-Dist: types-six>=1.16.0
Requires-Dist: types-toml>=0.10.0
Requires-Dist: PyYAML>=6.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Project Scanner

A modular and extensible project analysis tool that provides comprehensive insights into your codebase.

## Features

- **Dependency Analysis**: Track imports, identify circular dependencies, and map project structure
- **Code Quality Metrics**: Calculate cyclomatic complexity, detect code duplication, and measure test coverage
- **Architecture Insights**: Group related files, identify core vs. peripheral components
- **Test Analysis**: Separate test files and analyze test coverage
- **ChatGPT Context**: Generate detailed context for AI-assisted development

## Installation

```bash
pip install -r requirements.txt
```

## Usage

```python
from scanner.scanner import Scanner

# Initialize scanner
scanner = Scanner(project_root="path/to/project")

# Scan project
analysis = scanner.scan_project(
    ignore_patterns=["venv", "__pycache__", "node_modules"],
    categorize_agents=True,
    generate_init=True
)
```

## Project Structure

```
scanner/
├── analyzers/
│   ├── dependency_analyzer.py
│   └── quality_analyzer.py
├── models/
│   └── analysis.py
├── utils/
│   └── file_utils.py
├── scanner.py
└── tests/
    ├── conftest.py
    ├── test_analyzers.py
    ├── test_models.py
    ├── test_scanner.py
    └── test_utils.py
```

## Output Files

- `project_analysis.json`: Complete project analysis
- `test_analysis.json`: Test file analysis
- `chatgpt_project_context.json`: Context for AI-assisted development

## Development

### Running Tests

```bash
pytest tests/
```

### Adding New Analyzers

1. Create a new analyzer class in `analyzers/`
2. Implement required methods
3. Add tests in `tests/test_analyzers.py`
4. Update `scanner.py` to use the new analyzer

### Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new features
4. Submit a pull request

## License

MIT License 
